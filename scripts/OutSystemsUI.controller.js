define("OutSystemsUI.controller$AccordionChangeMultipleItems", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionChangeMultipleItems.ChangeIsExpandedJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionChangeMultipleItems_ChangeIsExpandedJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionChangeMultipleItems$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionChangeMultipleItems$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionChangeMultipleItems_ChangeIsExpandedJS, "ChangeIsExpanded", "AccordionChangeMultipleItems", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("MultipleItems", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionChangeMultipleItems$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionChangeMultipleItems$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionChangeMultipleItems$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionChangeMultipleItems.ChangeIsExpandedJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionChangeProperty_ChangePropertyJS, "ChangeProperty", "AccordionChangeProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionCollapseAll", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionCollapseAll.CollapseAllJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionCollapseAll_CollapseAllJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionCollapseAll$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionCollapseAll$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var collapseAllJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionCollapseAll$outVars"))());
    // Trigger the API method that will collapse all elements from the given pattern ID.
    collapseAllJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionCollapseAll_CollapseAllJS, "CollapseAll", "AccordionCollapseAll", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionCollapseAll$collapseAllJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(collapseAllJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionCollapseAll$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionCollapseAll$collapseAllJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionCollapseAll$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionCollapseAll$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionCollapseAll$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AccordionCollapseAll.CollapseAllJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.AccordionAPI.CollapseAllItems($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionCreate.CreateJS", "OutSystemsUI.model$Accordion_InternalConfigsRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionCreate_CreateJS, "Create", "AccordionCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.Accordion_InternalConfigsRec();
    },
    complexType: OutSystemsUIModel.Accordion_InternalConfigsRec
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.Accordion_InternalConfigsRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$AccordionDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionDestroy_DestroyJS, "Destroy", "AccordionDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionExpandAll", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionExpandAll.ExpandAllJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionExpandAll_ExpandAllJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionExpandAll$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionExpandAll$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var expandAllJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionExpandAll$outVars"))());
    // Trigger the API method that will expand all elements from the given pattern ID.
    expandAllJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionExpandAll_ExpandAllJS, "ExpandAll", "AccordionExpandAll", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionExpandAll$expandAllJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(expandAllJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionExpandAll$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionExpandAll$expandAllJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionExpandAll$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionExpandAll$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionExpandAll$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AccordionExpandAll.ExpandAllJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.AccordionAPI.ExpandAllItems($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionInitialize_InitializeJS, "Initialize", "AccordionInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemAllowTitleEvents", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemAllowTitleEvents.AccordionItemAllowTitleEventsJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemAllowTitleEvents_AccordionItemAllowTitleEventsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemAllowTitleEvents$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemAllowTitleEvents$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var accordionItemAllowTitleEventsJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemAllowTitleEvents$outVars"))());
    // Trigger the API method that will expand the element from the given pattern ID.
    accordionItemAllowTitleEventsJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemAllowTitleEvents_AccordionItemAllowTitleEventsJS, "AccordionItemAllowTitleEvents", "AccordionItemAllowTitleEvents", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemAllowTitleEvents$accordionItemAllowTitleEventsJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(accordionItemAllowTitleEventsJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemAllowTitleEvents$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemAllowTitleEvents$accordionItemAllowTitleEventsJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemAllowTitleEvents$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemAllowTitleEvents$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemAllowTitleEvents$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemAllowTitleEvents.AccordionItemAllowTitleEventsJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.AccordionItemAPI.AllowTitleEvents($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemChangeIconPosition", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemChangeIconPosition.ChangeIconPositionJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemChangeIconPosition_ChangeIconPositionJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemChangeIconPosition$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemChangeIconPosition$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemChangeIconPosition_ChangeIconPositionJS, "ChangeIconPosition", "AccordionItemChangeIconPosition", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("IconPosition", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemChangeIconPosition$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemChangeIconPosition$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemChangeIconPosition$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemChangeIconPosition.ChangeIconPositionJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemChangeIconType", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemChangeIconType.ChangeIconTypeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemChangeIconType_ChangeIconTypeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemChangeIconType$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemChangeIconType$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemChangeIconType_ChangeIconTypeJS, "ChangeIconType", "AccordionItemChangeIconType", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Icon", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemChangeIconType$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemChangeIconType$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemChangeIconType$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemChangeIconType.ChangeIconTypeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemChangeIsDisabled", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemChangeIsDisabled.ChangeIsDisabledJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemChangeIsDisabled_ChangeIsDisabledJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemChangeIsDisabled$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemChangeIsDisabled$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemChangeIsDisabled_ChangeIsDisabledJS, "ChangeIsDisabled", "AccordionItemChangeIsDisabled", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("IsDisabled", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemChangeIsDisabled$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemChangeIsDisabled$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemChangeIsDisabled$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemChangeIsDisabled.ChangeIsDisabledJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemChangeIsExpanded", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemChangeIsExpanded.ChangeIsExpandedJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemChangeIsExpanded_ChangeIsExpandedJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemChangeIsExpanded$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemChangeIsExpanded$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemChangeIsExpanded_ChangeIsExpandedJS, "ChangeIsExpanded", "AccordionItemChangeIsExpanded", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("IsExpanded", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemChangeIsExpanded$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemChangeIsExpanded$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemChangeIsExpanded$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemChangeIsExpanded.ChangeIsExpandedJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemChangeProperty_ChangePropertyJS, "ChangeProperty", "AccordionItemChangeProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemCollapse", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemCollapse.CloseJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemCollapse_CloseJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemCollapse$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemCollapse$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemCollapse$outVars"))());
    // Trigger the API method that will collapse the element from the given pattern ID.
    closeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemCollapse_CloseJS, "Close", "AccordionItemCollapse", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemCollapse$closeJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemCollapse$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemCollapse$closeJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemCollapse$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemCollapse$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemCollapse$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemCollapse.CloseJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.AccordionItemAPI.Collapse($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemCreate$Action = function (uniqueIdIn, internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemCreate_CreateJS, "Create", "AccordionItemCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemCreate$Action = function (uniqueIdIn, internal_ConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? "" : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internal_ConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemDestroy_DestroyJS, "Destroy", "AccordionItemDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemExpand", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemExpand.OpenJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemExpand_OpenJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemExpand$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemExpand$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemExpand$outVars"))());
    // Trigger the API method that will expand the element from the given pattern ID.
    openJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemExpand_OpenJS, "Open", "AccordionItemExpand", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemExpand$openJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemExpand$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemExpand$openJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemExpand$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemExpand$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemExpand$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemExpand.OpenJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.AccordionItemAPI.Expand($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemInitialize_InitializeJS, "Initialize", "AccordionItemInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AccordionItemRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionItemRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionItemRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionItemRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionItemRegisterCallback_RegisterCallbackJS, "RegisterCallback", "AccordionItemRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionItemRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionItemRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionItemRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionItemAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$AccordionRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AccordionRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AccordionRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.accordionRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AccordionRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AccordionRegisterCallback_RegisterCallbackJS, "RegisterCallback", "AccordionRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AccordionRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.accordionRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.accordionRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AccordionRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AccordionAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$AddFavicon", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AddFavicon.AddFaviconJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$AddFavicon_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AddFavicon_AddFaviconJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.addFavicon$Action = function (uRLIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AddFavicon$vars"))());
    vars.value.uRLInLocal = uRLIn;
    var addFavicon_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var addFaviconJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AddFavicon$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    // Add favicon to your project
    addFaviconJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_AddFavicon_AddFaviconJS, "AddFavicon", "AddFavicon", {
    URL: OS.DataConversion.JSNodeParamConverter.to(vars.value.uRLInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.AddFavicon$addFaviconJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(addFaviconJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    } else {
    // Execute Action: AddFavicon_Legacy
    addFavicon_LegacyVar.value = OutSystemsUIController.default.addFavicon_Legacy$Action(vars.value.uRLInLocal, callContext);
    
    // Set Error Message
    // Success = AddFavicon_Legacy.Success
    outVars.value.successOut = addFavicon_LegacyVar.value.successOut;
    // ErrorMessage = AddFavicon_Legacy.ErrorMessage
    outVars.value.errorMessageOut = addFavicon_LegacyVar.value.errorMessageOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AddFavicon$vars", [{
    name: "URL",
    attrName: "uRLInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AddFavicon$addFaviconJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AddFavicon$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.addFavicon$Action = function (uRLIn) {
    uRLIn = (uRLIn === undefined) ? "" : uRLIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.addFavicon$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uRLIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AddFavicon.AddFaviconJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.AddFavicon($parameters.URL);
    };
    });
    
    define("OutSystemsUI.controller$AddFavicon_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AddFavicon_Legacy.AddFaviconJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AddFavicon_Legacy_AddFaviconJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.addFavicon_Legacy$Action = function (uRLIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AddFavicon_Legacy$vars"))());
    vars.value.uRLInLocal = uRLIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AddFavicon_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("AddFavicon", callContext);
    
    // Add favicon to your project
    controller.safeExecuteJSNode(OutSystemsUI_controller_AddFavicon_Legacy_AddFaviconJS, "AddFavicon", "AddFavicon_Legacy", {
    URL: OS.DataConversion.JSNodeParamConverter.to(vars.value.uRLInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("AddFavicon_Legacy.AddFavicon_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000001"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000001";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AddFavicon_Legacy$vars", [{
    name: "URL",
    attrName: "uRLInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AddFavicon_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.addFavicon_Legacy$Action = function (uRLIn) {
    uRLIn = (uRLIn === undefined) ? "" : uRLIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.addFavicon_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uRLIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$AddFavicon_Legacy.AddFaviconJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    const existingFavicon = document.querySelector("link[rel*='icon']");
    
    if (existingFavicon) {
        existingFavicon.href = URL;
    }
    else {
        const link = document.createElement('link');
        link.type = 'image/x-icon';
        link.rel = 'shortcut icon';
        link.href = URL;
        document.getElementsByTagName('head')[0].appendChild(link);
    }
    };
    });
    
    define("OutSystemsUI.controller$AddRTLObserver", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AddRTLObserver.ObserverJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AddRTLObserver_ObserverJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.addRTLObserver$Action = function (callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AddRTLObserver$vars"))());
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AddRTLObserver_ObserverJS, "Observer", "AddRTLObserver", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AddRTLObserver$vars", [{
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.addRTLObserver$Action = function (callbackIn) {
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.addRTLObserver$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AddRTLObserver.ObserverJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OSFramework.OSUI.Event.DOMEvents.Observers.GlobalObserverManager.Instance.addHandler(
        OSFramework.OSUI.Event.DOMEvents.Observers.ObserverEvent.RTL,
        $parameters.Callback
    );
    };
    });
    
    define("OutSystemsUI.controller$AnimatedLabelChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AnimatedLabelChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AnimatedLabelChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.animatedLabelChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AnimatedLabelChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AnimatedLabelChangeProperty_ChangePropertyJS, "ChangeProperty", "AnimatedLabelChangeProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AnimatedLabelChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.animatedLabelChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.animatedLabelChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AnimatedLabelChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AnimatedLabelAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$AnimatedLabelCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AnimatedLabelCreate.CreateJS", "OutSystemsUI.model$AnimatedLabel_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AnimatedLabelCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.animatedLabelCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AnimatedLabelCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AnimatedLabelCreate_CreateJS, "Create", "AnimatedLabelCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AnimatedLabelCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.AnimatedLabel_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.AnimatedLabel_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.animatedLabelCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.AnimatedLabel_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.animatedLabelCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AnimatedLabelCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AnimatedLabelAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$AnimatedLabelDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AnimatedLabelDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AnimatedLabelDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.animatedLabelDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AnimatedLabelDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AnimatedLabelDestroy_DestroyJS, "Destroy", "AnimatedLabelDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AnimatedLabelDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.animatedLabelDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.animatedLabelDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AnimatedLabelDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AnimatedLabelAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AnimatedLabelInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AnimatedLabelInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AnimatedLabelInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.animatedLabelInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AnimatedLabelInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AnimatedLabelInitialize_InitializeJS, "Initialize", "AnimatedLabelInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AnimatedLabelInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.animatedLabelInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.animatedLabelInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AnimatedLabelInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AnimatedLabelAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$AnimatedLabelRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AnimatedLabelRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AnimatedLabelRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.animatedLabelRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AnimatedLabelRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_AnimatedLabelRegisterCallback_RegisterCallbackJS, "RegisterCallback", "AnimatedLabelRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AnimatedLabelRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.animatedLabelRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.animatedLabelRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AnimatedLabelRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AnimatedLabelAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$AnimatedLabelUpdateOnRender", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$AnimatedLabelUpdateOnRender.UpdateOnRenderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_AnimatedLabelUpdateOnRender_UpdateOnRenderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.animatedLabelUpdateOnRender$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.AnimatedLabelUpdateOnRender$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will check if the label must be active or not.
    controller.safeExecuteJSNode(OutSystemsUI_controller_AnimatedLabelUpdateOnRender_UpdateOnRenderJS, "UpdateOnRender", "AnimatedLabelUpdateOnRender", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.AnimatedLabelUpdateOnRender$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.animatedLabelUpdateOnRender$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.animatedLabelUpdateOnRender$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$AnimatedLabelUpdateOnRender.UpdateOnRenderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.AnimatedLabelAPI.UpdateOnRender($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$BinaryToURLImage", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BinaryToURLImage.JsBinaryToBase64JS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BinaryToURLImage_JsBinaryToBase64JS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.binaryToURLImage$Action = function (imageIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BinaryToURLImage$vars"))());
    vars.value.imageInLocal = imageIn;
    var jsBinaryToBase64JSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BinaryToURLImage$outVars"))());
    // Script to convert base64 into binary data.
    jsBinaryToBase64JSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_BinaryToURLImage_JsBinaryToBase64JS, "JsBinaryToBase64", "BinaryToURLImage", {
    Binary: OS.DataConversion.JSNodeParamConverter.to(vars.value.imageInLocal, OS.Types.BinaryData),
    Base64: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.BinaryToURLImage$jsBinaryToBase64JSResult"))();
    jsNodeResult.base64Out = OS.DataConversion.JSNodeParamConverter.from($parameters.Base64, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Set Image URL
    // URL = "data:image/gif;base64," + JsBinaryToBase64.Base64
    outVars.value.uRLOut = ("data:image/gif;base64," + jsBinaryToBase64JSResult.value.base64Out);
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BinaryToURLImage$vars", [{
    name: "Image",
    attrName: "imageInLocal",
    mandatory: true,
    dataType: OS.Types.BinaryData,
    defaultValue: function () {
    return OS.DataTypes.BinaryData.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BinaryToURLImage$jsBinaryToBase64JSResult", [{
    name: "Base64",
    attrName: "base64Out",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BinaryToURLImage$outVars", [{
    name: "URL",
    attrName: "uRLOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.binaryToURLImage$Action = function (imageIn) {
    imageIn = (imageIn === undefined) ? OS.DataTypes.BinaryData.defaultValue : imageIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.binaryToURLImage$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(imageIn, OS.Types.BinaryData)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    URL: OS.DataConversion.JSNodeParamConverter.to(actionResults.uRLOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$BinaryToURLImage.JsBinaryToBase64JS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Base64 = $parameters.Binary;
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetChangeBooleanProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetChangeBooleanProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetChangeBooleanProp_ChangeTextPropertyJS, "ChangeTextProperty", "BottomSheetChangeBooleanProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetChangeBooleanProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "BottomSheetChangeExtendedClass", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "BottomSheetChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetClose.CloseJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetClose_CloseJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetClose$outVars"))());
    closeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetClose_CloseJS, "Close", "BottomSheetClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetClose$closeJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetClose$closeJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetClose.CloseJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.BottomSheetAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetCreate_CreateJS, "Create", "BottomSheetCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetDestroy_DestroyJS, "Destroy", "BottomSheetDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetInitialize_InitializeJS, "Initialize", "BottomSheetInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetOpen.OpenJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetOpen_OpenJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetOpen$outVars"))());
    openJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetOpen_OpenJS, "Open", "BottomSheetOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetOpen$openJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetOpen$openJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetOpen.OpenJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.BottomSheetAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$BottomSheetRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$BottomSheetRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_BottomSheetRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.bottomSheetRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.BottomSheetRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_BottomSheetRegisterCallback_RegisterCallbackJS, "RegisterCallback", "BottomSheetRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.BottomSheetRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.bottomSheetRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.bottomSheetRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$BottomSheetRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.BottomSheetAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$ButtonLoadingChangeBooleanProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ButtonLoadingChangeBooleanProperty.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ButtonLoadingChangeBooleanProperty_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.buttonLoadingChangeBooleanProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ButtonLoadingChangeBooleanProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ButtonLoadingChangeBooleanProperty_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "ButtonLoadingChangeBooleanProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ButtonLoadingChangeBooleanProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.buttonLoadingChangeBooleanProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.buttonLoadingChangeBooleanProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ButtonLoadingChangeBooleanProperty.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ButtonLoadingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$ButtonLoadingChangeTextProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ButtonLoadingChangeTextProperty.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ButtonLoadingChangeTextProperty_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.buttonLoadingChangeTextProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ButtonLoadingChangeTextProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ButtonLoadingChangeTextProperty_ChangeTextPropertyJS, "ChangeTextProperty", "ButtonLoadingChangeTextProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ButtonLoadingChangeTextProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.buttonLoadingChangeTextProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.buttonLoadingChangeTextProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ButtonLoadingChangeTextProperty.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ButtonLoadingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$ButtonLoadingCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ButtonLoadingCreate.CreateJS", "OutSystemsUI.model$ButtonLoading_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ButtonLoadingCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.buttonLoadingCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ButtonLoadingCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_ButtonLoadingCreate_CreateJS, "Create", "ButtonLoadingCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ButtonLoadingCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ButtonLoading_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.ButtonLoading_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.buttonLoadingCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.ButtonLoading_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.buttonLoadingCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ButtonLoadingCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ButtonLoadingAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$ButtonLoadingDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ButtonLoadingDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ButtonLoadingDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.buttonLoadingDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ButtonLoadingDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ButtonLoadingDestroy_DestroyJS, "Destroy", "ButtonLoadingDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ButtonLoadingDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.buttonLoadingDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.buttonLoadingDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ButtonLoadingDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ButtonLoadingAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$ButtonLoadingInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ButtonLoadingInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ButtonLoadingInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.buttonLoadingInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ButtonLoadingInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_ButtonLoadingInitialize_InitializeJS, "Initialize", "ButtonLoadingInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ButtonLoadingInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.buttonLoadingInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.buttonLoadingInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ButtonLoadingInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ButtonLoadingAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$ButtonLoadingRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ButtonLoadingRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ButtonLoadingRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.buttonLoadingRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ButtonLoadingRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ButtonLoadingRegisterCallback_RegisterCallbackJS, "RegisterCallback", "ButtonLoadingRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ButtonLoadingRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.buttonLoadingRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.buttonLoadingRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ButtonLoadingRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ButtonLoadingAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$CarouselChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselChangeBooleanProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselChangeBooleanProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselChangeBooleanProp_ChangeTextPropertyJS, "ChangeTextProperty", "CarouselChangeBooleanProp", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselChangeBooleanProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$CarouselChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "CarouselChangeExtendedClass", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$CarouselChangeIntegerProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselChangeIntegerProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselChangeIntegerProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselChangeIntegerProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselChangeIntegerProp_ChangeTextPropertyJS, "ChangeTextProperty", "CarouselChangeIntegerProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Integer),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselChangeIntegerProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? 0 : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselChangeIntegerProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselChangeIntegerProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$CarouselChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "CarouselChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$CarouselCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselCreate.CreateCarouselJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselCreate_CreateCarouselJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselCreate$Action = function (uniqueIdIn, internalConfigsIn, providerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    vars.value.providerInLocal = providerIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselCreate_CreateCarouselJS, "CreateCarousel", "CarouselCreate", {
    Provider: OS.DataConversion.JSNodeParamConverter.to(vars.value.providerInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Provider",
    attrName: "providerInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselCreate$Action = function (uniqueIdIn, internalConfigsIn, providerIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    providerIn = (providerIn === undefined) ? "" : providerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text), providerIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselCreate.CreateCarouselJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.Create($parameters.UniqueId, $parameters.Configs, $parameters.Provider);
    };
    });
    
    define("OutSystemsUI.controller$CarouselDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselDestroy_DestroyJS, "Destroy", "CarouselDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$CarouselDisableOnRender", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselDisableOnRender.CarouselDisableOnRenderJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselDisableOnRender_CarouselDisableOnRenderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselDisableOnRender$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselDisableOnRender$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var carouselDisableOnRenderJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselDisableOnRender$outVars"))());
    carouselDisableOnRenderJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselDisableOnRender_CarouselDisableOnRenderJS, "CarouselDisableOnRender", "CarouselDisableOnRender", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselDisableOnRender$carouselDisableOnRenderJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselDisableOnRenderJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselDisableOnRender$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselDisableOnRender$carouselDisableOnRenderJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselDisableOnRender$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselDisableOnRender$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselDisableOnRender$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$CarouselDisableOnRender.CarouselDisableOnRenderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.CarouselDisableOnRender($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$CarouselEnableOnRender", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselEnableOnRender.CarouselEnableOnRenderJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselEnableOnRender_CarouselEnableOnRenderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselEnableOnRender$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselEnableOnRender$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var carouselEnableOnRenderJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselEnableOnRender$outVars"))());
    carouselEnableOnRenderJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselEnableOnRender_CarouselEnableOnRenderJS, "CarouselEnableOnRender", "CarouselEnableOnRender", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselEnableOnRender$carouselEnableOnRenderJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselEnableOnRenderJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselEnableOnRender$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselEnableOnRender$carouselEnableOnRenderJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselEnableOnRender$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselEnableOnRender$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselEnableOnRender$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$CarouselEnableOnRender.CarouselEnableOnRenderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.CarouselEnableOnRender($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$CarouselGoTo", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselGoTo.CarouselGoToJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselGoTo_CarouselGoToJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselGoTo$Action = function (widgetIdIn, itemIndexIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselGoTo$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.itemIndexInLocal = itemIndexIn;
    var carouselGoToJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselGoTo$outVars"))());
    carouselGoToJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselGoTo_CarouselGoToJS, "CarouselGoTo", "CarouselGoTo", {
    Index: OS.DataConversion.JSNodeParamConverter.to(vars.value.itemIndexInLocal, OS.Types.Integer),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselGoTo$carouselGoToJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselGoToJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselGoTo$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ItemIndex",
    attrName: "itemIndexInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselGoTo$carouselGoToJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselGoTo$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselGoTo$Action = function (widgetIdIn, itemIndexIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    itemIndexIn = (itemIndexIn === undefined) ? 0 : itemIndexIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselGoTo$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(itemIndexIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$CarouselGoTo.CarouselGoToJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.GoTo($parameters.UniqueId, $parameters.Index);
    };
    });
    
    define("OutSystemsUI.controller$CarouselInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselInitialize.InitializeCarouselJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselInitialize_InitializeCarouselJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselInitialize_InitializeCarouselJS, "InitializeCarousel", "CarouselInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselInitialize.InitializeCarouselJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$CarouselNext", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselNext.CarouselNextJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselNext_CarouselNextJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselNext$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselNext$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var carouselNextJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselNext$outVars"))());
    carouselNextJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselNext_CarouselNextJS, "CarouselNext", "CarouselNext", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselNext$carouselNextJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselNextJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselNext$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselNext$carouselNextJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselNext$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselNext$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselNext$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$CarouselNext.CarouselNextJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.Next($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$CarouselPrevious", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselPrevious.CarouselPreviousJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselPrevious_CarouselPreviousJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselPrevious$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselPrevious$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var carouselPreviousJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselPrevious$outVars"))());
    carouselPreviousJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselPrevious_CarouselPreviousJS, "CarouselPrevious", "CarouselPrevious", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselPrevious$carouselPreviousJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselPreviousJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselPrevious$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselPrevious$carouselPreviousJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselPrevious$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselPrevious$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselPrevious$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$CarouselPrevious.CarouselPreviousJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.Previous($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$CarouselRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselRegisterCallback_RegisterCallbackJS, "RegisterCallback", "CarouselRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$CarouselToggleDrag", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselToggleDrag.CarouselToggleDragJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselToggleDrag_CarouselToggleDragJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselToggleDrag$Action = function (widgetIdIn, hasDragIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselToggleDrag$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.hasDragInLocal = hasDragIn;
    var carouselToggleDragJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselToggleDrag$outVars"))());
    carouselToggleDragJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselToggleDrag_CarouselToggleDragJS, "CarouselToggleDrag", "CarouselToggleDrag", {
    HasDrag: OS.DataConversion.JSNodeParamConverter.to(vars.value.hasDragInLocal, OS.Types.Boolean),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselToggleDrag$carouselToggleDragJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselToggleDragJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselToggleDrag$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "HasDrag",
    attrName: "hasDragInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselToggleDrag$carouselToggleDragJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselToggleDrag$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselToggleDrag$Action = function (widgetIdIn, hasDragIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    hasDragIn = (hasDragIn === undefined) ? false : hasDragIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselToggleDrag$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(hasDragIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$CarouselToggleDrag.CarouselToggleDragJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.ToggleDrag($parameters.WidgetId, $parameters.HasDrag);
    };
    });
    
    define("OutSystemsUI.controller$CarouselUpdateOnRender", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CarouselUpdateOnRender.UpdateOnRenderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CarouselUpdateOnRender_UpdateOnRenderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.carouselUpdateOnRender$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CarouselUpdateOnRender$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will check if the label must be active or not.
    controller.safeExecuteJSNode(OutSystemsUI_controller_CarouselUpdateOnRender_UpdateOnRenderJS, "UpdateOnRender", "CarouselUpdateOnRender", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CarouselUpdateOnRender$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.carouselUpdateOnRender$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.carouselUpdateOnRender$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$CarouselUpdateOnRender.UpdateOnRenderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.CarouselAPI.UpdateOnRender($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$CheckOutSystemsUIScript", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$CheckOutSystemsUIScript.CheckOSUIScriptJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_CheckOutSystemsUIScript_CheckOSUIScriptJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.checkOutSystemsUIScript$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOSUIScriptJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.CheckOutSystemsUIScript$outVars"))());
    // Script to check if the OutSystemsUI script is already loaded.
    checkOSUIScriptJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_CheckOutSystemsUIScript_CheckOSUIScriptJS, "CheckOSUIScript", "CheckOutSystemsUIScript", {
    HasScript: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.CheckOutSystemsUIScript$checkOSUIScriptJSResult"))();
    jsNodeResult.hasScriptOut = OS.DataConversion.JSNodeParamConverter.from($parameters.HasScript, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // Set IsLoaded
    // IsLoaded = CheckOSUIScript.HasScript
    outVars.value.isLoadedOut = checkOSUIScriptJSResult.value.hasScriptOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CheckOutSystemsUIScript$checkOSUIScriptJSResult", [{
    name: "HasScript",
    attrName: "hasScriptOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.CheckOutSystemsUIScript$outVars", [{
    name: "IsLoaded",
    attrName: "isLoadedOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.checkOutSystemsUIScript$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.checkOutSystemsUIScript$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsLoaded: OS.DataConversion.JSNodeParamConverter.to(actionResults.isLoadedOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$CheckOutSystemsUIScript.CheckOSUIScriptJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.HasScript = window.OutSystems !== undefined && window.OutSystems.OSUI !== undefined;
    };
    });
    
    define("OutSystemsUI.controller$ConfigureOfflineDataSync", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ConfigureOfflineDataSync.ConfigureOfflineDataSyncJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ConfigureOfflineDataSync_ConfigureOfflineDataSyncJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.configureOfflineDataSync$Action = function (syncOnOnlineIn, syncOnResumeIn, retryOnErrorIn, retryIntervalInSecondsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ConfigureOfflineDataSync$vars"))());
    vars.value.syncOnOnlineInLocal = syncOnOnlineIn;
    vars.value.syncOnResumeInLocal = syncOnResumeIn;
    vars.value.retryOnErrorInLocal = retryOnErrorIn;
    vars.value.retryIntervalInSecondsInLocal = retryIntervalInSecondsIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ConfigureOfflineDataSync_ConfigureOfflineDataSyncJS, "ConfigureOfflineDataSync", "ConfigureOfflineDataSync", {
    SyncOnResume: OS.DataConversion.JSNodeParamConverter.to(vars.value.syncOnResumeInLocal, OS.Types.Boolean),
    RetryIntervalInSeconds: OS.DataConversion.JSNodeParamConverter.to(vars.value.retryIntervalInSecondsInLocal, OS.Types.Integer),
    SyncOnOnline: OS.DataConversion.JSNodeParamConverter.to(vars.value.syncOnOnlineInLocal, OS.Types.Boolean),
    RetryOnError: OS.DataConversion.JSNodeParamConverter.to(vars.value.retryOnErrorInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ConfigureOfflineDataSync$vars", [{
    name: "SyncOnOnline",
    attrName: "syncOnOnlineInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "SyncOnResume",
    attrName: "syncOnResumeInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "RetryOnError",
    attrName: "retryOnErrorInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "RetryIntervalInSeconds",
    attrName: "retryIntervalInSecondsInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.configureOfflineDataSync$Action = function (syncOnOnlineIn, syncOnResumeIn, retryOnErrorIn, retryIntervalInSecondsIn) {
    syncOnOnlineIn = (syncOnOnlineIn === undefined) ? false : syncOnOnlineIn;
    syncOnResumeIn = (syncOnResumeIn === undefined) ? false : syncOnResumeIn;
    retryOnErrorIn = (retryOnErrorIn === undefined) ? false : retryOnErrorIn;
    retryIntervalInSecondsIn = (retryIntervalInSecondsIn === undefined) ? 0 : retryIntervalInSecondsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.configureOfflineDataSync$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(syncOnOnlineIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(syncOnResumeIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(retryOnErrorIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(retryIntervalInSecondsIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ConfigureOfflineDataSync.ConfigureOfflineDataSyncJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    window.offlineDataSync.configure(
        $parameters.SyncOnOnline,
        $parameters.SyncOnResume,
        $parameters.RetryOnError,
        $parameters.RetryIntervalInSeconds);
    
    };
    });
    
    define("OutSystemsUI.controller$DatePickerChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerChangeBooleanProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerChangeBooleanProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerChangeBooleanProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "DatePickerChangeBooleanProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerChangeBooleanProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DatePickerChangeDateTimeProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerChangeDateTimeProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerChangeDateTimeProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerChangeDateTimeProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerChangeDateTimeProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerChangeDateTimeProp_ChangeTextPropertyJS, "ChangeTextProperty", "DatePickerChangeDateTimeProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.DateTime),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerChangeDateTimeProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.DateTime,
    defaultValue: function () {
    return OS.DataTypes.DateTime.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerChangeDateTimeProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.DateTime.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerChangeDateTimeProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.DateTime)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerChangeDateTimeProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DatePickerChangeIntegerProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerChangeIntegerProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerChangeIntegerProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerChangeIntegerProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerChangeIntegerProp_ChangeTextPropertyJS, "ChangeTextProperty", "DatePickerChangeIntegerProp", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.LongInteger),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerChangeIntegerProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.LongInteger,
    defaultValue: function () {
    return OS.DataTypes.LongInteger.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerChangeIntegerProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerChangeIntegerProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DatePickerChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "DatePickerChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DatePickerClear", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerClear.ClearDatepickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerClear_ClearDatepickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerClear$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerClear$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var clearDatepickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerClear$outVars"))());
    // Trigger the API method that will clear the datepicker.
    clearDatepickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerClear_ClearDatepickerJS, "ClearDatepicker", "DatePickerClear", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerClear$clearDatepickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(clearDatepickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerClear$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerClear$clearDatepickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerClear$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerClear$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerClear$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerClear.ClearDatepickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.Clear($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerClose.CloseDatepickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerClose_CloseDatepickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeDatepickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerClose$outVars"))());
    // Trigger the API method that will close the datepicker.
    closeDatepickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerClose_CloseDatepickerJS, "CloseDatepicker", "DatePickerClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerClose$closeDatepickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeDatepickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerClose$closeDatepickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerClose.CloseDatepickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerCreate.CreateDatePickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerCreate_CreateDatePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerCreate$Action = function (uniqueIdIn, internalConfigsIn, modeIn, providerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    vars.value.modeInLocal = modeIn;
    vars.value.providerInLocal = providerIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerCreate_CreateDatePickerJS, "CreateDatePicker", "DatePickerCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    Mode: OS.DataConversion.JSNodeParamConverter.to(vars.value.modeInLocal, OS.Types.Text),
    Provider: OS.DataConversion.JSNodeParamConverter.to(vars.value.providerInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Mode",
    attrName: "modeInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Provider",
    attrName: "providerInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerCreate$Action = function (uniqueIdIn, internalConfigsIn, modeIn, providerIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    modeIn = (modeIn === undefined) ? "" : modeIn;
    providerIn = (providerIn === undefined) ? "" : providerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text), modeIn, providerIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerCreate.CreateDatePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.Create($parameters.UniqueId, $parameters.Configs, $parameters.Mode, $parameters.Provider);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerDestroy.DestroyDatePickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerDestroy_DestroyDatePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerDestroy_DestroyDatePickerJS, "DestroyDatePicker", "DatePickerDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerDestroy.DestroyDatePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerDisableDays", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerDisableDays.DisableDaysJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerDisableDays_DisableDaysJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerDisableDays$Action = function (widgetIdIn, disabledDaysIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDisableDays$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.disabledDaysInLocal = disabledDaysIn.clone();
    var disableDaysJSResult = new OS.DataTypes.VariableHolder();
    var jSONSerializeDisableDaysVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDisableDays$outVars"))());
    // JSON Serialize: JSONSerializeDisableDays
    jSONSerializeDisableDaysVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.disabledDaysInLocal, true, false, OS.Types.Date);
    // Trigger the API method that will disable days the datepicker.
    disableDaysJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerDisableDays_DisableDaysJS, "DisableDays", "DatePickerDisableDays", {
    DisabledWeekDays: OS.DataConversion.JSNodeParamConverter.to(jSONSerializeDisableDaysVar.value.jSONOut, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDisableDays$disableDaysJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(disableDaysJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDisableDays$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "DisabledDays",
    attrName: "disabledDaysInLocal",
    mandatory: true,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OS.DataTypes.DateList();
    },
    complexType: OS.DataTypes.DateList
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDisableDays$disableDaysJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDisableDays$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerDisableDays$Action = function (widgetIdIn, disabledDaysIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    disabledDaysIn = (disabledDaysIn === undefined) ? new OS.DataTypes.DateList() : disabledDaysIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerDisableDays$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), disabledDaysIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerDisableDays.DisableDaysJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.DisableDays(
        $parameters.WidgetId,
        JSON.parse($parameters.DisabledWeekDays)
    );
    };
    });
    
    define("OutSystemsUI.controller$DatePickerDisableWeekDays", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerDisableWeekDays.DisableWeekDaysJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerDisableWeekDays_DisableWeekDaysJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerDisableWeekDays$Action = function (widgetIdIn, disableMondaysIn, disableTuesdaysIn, disableWednesdaysIn, disableThursdaysIn, disableFridaysIn, disableSaturdaysIn, disableSundaysIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDisableWeekDays$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.disableMondaysInLocal = disableMondaysIn;
    vars.value.disableTuesdaysInLocal = disableTuesdaysIn;
    vars.value.disableWednesdaysInLocal = disableWednesdaysIn;
    vars.value.disableThursdaysInLocal = disableThursdaysIn;
    vars.value.disableFridaysInLocal = disableFridaysIn;
    vars.value.disableSaturdaysInLocal = disableSaturdaysIn;
    vars.value.disableSundaysInLocal = disableSundaysIn;
    var disableWeekDaysJSResult = new OS.DataTypes.VariableHolder();
    var jSONSerializeDisableWeekDaysVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDisableWeekDays$outVars"))());
    // Execute Action: ListClear
    OS.SystemActions.listClear(vars.value.disabledWeekDaysListVar, callContext);
    if((vars.value.disableMondaysInLocal)) {
    // Execute Action: AppendMonday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.monday, callContext);
    }
    
    if((vars.value.disableTuesdaysInLocal)) {
    // Execute Action: AppendTuesday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.tuesday, callContext);
    }
    
    if((vars.value.disableWednesdaysInLocal)) {
    // Execute Action: AppendWednesday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.wednesday, callContext);
    }
    
    if((vars.value.disableThursdaysInLocal)) {
    // Execute Action: AppendThursday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.thursday, callContext);
    }
    
    if((vars.value.disableFridaysInLocal)) {
    // Execute Action: AppendFriday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.friday, callContext);
    }
    
    if((vars.value.disableSaturdaysInLocal)) {
    // Execute Action: AppendSaturday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.saturday, callContext);
    }
    
    if((vars.value.disableSundaysInLocal)) {
    // Execute Action: AppendSunday
    OS.SystemActions.listAppend(vars.value.disabledWeekDaysListVar, OutSystemsUIModel.staticEntities.datePickerWeekDay.sunday, callContext);
    }
    
    // JSON Serialize: JSONSerializeDisableWeekDays
    jSONSerializeDisableWeekDaysVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.disabledWeekDaysListVar, true, false, OS.Types.Integer);
    // Trigger the API method that will disable weekdays the datepicker.
    disableWeekDaysJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerDisableWeekDays_DisableWeekDaysJS, "DisableWeekDays", "DatePickerDisableWeekDays", {
    DisabledWeekDays: OS.DataConversion.JSNodeParamConverter.to(jSONSerializeDisableWeekDaysVar.value.jSONOut, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerDisableWeekDays$disableWeekDaysJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(disableWeekDaysJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDisableWeekDays$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "DisableMondays",
    attrName: "disableMondaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisableTuesdays",
    attrName: "disableTuesdaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisableWednesdays",
    attrName: "disableWednesdaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisableThursdays",
    attrName: "disableThursdaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisableFridays",
    attrName: "disableFridaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisableSaturdays",
    attrName: "disableSaturdaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisableSundays",
    attrName: "disableSundaysInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "DisabledWeekDaysList",
    attrName: "disabledWeekDaysListVar",
    mandatory: false,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OS.DataTypes.IntegerList();
    },
    complexType: OS.DataTypes.IntegerList
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDisableWeekDays$disableWeekDaysJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerDisableWeekDays$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerDisableWeekDays$Action = function (widgetIdIn, disableMondaysIn, disableTuesdaysIn, disableWednesdaysIn, disableThursdaysIn, disableFridaysIn, disableSaturdaysIn, disableSundaysIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    disableMondaysIn = (disableMondaysIn === undefined) ? false : disableMondaysIn;
    disableTuesdaysIn = (disableTuesdaysIn === undefined) ? false : disableTuesdaysIn;
    disableWednesdaysIn = (disableWednesdaysIn === undefined) ? false : disableWednesdaysIn;
    disableThursdaysIn = (disableThursdaysIn === undefined) ? false : disableThursdaysIn;
    disableFridaysIn = (disableFridaysIn === undefined) ? false : disableFridaysIn;
    disableSaturdaysIn = (disableSaturdaysIn === undefined) ? false : disableSaturdaysIn;
    disableSundaysIn = (disableSundaysIn === undefined) ? false : disableSundaysIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerDisableWeekDays$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(disableMondaysIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(disableTuesdaysIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(disableWednesdaysIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(disableThursdaysIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(disableFridaysIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(disableSaturdaysIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(disableSundaysIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerDisableWeekDays.DisableWeekDaysJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.DisableWeekDays(
        $parameters.WidgetId,
        JSON.parse($parameters.DisabledWeekDays)
    );
    };
    });
    
    define("OutSystemsUI.controller$DatePickerInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerInitialize.InitializeDatePickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerInitialize_InitializeDatePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerInitialize_InitializeDatePickerJS, "InitializeDatePicker", "DatePickerInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerInitialize.InitializeDatePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerOpen.OpenDatepickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerOpen_OpenDatepickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openDatepickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerOpen$outVars"))());
    // Trigger the API method that will open the datepicker.
    openDatepickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerOpen_OpenDatepickerJS, "OpenDatepicker", "DatePickerOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerOpen$openDatepickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openDatepickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerOpen$openDatepickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerOpen.OpenDatepickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerRangeUpdateDates", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerRangeUpdateDates.UpdateInitialDateJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerRangeUpdateDates_UpdateInitialDateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerRangeUpdateDates$Action = function (widgetIdIn, newStartDateIn, newEndDateIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerRangeUpdateDates$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.newStartDateInLocal = newStartDateIn;
    vars.value.newEndDateInLocal = newEndDateIn;
    var updateInitialDateJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerRangeUpdateDates$outVars"))());
    // Trigger the API method that will open the datepicker.
    updateInitialDateJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerRangeUpdateDates_UpdateInitialDateJS, "UpdateInitialDate", "DatePickerRangeUpdateDates", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Date1: OS.DataConversion.JSNodeParamConverter.to(vars.value.newStartDateInLocal, OS.Types.DateTime),
    Date2: OS.DataConversion.JSNodeParamConverter.to(vars.value.newEndDateInLocal, OS.Types.DateTime),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerRangeUpdateDates$updateInitialDateJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updateInitialDateJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerRangeUpdateDates$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "NewStartDate",
    attrName: "newStartDateInLocal",
    mandatory: true,
    dataType: OS.Types.DateTime,
    defaultValue: function () {
    return OS.DataTypes.DateTime.defaultValue;
    }
    }, {
    name: "NewEndDate",
    attrName: "newEndDateInLocal",
    mandatory: false,
    dataType: OS.Types.DateTime,
    defaultValue: function () {
    return OS.DataTypes.DateTime.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerRangeUpdateDates$updateInitialDateJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerRangeUpdateDates$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerRangeUpdateDates$Action = function (widgetIdIn, newStartDateIn, newEndDateIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    newStartDateIn = (newStartDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : newStartDateIn;
    newEndDateIn = (newEndDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : newEndDateIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerRangeUpdateDates$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(newStartDateIn, OS.Types.DateTime), OS.DataConversion.JSNodeParamConverter.from(newEndDateIn, OS.Types.DateTime)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerRangeUpdateDates.UpdateInitialDateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.UpdateInitialDate($parameters.WidgetId, $parameters.Date1, $parameters.Date2);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerRegisterCallback_RegisterCallbackJS, "RegisterCallback", "DatePickerRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DatePickerAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerSetEditableInput", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerSetEditableInput.SetEditableInputJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerSetEditableInput_SetEditableInputJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerSetEditableInput$Action = function (widgetIdIn, isEditableInputIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerSetEditableInput$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isEditableInputInLocal = isEditableInputIn;
    var setEditableInputJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerSetEditableInput$outVars"))());
    // Trigger the API method that will enable the end-user to write on the DatePicker input.
    //
    setEditableInputJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerSetEditableInput_SetEditableInputJS, "SetEditableInput", "DatePickerSetEditableInput", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    IsEditableInput: OS.DataConversion.JSNodeParamConverter.to(vars.value.isEditableInputInLocal, OS.Types.Boolean),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerSetEditableInput$setEditableInputJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setEditableInputJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerSetEditableInput$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsEditableInput",
    attrName: "isEditableInputInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerSetEditableInput$setEditableInputJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerSetEditableInput$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerSetEditableInput$Action = function (widgetIdIn, isEditableInputIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isEditableInputIn = (isEditableInputIn === undefined) ? true : isEditableInputIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerSetEditableInput$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isEditableInputIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerSetEditableInput.SetEditableInputJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.SetEditableInput($parameters.UniqueId, $parameters.IsEditableInput);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerSetLanguage", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerSetLanguage.SetDatePickerNewLanguageJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerSetLanguage_SetDatePickerNewLanguageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerSetLanguage$Action = function (widgetIdIn, languageIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerSetLanguage$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.languageInLocal = languageIn;
    var setDatePickerNewLanguageJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerSetLanguage$outVars"))());
    // Trigger the API method that will open the datepicker.
    setDatePickerNewLanguageJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerSetLanguage_SetDatePickerNewLanguageJS, "SetDatePickerNewLanguage", "DatePickerSetLanguage", {
    Lang: OS.DataConversion.JSNodeParamConverter.to(vars.value.languageInLocal, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerSetLanguage$setDatePickerNewLanguageJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setDatePickerNewLanguageJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerSetLanguage$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Language",
    attrName: "languageInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerSetLanguage$setDatePickerNewLanguageJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerSetLanguage$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerSetLanguage$Action = function (widgetIdIn, languageIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    languageIn = (languageIn === undefined) ? "" : languageIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerSetLanguage$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), languageIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerSetLanguage.SetDatePickerNewLanguageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.SetLanguage($parameters.WidgetId, $parameters.Lang);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerToggleNativeBehavior", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerToggleNativeBehavior.ToggleNativeBehaviorJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerToggleNativeBehavior_ToggleNativeBehaviorJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerToggleNativeBehavior$Action = function (widgetIdIn, isNativeIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerToggleNativeBehavior$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isNativeInLocal = isNativeIn;
    var toggleNativeBehaviorJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerToggleNativeBehavior$outVars"))());
    // Trigger the API method that will toggle native on datepicker.
    toggleNativeBehaviorJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerToggleNativeBehavior_ToggleNativeBehaviorJS, "ToggleNativeBehavior", "DatePickerToggleNativeBehavior", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    IsNative: OS.DataConversion.JSNodeParamConverter.to(vars.value.isNativeInLocal, OS.Types.Boolean),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerToggleNativeBehavior$toggleNativeBehaviorJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(toggleNativeBehaviorJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerToggleNativeBehavior$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsNative",
    attrName: "isNativeInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerToggleNativeBehavior$toggleNativeBehaviorJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerToggleNativeBehavior$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerToggleNativeBehavior$Action = function (widgetIdIn, isNativeIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isNativeIn = (isNativeIn === undefined) ? false : isNativeIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerToggleNativeBehavior$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isNativeIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerToggleNativeBehavior.ToggleNativeBehaviorJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.ToggleNativeBehavior($parameters.UniqueId, $parameters.IsNative);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerUpdateDate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerUpdateDate.UpdateInitialDateJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerUpdateDate_UpdateInitialDateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerUpdateDate$Action = function (widgetIdIn, newDateIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerUpdateDate$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.newDateInLocal = newDateIn;
    var updateInitialDateJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerUpdateDate$outVars"))());
    // Trigger the API method that will open the datepicker.
    updateInitialDateJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerUpdateDate_UpdateInitialDateJS, "UpdateInitialDate", "DatePickerUpdateDate", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Date1: OS.DataConversion.JSNodeParamConverter.to(vars.value.newDateInLocal, OS.Types.DateTime),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerUpdateDate$updateInitialDateJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updateInitialDateJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerUpdateDate$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "NewDate",
    attrName: "newDateInLocal",
    mandatory: true,
    dataType: OS.Types.DateTime,
    defaultValue: function () {
    return OS.DataTypes.DateTime.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerUpdateDate$updateInitialDateJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerUpdateDate$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerUpdateDate$Action = function (widgetIdIn, newDateIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    newDateIn = (newDateIn === undefined) ? OS.DataTypes.DateTime.defaultValue : newDateIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerUpdateDate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(newDateIn, OS.Types.DateTime)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerUpdateDate.UpdateInitialDateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.UpdateInitialDate($parameters.WidgetId, $parameters.Date1);
    };
    });
    
    define("OutSystemsUI.controller$DatePickerUpdatePrompt", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DatePickerUpdatePrompt.UpdatePromptMessageJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DatePickerUpdatePrompt_UpdatePromptMessageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.datePickerUpdatePrompt$Action = function (widgetIdIn, promptIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerUpdatePrompt$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.promptInLocal = promptIn;
    var updatePromptMessageJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerUpdatePrompt$outVars"))());
    // Trigger the API method that will open the datepicker.
    updatePromptMessageJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DatePickerUpdatePrompt_UpdatePromptMessageJS, "UpdatePromptMessage", "DatePickerUpdatePrompt", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Prompt: OS.DataConversion.JSNodeParamConverter.to(vars.value.promptInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DatePickerUpdatePrompt$updatePromptMessageJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updatePromptMessageJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerUpdatePrompt$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Prompt",
    attrName: "promptInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerUpdatePrompt$updatePromptMessageJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DatePickerUpdatePrompt$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.datePickerUpdatePrompt$Action = function (widgetIdIn, promptIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    promptIn = (promptIn === undefined) ? "" : promptIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.datePickerUpdatePrompt$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(promptIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DatePickerUpdatePrompt.UpdatePromptMessageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DatePickerAPI.UpdatePrompt($parameters.WidgetId, $parameters.Prompt);
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_AccessibilityConfiguration", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_AccessibilityConfiguration.setConfigJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_AccessibilityConfiguration_setConfigJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_AccessibilityConfiguration$Action = function (showFocusIn, showSkipToContentIn, langIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_AccessibilityConfiguration$vars"))());
    vars.value.showFocusInLocal = showFocusIn;
    vars.value.showSkipToContentInLocal = showSkipToContentIn;
    vars.value.langInLocal = langIn;
    // Action used to configure Accessibility options, live the visibility of the focus otline, the "Skip to content" link and to set the html language.
    //
    //This is present by default on OutSystems UI Layouts.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_AccessibilityConfiguration_setConfigJS, "setConfig", "DEPRECATED_AccessibilityConfiguration", {
    ShowFocus: OS.DataConversion.JSNodeParamConverter.to(vars.value.showFocusInLocal, OS.Types.Boolean),
    Lang: OS.DataConversion.JSNodeParamConverter.to(vars.value.langInLocal, OS.Types.Text),
    ShowSkipToContent: OS.DataConversion.JSNodeParamConverter.to(vars.value.showSkipToContentInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_AccessibilityConfiguration$vars", [{
    name: "ShowFocus",
    attrName: "showFocusInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ShowSkipToContent",
    attrName: "showSkipToContentInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "Lang",
    attrName: "langInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_AccessibilityConfiguration$Action = function (showFocusIn, showSkipToContentIn, langIn) {
    showFocusIn = (showFocusIn === undefined) ? false : showFocusIn;
    showSkipToContentIn = (showSkipToContentIn === undefined) ? false : showSkipToContentIn;
    langIn = (langIn === undefined) ? "" : langIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_AccessibilityConfiguration$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(showFocusIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(showSkipToContentIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(langIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_AccessibilityConfiguration.setConfigJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var elem = document.querySelector('.skip-nav');
    var layout = document.querySelector('.layout');
    
    if(elem) {
        elem.setAttribute('data-showSkipContent', $parameters.ShowSkipToContent);
    }
    
    if(layout && $parameters.ShowFocus) {
        document.body.classList.add('is-focusable');   
        layout.classList.add('has-accessible-features');   
    }
    
    if($parameters.Lang !== "") {
        document.documentElement.setAttribute('lang', $parameters.Lang);
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_CarouselDisableSwipe", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_CarouselDisableSwipe.AddClassNoSwipeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_CarouselDisableSwipe_AddClassNoSwipeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_CarouselDisableSwipe$Action = function (carouselIDIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_CarouselDisableSwipe$vars"))());
    vars.value.carouselIDInLocal = carouselIDIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_CarouselDisableSwipe_AddClassNoSwipeJS, "AddClassNoSwipe", "DEPRECATED_CarouselDisableSwipe", {
    CarouselID: OS.DataConversion.JSNodeParamConverter.to(vars.value.carouselIDInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_CarouselDisableSwipe$vars", [{
    name: "CarouselID",
    attrName: "carouselIDInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_CarouselDisableSwipe$Action = function (carouselIDIn) {
    carouselIDIn = (carouselIDIn === undefined) ? "" : carouselIDIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_CarouselDisableSwipe$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(carouselIDIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_CarouselDisableSwipe.AddClassNoSwipeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var elem = document.getElementById($parameters.CarouselID).querySelector('.carousel');
    
    if(elem) {
        elem.classList.add('no-swipe');
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_CarouselGoTo", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_CarouselGoTo.CallGoToActionJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_CarouselGoTo_CallGoToActionJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_CarouselGoTo$Action = function (widgetIdIn, targetIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_CarouselGoTo$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.targetInLocal = targetIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_CarouselGoTo_CallGoToActionJS, "CallGoToAction", "DEPRECATED_CarouselGoTo", {
    Target: OS.DataConversion.JSNodeParamConverter.to(vars.value.targetInLocal, OS.Types.Integer),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_CarouselGoTo$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Target",
    attrName: "targetInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_CarouselGoTo$Action = function (widgetIdIn, targetIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    targetIn = (targetIn === undefined) ? 0 : targetIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_CarouselGoTo$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(targetIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_CarouselGoTo.CallGoToActionJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element = document.getElementById($parameters.WidgetId).querySelector('.carousel-container-content').goto($parameters.Target);
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_CarouselNext", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_CarouselNext.CallNextActionJS", "OutSystemsUI.controller$IsRTL"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_CarouselNext_CallNextActionJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_CarouselNext$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_CarouselNext$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_CarouselNext_CallNextActionJS, "CallNextAction", "DEPRECATED_CarouselNext", {
    IsRTL: OS.DataConversion.JSNodeParamConverter.to(OutSystemsUIController.default.isRTL$Action(callContext).isRTLOut, OS.Types.Boolean),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_CarouselNext$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_CarouselNext$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_CarouselNext$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_CarouselNext.CallNextActionJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element;
    if($parameters.IsRTL){
        element = document.getElementById($parameters.WidgetId).querySelector('.carousel-container-content').previous();
    } else{
        element = document.getElementById($parameters.WidgetId).querySelector('.carousel-container-content').next();
    }
    
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_CarouselPrevious", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_CarouselPrevious.CallPreviousActionJS", "OutSystemsUI.controller$IsRTL"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_CarouselPrevious_CallPreviousActionJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_CarouselPrevious$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_CarouselPrevious$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_CarouselPrevious_CallPreviousActionJS, "CallPreviousAction", "DEPRECATED_CarouselPrevious", {
    IsRTL: OS.DataConversion.JSNodeParamConverter.to(OutSystemsUIController.default.isRTL$Action(callContext).isRTLOut, OS.Types.Boolean),
    IdCarousel: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_CarouselPrevious$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_CarouselPrevious$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_CarouselPrevious$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_CarouselPrevious.CallPreviousActionJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element;
    
    if($parameters.IsRTL){
        element = document.getElementById($parameters.IdCarousel).querySelector('.carousel-container-content').next();
    } else{
        element = document.getElementById($parameters.IdCarousel).querySelector('.carousel-container-content').previous();
    }
    
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_CarouselUpdate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_CarouselUpdate.CallUpdateActionJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_CarouselUpdate_CallUpdateActionJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_CarouselUpdate$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_CarouselUpdate$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_CarouselUpdate_CallUpdateActionJS, "CallUpdateAction", "DEPRECATED_CarouselUpdate", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_CarouselUpdate$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_CarouselUpdate$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_CarouselUpdate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_CarouselUpdate.CallUpdateActionJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element = document.getElementById($parameters.WidgetId).querySelector('.carousel-container-content').updateCarousel();
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_DatePickerClearInputDate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_DatePickerClearInputDate.ClearDateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_DatePickerClearInputDate_ClearDateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_DatePickerClearInputDate$Action = function (inputIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_DatePickerClearInputDate$vars"))());
    vars.value.inputIdInLocal = inputIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_DatePickerClearInputDate_ClearDateJS, "ClearDate", "DEPRECATED_DatePickerClearInputDate", {
    widgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.inputIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_DatePickerClearInputDate$vars", [{
    name: "InputId",
    attrName: "inputIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_DatePickerClearInputDate$Action = function (inputIdIn) {
    inputIdIn = (inputIdIn === undefined) ? "" : inputIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_DatePickerClearInputDate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(inputIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_DatePickerClearInputDate.ClearDateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var widget = document.getElementById($parameters.widgetId);
    
    if(widget) {
        try {
            widget.clearDate();
        } catch (e) {
            console.warn('The action ClearDatePickerInput only works when bounding a DatePicker to an input widget');
        }
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_DatepickerExposeTranslations", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.model$TextTextTextTextTextWeekday1Weekday2Weekday3Weekday4Weekday5Weekday6Weekday7RecordListWeekdayShort1WeekdayShort2WeekRecordList", "OutSystemsUI.model$TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextShortcutsDialog1ShortcutsDialog2RecordList"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_DatepickerExposeTranslations$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_DatepickerExposeTranslations$outVars"))());
    // i18n Defaults Translations
    // i18nDefaults.Current.PreviousMonth = "Previous Month"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).previousMonthAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("1fCvKiR860iF8y93wqzElg#Value.1784051735.1", "Previous Month");
    // i18nDefaults.Current.NextMonth = "Next Month"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).nextMonthAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("FRQkwo9Yp0iVKYmvglli4w#Value.-766743789.1", "Next Month");
    // i18nDefaults.Current.TodayButton = "Today"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).todayButtonAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("c93RG+ceD0WdMhhBlgm7sA#Value.80981793.1", "Today");
    // i18nDefaults.Current.Midnight = "Midnight"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).midnightAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("tI9n5r_Dx0iO64Cd0TsZQg#Value.-1576218896.1", "Midnight");
    // i18nDefaults.Current.Noon = "Noon"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).noonAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("7JkNQfmve0ybQuEBCcmHfw#Value.2433920.1", "Noon");
    // i18nDefaults.Current.Months.Current.Month1 = "January"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month1Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("Elw2vXw960izxzIMvM1qpA#Value.-162006966.1", "January");
    // i18nDefaults.Current.Months.Current.Month2 = "February"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month2Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("4BHq85s+VE+IylptE9ZukQ#Value.-199248958.1", "February");
    // i18nDefaults.Current.Months.Current.Month3 = "March"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month3Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("mbDBy4VjB0SzzkLzOXUdFg#Value.74113571.1", "March");
    // i18nDefaults.Current.Months.Current.Month4 = "April"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month4Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("jNVk7nRwUkKdBhDRLgvUag#Value.63478374.1", "April");
    // i18nDefaults.Current.Months.Current.Month5 = "May"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month5Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("Ew9YPH2yzEGI5SqyvW_2sQ#Value.77125.1", "May");
    // i18nDefaults.Current.Months.Current.Month6 = "June"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month6Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("q6eCYPoiPE6Z8gtzavUUWg#Value.2320482.1", "June");
    // i18nDefaults.Current.Months.Current.Month7 = "July"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month7Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("OG7OPs09EEmIHvBtd09u5Q#Value.2320440.1", "July");
    // i18nDefaults.Current.Months.Current.Month8 = "August"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month8Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("ZIkkytkF00C62bRH6ZRMcA#Value.1972131363.1", "August");
    // i18nDefaults.Current.Months.Current.Month9 = "September"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month9Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("nX8TB7S5xkW2vLpNGzji6A#Value.-25881423.1", "September");
    // i18nDefaults.Current.Months.Current.Month10 = "October"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month10Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("9LIV9yDE20eRBuqb7_MUNQ#Value.43165376.1", "October");
    // i18nDefaults.Current.Months.Current.Month11 = "November"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month11Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("duL0nCW7+0uMBTLcjoL7Xg#Value.1703773522.1", "November");
    // i18nDefaults.Current.Months.Current.Month12 = "December"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).monthsAttr.getCurrent(callContext.iterationContext).month12Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("mSVpIhn5x0WuqHFplsMTFw#Value.626483269.1", "December");
    // i18nDefaults.Current.Weekdays.Current.Weekday1 = "Sunday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday1Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("PP+e0FO51k2OuDR1+EhorQ#Value.-1807319568.1", "Sunday");
    // i18nDefaults.Current.Weekdays.Current.Weekday2 = "Monday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday2Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("WV8_eD4RTE61GB2a0BkwuQ#Value.-1984635600.1", "Monday");
    // i18nDefaults.Current.Weekdays.Current.Weekday3 = "Tuesday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday3Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("CdvV1OKrjUSoC4jJteUE6A#Value.687309357.1", "Tuesday");
    // i18nDefaults.Current.Weekdays.Current.Weekday4 = "Wednesday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday4Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("2cEIAtVIlES4bU387yYKFA#Value.-897468618.1", "Wednesday");
    // i18nDefaults.Current.Weekdays.Current.Weekday5 = "Thursday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday5Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("rZxYcEOLE0SMy_WUK1USbg#Value.1636699642.1", "Thursday");
    // i18nDefaults.Current.Weekdays.Current.Weekday6 = "Friday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday6Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("PTUebe2ghUGIcIlmoiHGTA#Value.2112549247.1", "Friday");
    // i18nDefaults.Current.Weekdays.Current.Weekday7 = "Saturday"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysAttr.getCurrent(callContext.iterationContext).weekday7Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("fxhdUHdd30WEIUqlUd3Dgg#Value.-2049557543.1", "Saturday");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort1 = "Sun"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort1Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("Q0atH4XnxESfNPKXcNCMhg#Value.83500.1", "Sun");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort2 = "Mon"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort2Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("pWtYDFh+oEGF3oMu1ST3SA#Value.77548.1", "Mon");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort3 = "Tue"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort3Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("TxFtPzJ8eEmwSbWV_8uB3w#Value.84452.1", "Tue");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort4 = "Wed"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort4Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("n_faF_hqU0qU+TQPqypwbg#Value.86838.1", "Wed");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort5 = "Thu"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort5Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("C5ZwndaAOUOl74fkEmefDw#Value.84065.1", "Thu");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort6 = "Fri"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort6Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("7Dxp7GHv9kO9AEdEXQqPGA#Value.70909.1", "Fri");
    // i18nDefaults.Current.WeekdaysShort.Current.WeekdayShort7 = "Sat"
    outVars.value.i18nDefaultsOut.getCurrent(callContext.iterationContext).weekdaysShortAttr.getCurrent(callContext.iterationContext).weekdayShort7Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("wupNrsljn0+ZgKsDAgws7w#Value.82886.1", "Sat");
    // i18n Accessibility Translations
    // i18nAccessibility.Current.IsDisabled = "Disabled. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).isDisabledAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("0JFpmf26qEmLPKk06zPUDg#Value.374566222.1", "Disabled. ");
    // i18nAccessibility.Current.IsToday = "Is Today. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).isTodayAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("iqF5Pqcm+EuQgVmDvcRfXQ#Value.1584999357.1", "Is Today. ");
    // i18nAccessibility.Current.DaySelected = "Day selected. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).daySelectedAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("pXZo0bRIl0KKarFWqwJMoA#Value.997213361.1", "Day selected. ");
    // i18nAccessibility.Current.HasEvent = "Has event. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).hasEventAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("s6Mc6dzsq0O31GbSo7QbpQ#Value.-1258432986.1", "Has event. ");
    // i18nAccessibility.Current.DaysInRange = "Day is in range. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).daysInRangeAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("nmdHfe62kkWmZZi8twrJvg#Value.-1662297402.1", "Day is in range. ");
    // i18nAccessibility.Current.StartRange = "Start range. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).startRangeAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("6yUVQvdC90Gm4KUFQBj81w#Value.1774776785.1", "Start range. ");
    // i18nAccessibility.Current.EndRange = "End range. "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).endRangeAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("Ou2_Lg3vvEe3aQ7GWyGPBQ#Value.979281226.1", "End range. ");
    // i18nAccessibility.Current.Navigation = "navigation"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).navigationAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("q2HVeR5fq06ujvR8mwXC1g#Value.1862666772.1", "navigation");
    // i18nAccessibility.Current.Month = "month"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).monthAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("iKX__y0GCEK4HvMWgzSWjA#Value.104080000.1", "month");
    // i18nAccessibility.Current.Year = "year"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).yearAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("H6apzIN1TUKPQopWFy0zBw#Value.3704893.1", "year");
    // i18nAccessibility.Current.KeyboardShortcuts = "Keyboard shortcuts"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).keyboardShortcutsAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("k2YfRkJbhkWi6MaJmqxhJg#Value.1665633300.1", "Keyboard shortcuts");
    // i18nAccessibility.Current.CalendarDates = "Calendar dates"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).calendarDatesAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("XTzYOcd0uEuBcu+inuc+jg#Value.-2092303549.1", "Calendar dates");
    // i18nAccessibility.Current.DateSelected = "Date selected: "
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).dateSelectedAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("bOB6QpW3y0qaPPNGZE3U9A#Value.-911153517.1", "Date selected: ");
    // i18nAccessibility.Current.Calendar = "Calendar"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).calendarAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("Bra9RrfzZk+b3rOW0R7aWA#Value.-113680546.1", "Calendar");
    // i18nAccessibility.Current.GoToToday = "Go to today"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).goToTodayAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("StrMC+dU8UKyWJfLxq6nJA#Value.-18794124.1", "Go to today");
    // i18nAccessibility.Current.OpenCalendar = "Open. Press Enter to close the Calendar"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).openCalendarAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("1b5_VD14vEWCUSQsUQ8m8g#Value.-464608999.1", "Open. Press Enter to close the Calendar");
    // i18nAccessibility.Current.CloseCalendar = "Closed. Press Enter to open the Calendar"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).closeCalendarAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("hw5vDiQKrESpaaxSlyRHCA#Value.857568417.1", "Closed. Press Enter to open the Calendar");
    // i18nAccessibility.Current.EnterCalendar = "Press Tab to enter the Calendar"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).enterCalendarAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("eVkbzc3vuEypSjfR3Hr9bA#Value.1511082002.1", "Press Tab to enter the Calendar");
    // i18nAccessibility.Current.MonthNext = "Next Month"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).monthNextAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("d7ISJdppoUa87s3wJLedig#Value.-766743789.1", "Next Month");
    // i18nAccessibility.Current.MonthPrevious = "Previous Month"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).monthPreviousAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("lRJU8QwPl0iwqv3N9eqD+Q#Value.1784051735.1", "Previous Month");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog1 = "The following keyboard shortcuts are available"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog1Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("7KBMokDeIEC_mM_EfFiiKA#Value.82125743.1", "The following keyboard shortcuts are available");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog2 = "LEFT / RIGHT to move day to day."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog2Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("aUoleWSZBEGHb_sk4X7m8A#Value.-1916325413.1", "LEFT / RIGHT to move day to day.");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog3 = "UP / DOWN to move week to week."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog3Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("I6J5cRrTyk6bSZ6JvMUtBg#Value.-1048883153.1", "UP / DOWN to move week to week.");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog4 = "DELETE to reset the date."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog4Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("yqo5pCbrYUa4Qeqn0J_qOg#Value.-1565462224.1", "DELETE to reset the date.");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog5 = "ESCAPE to close the calendar."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog5Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("9s+39UgfEUOBkGEECmMZsw#Value.887781619.1", "ESCAPE to close the calendar.");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog6 = "PAGE UP to move to the previous month."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog6Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("2pdORbIMeUmJLoWBa4tFQQ#Value.-513930751.1", "PAGE UP to move to the previous month.");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog7 = "PAGE DOWN to move to the next month."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog7Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("hxu4s7ASlUCI3vkxgsoR+A#Value.941141342.1", "PAGE DOWN to move to the next month.");
    // i18nAccessibility.Current.ShortcutsDialog.Current.ShortcutsDialog8 = "SPACE / ENTER to select a date."
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).shortcutsDialogAttr.getCurrent(callContext.iterationContext).shortcutsDialog8Attr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("EKgo2wktLUWoYHof84369Q#Value.58078159.1", "SPACE / ENTER to select a date.");
    // i18nAccessibility.Current.DialogButton = "Got it!"
    outVars.value.i18nAccessibilityOut.getCurrent(callContext.iterationContext).dialogButtonAttr = OS.Injector.resolve(OS.ServiceNames.TranslationsService).getMessage("lg7NoSsYfEuhIOQNq772Tw#Value.1874273954.1", "Got it!");
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_DatepickerExposeTranslations$outVars", [{
    name: "i18nDefaults",
    attrName: "i18nDefaultsOut",
    mandatory: false,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OutSystemsUIModel.TextTextTextTextTextWeekday1Weekday2Weekday3Weekday4Weekday5Weekday6Weekday7RecordListWeekdayShort1WeekdayShort2WeekRecordList();
    },
    complexType: OutSystemsUIModel.TextTextTextTextTextWeekday1Weekday2Weekday3Weekday4Weekday5Weekday6Weekday7RecordListWeekdayShort1WeekdayShort2WeekRecordList
    }, {
    name: "i18nAccessibility",
    attrName: "i18nAccessibilityOut",
    mandatory: false,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OutSystemsUIModel.TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextShortcutsDialog1ShortcutsDialog2RecordList();
    },
    complexType: OutSystemsUIModel.TextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextTextShortcutsDialog1ShortcutsDialog2RecordList
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_DatepickerExposeTranslations$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_DatepickerExposeTranslations$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    i18nDefaults: actionResults.i18nDefaultsOut,
    i18nAccessibility: actionResults.i18nAccessibilityOut
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_GetBrowser", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_GetBrowser$Action = function (userAgentIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_GetBrowser$vars"))());
    vars.value.userAgentInLocal = userAgentIn;
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_GetBrowser$outVars"))());
    // UserAgent = ToLower
    vars.value.userAgentInLocal = OS.BuiltinFunctions.toLower(vars.value.userAgentInLocal);
    // DetectBrowser
    if(((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "edge", 0, false, false) > -1))) {
    // Edge
    // Browser = "edge"
    outVars.value.browserOut = "edge";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "firefox", 0, false, false) > -1)) {
    // Firefox
    // Browser = "firefox"
    outVars.value.browserOut = "firefox";
    } else {
    if(((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "chrome", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "crios", 0, false, false) > -1))) {
    // Chrome
    // Browser = "chrome"
    outVars.value.browserOut = "chrome";
    } else {
    if(((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "safari", 0, false, false) > -1) && (OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "chrome", 0, false, false) <= -1))) {
    // Safari
    // Browser = "safari"
    outVars.value.browserOut = "safari";
    }
    
    }
    
    }
    
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_GetBrowser$vars", [{
    name: "UserAgent",
    attrName: "userAgentInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_GetBrowser$outVars", [{
    name: "Browser",
    attrName: "browserOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_GetBrowser$Action = function (userAgentIn) {
    userAgentIn = (userAgentIn === undefined) ? "" : userAgentIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_GetBrowser$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(userAgentIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Browser: OS.DataConversion.JSNodeParamConverter.to(actionResults.browserOut, OS.Types.Text)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_LayoutReadyMobile", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$HasMasterDetail", "OutSystemsUI.controller$ECTCall", "OutSystemsUI.controller$FixInputs", "OutSystemsUI.controller$DeviceDetection", "OutSystemsUI.controller$HideHeader", "OutSystemsUI.controller$IsRunningAsPWA"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_LayoutReadyMobile$Action = function (hideHeaderOnScrollIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_LayoutReadyMobile$vars"))());
    vars.value.hideHeaderOnScrollInLocal = hideHeaderOnScrollIn;
    // Execute Action: DeviceDetection
    OutSystemsUIController.default.deviceDetection$Action(false, callContext);
    // Execute Action: HideHeader
    OutSystemsUIController.default.hideHeader$Action(vars.value.hideHeaderOnScrollInLocal, callContext);
    // Execute Action: FixInputs
    OutSystemsUIController.default.fixInputs$Action(callContext);
    // Execute Action: HasMasterDetail
    OutSystemsUIController.default.hasMasterDetail$Action(callContext);
    // isPWA?
    if((OutSystemsUIController.default.isRunningAsPWA$Action(callContext).isStandaloneOut)) {
    // Execute Action: ECTCall
    OutSystemsUIController.default.eCTCall$Action(callContext);
    }
    
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_LayoutReadyMobile$vars", [{
    name: "HideHeaderOnScroll",
    attrName: "hideHeaderOnScrollInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_LayoutReadyMobile$Action = function (hideHeaderOnScrollIn) {
    hideHeaderOnScrollIn = (hideHeaderOnScrollIn === undefined) ? false : hideHeaderOnScrollIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_LayoutReadyMobile$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(hideHeaderOnScrollIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_RangeSliderReset", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_RangeSliderReset.RangeSliderResetJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_RangeSliderReset_RangeSliderResetJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_RangeSliderReset$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_RangeSliderReset$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_RangeSliderReset_RangeSliderResetJS, "RangeSliderReset", "DEPRECATED_RangeSliderReset", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_RangeSliderReset$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_RangeSliderReset$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_RangeSliderReset$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_RangeSliderReset.RangeSliderResetJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var slider = document.querySelector('#' + $parameters.WidgetId + ' .range-slider > div');
    
    // Check if element exists before applying the reset on slider
    if(slider && slider.noUiSlider){
        slider.noUiSlider.reset();
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_SetActiveMenuItems", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_SetActiveMenuItems.SetActiveJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_SetActiveMenuItems_SetActiveJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_SetActiveMenuItems$Action = function (activeItemIn, activeSubItemIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_SetActiveMenuItems$vars"))());
    vars.value.activeItemInLocal = activeItemIn;
    vars.value.activeSubItemInLocal = activeSubItemIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_SetActiveMenuItems_SetActiveJS, "SetActive", "DEPRECATED_SetActiveMenuItems", {
    ActiveItem: OS.DataConversion.JSNodeParamConverter.to(vars.value.activeItemInLocal, OS.Types.Integer),
    ActiveSubItem: OS.DataConversion.JSNodeParamConverter.to(vars.value.activeSubItemInLocal, OS.Types.Integer)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_SetActiveMenuItems$vars", [{
    name: "ActiveItem",
    attrName: "activeItemInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return -1;
    }
    }, {
    name: "ActiveSubItem",
    attrName: "activeSubItemInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return -1;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_SetActiveMenuItems$Action = function (activeItemIn, activeSubItemIn) {
    activeItemIn = (activeItemIn === undefined) ? -1 : activeItemIn;
    activeSubItemIn = (activeSubItemIn === undefined) ? -1 : activeSubItemIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_SetActiveMenuItems$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(activeItemIn, OS.Types.Integer), OS.DataConversion.JSNodeParamConverter.from(activeSubItemIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_SetActiveMenuItems.SetActiveJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var appMenuLinks = document.querySelector('.app-menu-links');
    
    if(appMenuLinks) {
        var activeLinkBlock = appMenuLinks.children[$parameters.ActiveItem];
        
        if(activeLinkBlock) {
            activeLinkBlock.classList.add("active");
            var activeSubMenu = activeLinkBlock.querySelector('.submenu');
            
            if(activeSubMenu) {
                activeSubMenu.classList.add("active");
                var activeSubMenuItem = activeSubMenu.querySelector('.submenu-items').children[$parameters.ActiveSubItem];
                
                if(activeSubMenuItem) {
                    activeSubMenuItem.classList.add("active");
                }
            }
        }
        
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_SetMenuListeners", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_SetMenuListeners.setEventListenerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$ToggleSideMenu", "OutSystemsUI.controller$SetMenuAttributes"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_SetMenuListeners_setEventListenerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_SetMenuListeners$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_SetMenuListeners_setEventListenerJS, "setEventListener", "DEPRECATED_SetMenuListeners", null, function ($parameters) {
    }, {
    ToggleSideMenu: OutSystemsUIController.default.clientActionProxies.toggleSideMenu$Action,
    SetMenuAttributes: OutSystemsUIController.default.clientActionProxies.setMenuAttributes$Action
    }, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_SetMenuListeners$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_SetMenuListeners$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_SetMenuListeners.setEventListenerJS", [], function () {
    return function ($actions, $roles, $public) {
    var layout = document.querySelector('.layout');
    var menu = document.querySelector('.app-menu-content');
    
    if(layout && menu) {
        
        var isTopMenuMobile;
        var isVisibleMobile;
        var isExpanded = layout.classList.contains('menu-visible');
        var isOverlay = layout.classList.contains('aside-overlay');
        var isExpandable = layout.classList.contains('aside-expandable');
        
        var menuLinks = menu.querySelector('.app-menu-links');
    
        var menuOnKeypress = function(e) {
            var isTabPressed = (e.key === 'Tab' || e.keyCode === 9);
            var isEscapedPressed = (e.key === 'Escape' || e.keyCode === 27);
            var isShiftKey = e.shiftKey;
            var focusableEls = menu.querySelectorAll('a[href]:not([disabled]),[tabindex="0"], button:not([disabled]), textarea:not([disabled]), input[type="text"]:not([disabled]), input[type="radio"]:not([disabled]), input[type="checkbox"]:not([disabled]),input[type="submit"]:not([disabled]), select:not([disabled])');
            var firstFocusableEl = focusableEls[0]; 
            var lastFocusableEl = focusableEls[focusableEls.length - 1];
            var isExpandableDesktop = document.querySelector('.desktop .active-screen .layout-side.aside-expandable') || document.querySelector('.tablet.landscape .active-screen .layout-side.aside-expandable');
            
            if(!isTabPressed && !isEscapedPressed) {
                return;
            }
        
            isExpanded = layout.classList.contains('menu-visible');
            
            //If esc, Close Menu
            if(isExpanded && isEscapedPressed) {
                e.preventDefault();
                e.stopPropagation();
                $actions.ToggleSideMenu();
            }
            
            if (!isExpandableDesktop) {
                if (isShiftKey) {
                    if (document.activeElement === firstFocusableEl) {
                        lastFocusableEl.focus();
                        e.preventDefault();
                    }
                } else if (document.activeElement === lastFocusableEl) {
                    firstFocusableEl.focus();
                    e.preventDefault();
                }     
            }
            
        };
        
        // Invoking setTimeout to schedule the callback to be run asynchronously
        setTimeout(function(){
            isTopMenuMobile = document.querySelector('.tablet .active-screen .layout-top') || document.querySelector('.phone .active-screen .layout-top');
            isVisibleMobile = document.querySelector('.tablet.portrait .active-screen .layout-side.aside-visible') || document.querySelector('.phone .active-screen .layout-side.aside-visible');
            
            if(isOverlay || isExpandable || isTopMenuMobile || isVisibleMobile) {
                menu.addEventListener('keydown', menuOnKeypress);
                $actions.SetMenuAttributes();
            }
        }, 0);
        
        if(menuLinks){
            menuLinks = menuLinks.children;
            
            // Add role menuitem to all links on menu
            for(var i = 0; i < menuLinks.length; i++) {
                if(!menuLinks[i].hasAttribute("role") && menuLinks[i].tagName === "A") {      
                    menuLinks[i].setAttribute("role", "menuitem");
                }
            }  
            
        }
      
    }
    
    
    
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_SidebarToggle", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_SidebarToggle.ToggleSidebarJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_SidebarToggle_ToggleSidebarJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_SidebarToggle$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_SidebarToggle$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_SidebarToggle_ToggleSidebarJS, "ToggleSidebar", "DEPRECATED_SidebarToggle", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_SidebarToggle$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_SidebarToggle$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_SidebarToggle$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_SidebarToggle.ToggleSidebarJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    // toggle Sidebar
    
    var el;
    var isOpen;
    
    if($parameters.WidgetId !== "") {
        el = document.querySelector("#" + $parameters.WidgetId + " .sidebar");
    }
    
    if(el !== null) {
        isOpen = el.classList.contains("sidebar-open");
        
        if(isOpen) {
            el.classList.remove("sidebar-open");
        } else {
            el.classList.add("sidebar-open");
        }
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_TabsDisableSwipe", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_TabsDisableSwipe.AddClassNoSwipeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_TabsDisableSwipe_AddClassNoSwipeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_TabsDisableSwipe$Action = function (tabIDIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_TabsDisableSwipe$vars"))());
    vars.value.tabIDInLocal = tabIDIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_TabsDisableSwipe_AddClassNoSwipeJS, "AddClassNoSwipe", "DEPRECATED_TabsDisableSwipe", {
    TabID: OS.DataConversion.JSNodeParamConverter.to(vars.value.tabIDInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_TabsDisableSwipe$vars", [{
    name: "TabID",
    attrName: "tabIDInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_TabsDisableSwipe$Action = function (tabIDIn) {
    tabIDIn = (tabIDIn === undefined) ? "" : tabIDIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_TabsDisableSwipe$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(tabIDIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_TabsDisableSwipe.AddClassNoSwipeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var elem = document.getElementById($parameters.TabID).querySelector('.tabs');
    
    if(elem) {
        elem.classList.add('no-swipe');
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_TabsGoTo", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_TabsGoTo.JsChangeTabJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_TabsGoTo_JsChangeTabJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_TabsGoTo$Action = function (widgetIdIn, tabNumberIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_TabsGoTo$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.tabNumberInLocal = tabNumberIn;
    // Script to change the tab that is opened.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_TabsGoTo_JsChangeTabJS, "JsChangeTab", "DEPRECATED_TabsGoTo", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    TabNumber: OS.DataConversion.JSNodeParamConverter.to(vars.value.tabNumberInLocal, OS.Types.Integer)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_TabsGoTo$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "TabNumber",
    attrName: "tabNumberInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_TabsGoTo$Action = function (widgetIdIn, tabNumberIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    tabNumberIn = (tabNumberIn === undefined) ? 0 : tabNumberIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_TabsGoTo$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(tabNumberIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_TabsGoTo.JsChangeTabJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element = document.getElementById($parameters.WidgetId);
    
    if(element) {
        var countTabs = element.querySelectorAll(".tabs-header-tab").length-1;
        var newTargetTab = ($parameters.TabNumber < 0) ? 0 : ($parameters.TabNumber > countTabs) ? countTabs : $parameters.TabNumber;
        element.changeTab(newTargetTab);
    }
    };
    });
    
    define("OutSystemsUI.controller$DEPRECATED_UpdateAccordion", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DEPRECATED_UpdateAccordion.UpdateAccordionJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DEPRECATED_UpdateAccordion_UpdateAccordionJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dEPRECATED_UpdateAccordion$Action = function (widgetIdIn, multipleItemsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DEPRECATED_UpdateAccordion$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.multipleItemsInLocal = multipleItemsIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DEPRECATED_UpdateAccordion_UpdateAccordionJS, "UpdateAccordion", "DEPRECATED_UpdateAccordion", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    MultipleItems: OS.DataConversion.JSNodeParamConverter.to(vars.value.multipleItemsInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DEPRECATED_UpdateAccordion$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "MultipleItems",
    attrName: "multipleItemsInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dEPRECATED_UpdateAccordion$Action = function (widgetIdIn, multipleItemsIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    multipleItemsIn = (multipleItemsIn === undefined) ? false : multipleItemsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dEPRECATED_UpdateAccordion$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(multipleItemsIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DEPRECATED_UpdateAccordion.UpdateAccordionJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element = document.getElementById($parameters.WidgetId);
    var elementNodes = element.querySelectorAll('.section-expandable');
    
    // Check if exist elements inside accordion
    if(elementNodes.length > 0){
        for(i = 0; i < elementNodes.length; i++){
            elementNodes[i].updateAccordion($parameters.MultipleItems);
        } 
    }
    
    };
    });
    
    define("OutSystemsUI.controller$DeviceDetection", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DeviceDetection.SetDeviceClassJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DeviceDetection_SetDeviceClassJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.deviceDetection$Action = function (isWebAppIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DeviceDetection$vars"))());
    vars.value.isWebAppInLocal = isWebAppIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DeviceDetection_SetDeviceClassJS, "SetDeviceClass", "DeviceDetection", {
    IsWebApp: OS.DataConversion.JSNodeParamConverter.to(vars.value.isWebAppInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DeviceDetection$vars", [{
    name: "IsWebApp",
    attrName: "isWebAppInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.deviceDetection$Action = function (isWebAppIn) {
    isWebAppIn = (isWebAppIn === undefined) ? false : isWebAppIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.deviceDetection$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(isWebAppIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DeviceDetection.SetDeviceClassJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Utils.LayoutPrivate.SetDeviceClass($parameters.IsWebApp);
    };
    });
    
    define("OutSystemsUI.controller$DisableTabItem", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DisableTabItem.DisableTabItemJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DisableTabItem_DisableTabItemJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.disableTabItem$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DisableTabItem$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var disableTabItemJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DisableTabItem$outVars"))());
    // Disable a TabHeaderItem with a specific identifier.
    disableTabItemJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DisableTabItem_DisableTabItemJS, "DisableTabItem", "DisableTabItem", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DisableTabItem$disableTabItemJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(disableTabItemJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DisableTabItem$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DisableTabItem$disableTabItemJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DisableTabItem$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.disableTabItem$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.disableTabItem$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DisableTabItem.DisableTabItemJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TabsHeaderItemAPI.DisableTabItem($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownChangeBooleanProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownChangeBooleanProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownChangeBooleanProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "DropdownChangeBooleanProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownChangeBooleanProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DropdownChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "DropdownChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DropdownClear", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownClear.ClearDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownClear_ClearDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownClear$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClear$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var clearDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClear$outVars"))());
    // Trigger the API method that will clear the selected valued from the given pattern ID.
    clearDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownClear_ClearDropdownJS, "ClearDropdown", "DropdownClear", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClear$clearDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(clearDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClear$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClear$clearDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClear$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownClear$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownClear$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownClear.ClearDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Clear($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownClearValidation", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownClearValidation.ValidationDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownClearValidation_ValidationDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownClearValidation$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClearValidation$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var validationDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClearValidation$outVars"))());
    // Trigger the API method that will set the validation status for the given Dropdown ID.
    validationDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownClearValidation_ValidationDropdownJS, "ValidationDropdown", "DropdownClearValidation", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClearValidation$validationDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(validationDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClearValidation$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClearValidation$validationDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClearValidation$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownClearValidation$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownClearValidation$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownClearValidation.ValidationDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetValidation($parameters.WidgetId, true, '');
    };
    });
    
    define("OutSystemsUI.controller$DropdownClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownClose.CloseDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownClose_CloseDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClose$outVars"))());
    // Trigger the API method that will close the Dropdown with the given pattern ID.
    closeDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownClose_CloseDropdownJS, "CloseDropdown", "DropdownClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownClose$closeDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClose$closeDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownClose.CloseDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownCreate.CreateDropdownJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownCreate_CreateDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownCreate$Action = function (uniqueIdIn, modeIn, providerIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.modeInLocal = modeIn;
    vars.value.providerInLocal = providerIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownCreate_CreateDropdownJS, "CreateDropdown", "DropdownCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Provider: OS.DataConversion.JSNodeParamConverter.to(vars.value.providerInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    Mode: OS.DataConversion.JSNodeParamConverter.to(vars.value.modeInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Mode",
    attrName: "modeInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Provider",
    attrName: "providerInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownCreate$Action = function (uniqueIdIn, modeIn, providerIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    modeIn = (modeIn === undefined) ? "" : modeIn;
    providerIn = (providerIn === undefined) ? "" : providerIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), modeIn, providerIn, OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownCreate.CreateDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownAPI.Create($parameters.UniqueId, $parameters.Mode, $parameters.Provider, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$DropdownDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownDestroy.DestroyDropdownJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownDestroy_DestroyDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownDestroy_DestroyDropdownJS, "DestroyDropdown", "DropdownDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownDestroy.DestroyDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownDisable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownDisable.DisableDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownDisable_DisableDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownDisable$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownDisable$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var disableDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownDisable$outVars"))());
    // Trigger the API method that will set the given pattern id as Disabled.
    disableDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownDisable_DisableDropdownJS, "DisableDropdown", "DropdownDisable", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownDisable$disableDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(disableDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownDisable$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownDisable$disableDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownDisable$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownDisable$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownDisable$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownDisable.DisableDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Disable($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownEnable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownEnable.EnableDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownEnable_EnableDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownEnable$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownEnable$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var enableDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownEnable$outVars"))());
    // Trigger the API method that will set the given pattern id as Enabled.
    enableDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownEnable_EnableDropdownJS, "EnableDropdown", "DropdownEnable", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownEnable$enableDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(enableDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownEnable$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownEnable$enableDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownEnable$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownEnable$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownEnable$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownEnable.EnableDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Enable($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownGetSelectedValues", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownGetSelectedValues.GetSelectedValuesJS", "OutSystemsUI.model$DropdownOptionList", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownGetSelectedValues_GetSelectedValuesJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownGetSelectedValues$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownGetSelectedValues$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var getSelectedValuesJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeDropdownOptionVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.DropdownOptionList))());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownGetSelectedValues$outVars"))());
    // Trigger the API method that will get the selected values.
    getSelectedValuesJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownGetSelectedValues_GetSelectedValuesJS, "GetSelectedValues", "DropdownGetSelectedValues", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownGetSelectedValues$getSelectedValuesJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(getSelectedValuesJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    // HasSelectedValues
    if(((((jSONDeserializeErrorMessageVar.value.dataOut.valueAttr) !== ("")) && (jSONDeserializeErrorMessageVar.value.dataOut.codeAttr === "200")))) {
    // JSON Deserialize: JSONDeserializeDropdownOption
    jSONDeserializeDropdownOptionVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jSONDeserializeErrorMessageVar.value.dataOut.valueAttr, OutSystemsUIModel.DropdownOptionList, false);
    // SelectedOptionList = JSONDeserializeDropdownOption.Data
    outVars.value.selectedOptionListOut = jSONDeserializeDropdownOptionVar.value.dataOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownGetSelectedValues$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownGetSelectedValues$getSelectedValuesJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownGetSelectedValues$outVars", [{
    name: "SelectedOptionList",
    attrName: "selectedOptionListOut",
    mandatory: false,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OutSystemsUIModel.DropdownOptionList();
    },
    complexType: OutSystemsUIModel.DropdownOptionList
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownGetSelectedValues$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownGetSelectedValues$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    SelectedOptionList: actionResults.selectedOptionListOut,
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownGetSelectedValues.GetSelectedValuesJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.GetSelectedValues($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownInitialize.InitializeDropdownJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownInitialize_InitializeDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownInitialize_InitializeDropdownJS, "InitializeDropdown", "DropdownInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownInitialize.InitializeDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownNotValid", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownNotValid.ValidationDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownNotValid_ValidationDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownNotValid$Action = function (widgetIdIn, validationMessageIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownNotValid$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.validationMessageInLocal = validationMessageIn;
    var validationDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownNotValid$outVars"))());
    // Trigger the API method that will set the validation status for the given Dropdown ID.
    validationDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownNotValid_ValidationDropdownJS, "ValidationDropdown", "DropdownNotValid", {
    ValidationMessage: OS.DataConversion.JSNodeParamConverter.to(vars.value.validationMessageInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownNotValid$validationDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(validationDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownNotValid$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ValidationMessage",
    attrName: "validationMessageInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownNotValid$validationDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownNotValid$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownNotValid$Action = function (widgetIdIn, validationMessageIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    validationMessageIn = (validationMessageIn === undefined) ? "" : validationMessageIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownNotValid$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(validationMessageIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownNotValid.ValidationDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetValidation($parameters.UniqueId, false, $parameters.ValidationMessage);
    };
    });
    
    define("OutSystemsUI.controller$DropdownOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownOpen.OpenDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownOpen_OpenDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownOpen$outVars"))());
    // Trigger the API method that will open the Dropdown with the given pattern ID.
    openDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownOpen_OpenDropdownJS, "OpenDropdown", "DropdownOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownOpen$openDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownOpen$openDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownOpen.OpenDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownRegisterCallback_RegisterCallbackJS, "RegisterCallback", "DropdownRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideClear", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideClear.ClearDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideClear_ClearDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideClear$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClear$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var clearDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClear$outVars"))());
    // Trigger the API method that will clear the selected valued from the given pattern ID.
    clearDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideClear_ClearDropdownJS, "ClearDropdown", "DropdownServerSideClear", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClear$clearDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(clearDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClear$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClear$clearDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClear$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideClear$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideClear$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideClear.ClearDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Clear($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideClearValidation", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideClearValidation.ValidationDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideClearValidation_ValidationDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideClearValidation$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClearValidation$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var validationDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClearValidation$outVars"))());
    // Trigger the API method that will set the validation status for the given Dropdown ID.
    validationDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideClearValidation_ValidationDropdownJS, "ValidationDropdown", "DropdownServerSideClearValidation", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClearValidation$validationDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(validationDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClearValidation$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClearValidation$validationDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClearValidation$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideClearValidation$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideClearValidation$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideClearValidation.ValidationDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetValidation($parameters.WidgetId, true, '');
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideClose.CloseDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideClose_CloseDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClose$outVars"))());
    // Trigger the API method that will close the Dropdown with the given pattern ID.
    closeDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideClose_CloseDropdownJS, "CloseDropdown", "DropdownServerSideClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideClose$closeDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClose$closeDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideClose.CloseDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideDisable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideDisable.DisableDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideDisable_DisableDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideDisable$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideDisable$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var disableDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideDisable$outVars"))());
    // Trigger the API method that will set the given pattern id as Disabled.
    disableDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideDisable_DisableDropdownJS, "DisableDropdown", "DropdownServerSideDisable", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideDisable$disableDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(disableDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideDisable$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideDisable$disableDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideDisable$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideDisable$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideDisable$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideDisable.DisableDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Disable($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideEnable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideEnable.EnableDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideEnable_EnableDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideEnable$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideEnable$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var enableDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideEnable$outVars"))());
    // Trigger the API method that will set the given pattern id as Enabled.
    enableDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideEnable_EnableDropdownJS, "EnableDropdown", "DropdownServerSideEnable", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideEnable$enableDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(enableDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideEnable$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideEnable$enableDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideEnable$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideEnable$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideEnable$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideEnable.EnableDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Enable($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideItemChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideItemChangeBooleanProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideItemChangeBooleanProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideItemChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideItemChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideItemChangeBooleanProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "DropdownServerSideItemChangeBooleanProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideItemChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideItemChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideItemChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideItemChangeBooleanProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownServerSideItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideItemChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideItemChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideItemChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideItemChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideItemChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideItemChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "DropdownServerSideItemChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideItemChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideItemChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideItemChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideItemChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownServerSideItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideItemCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideItemCreate.CreateDropdownJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideItemCreate_CreateDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideItemCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideItemCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideItemCreate_CreateDropdownJS, "CreateDropdown", "DropdownServerSideItemCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideItemCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideItemCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideItemCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideItemCreate.CreateDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownServerSideItemAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideItemDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideItemDestroy.DestroyDropdownJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideItemDestroy_DestroyDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideItemDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideItemDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideItemDestroy_DestroyDropdownJS, "DestroyDropdown", "DropdownServerSideItemDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideItemDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideItemDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideItemDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideItemDestroy.DestroyDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownServerSideItemAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideItemInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideItemInitialize.InitializeDropdownJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideItemInitialize_InitializeDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideItemInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideItemInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideItemInitialize_InitializeDropdownJS, "InitializeDropdown", "DropdownServerSideItemInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideItemInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideItemInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideItemInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideItemInitialize.InitializeDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownServerSideItemAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideItemRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideItemRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideItemRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideItemRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideItemRegisterCallback_RegisterCallbackJS, "RegisterCallback", "DropdownServerSideItemRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideItemRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideItemRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideItemRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.DropdownServerSideItemAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideNotValid", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideNotValid.ValidationDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideNotValid_ValidationDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideNotValid$Action = function (widgetIdIn, validationMessageIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideNotValid$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.validationMessageInLocal = validationMessageIn;
    var validationDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideNotValid$outVars"))());
    // Trigger the API method that will set the validation status for the given Dropdown ID.
    validationDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideNotValid_ValidationDropdownJS, "ValidationDropdown", "DropdownServerSideNotValid", {
    ValidationMessage: OS.DataConversion.JSNodeParamConverter.to(vars.value.validationMessageInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideNotValid$validationDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(validationDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideNotValid$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ValidationMessage",
    attrName: "validationMessageInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideNotValid$validationDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideNotValid$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideNotValid$Action = function (widgetIdIn, validationMessageIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    validationMessageIn = (validationMessageIn === undefined) ? "" : validationMessageIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideNotValid$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(validationMessageIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideNotValid.ValidationDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetValidation($parameters.UniqueId, false, $parameters.ValidationMessage);
    };
    });
    
    define("OutSystemsUI.controller$DropdownServerSideOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownServerSideOpen.OpenDropdownJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownServerSideOpen_OpenDropdownJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownServerSideOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openDropdownJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideOpen$outVars"))());
    // Trigger the API method that will open the Dropdown with the given pattern ID.
    openDropdownJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownServerSideOpen_OpenDropdownJS, "OpenDropdown", "DropdownServerSideOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownServerSideOpen$openDropdownJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openDropdownJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideOpen$openDropdownJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownServerSideOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownServerSideOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownServerSideOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownServerSideOpen.OpenDropdownJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$DropdownSetValue", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownSetValue.DropdownSetValueJS", "OutSystemsUI.model$DropdownOptionList", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownSetValue_DropdownSetValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownSetValue$Action = function (widgetIdIn, selectedValuesIn, silentOnChangedEventIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownSetValue$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.selectedValuesInLocal = selectedValuesIn.clone();
    vars.value.silentOnChangedEventInLocal = silentOnChangedEventIn;
    var dropdownSetValueJSResult = new OS.DataTypes.VariableHolder();
    var selectedValuesJSONVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownSetValue$outVars"))());
    // JSON Serialize: SelectedValuesJSON
    selectedValuesJSONVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.selectedValuesInLocal, false, false);
    dropdownSetValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownSetValue_DropdownSetValueJS, "DropdownSetValue", "DropdownSetValue", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    SilentOnChangedEvent: OS.DataConversion.JSNodeParamConverter.to(vars.value.silentOnChangedEventInLocal, OS.Types.Boolean),
    SelectedValues: OS.DataConversion.JSNodeParamConverter.to(selectedValuesJSONVar.value.jSONOut, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownSetValue$dropdownSetValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(dropdownSetValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownSetValue$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "SelectedValues",
    attrName: "selectedValuesInLocal",
    mandatory: true,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OutSystemsUIModel.DropdownOptionList();
    },
    complexType: OutSystemsUIModel.DropdownOptionList
    }, {
    name: "SilentOnChangedEvent",
    attrName: "silentOnChangedEventInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownSetValue$dropdownSetValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownSetValue$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownSetValue$Action = function (widgetIdIn, selectedValuesIn, silentOnChangedEventIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    selectedValuesIn = (selectedValuesIn === undefined) ? new OutSystemsUIModel.DropdownOptionList() : selectedValuesIn;
    silentOnChangedEventIn = (silentOnChangedEventIn === undefined) ? true : silentOnChangedEventIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownSetValue$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), selectedValuesIn, OS.DataConversion.JSNodeParamConverter.from(silentOnChangedEventIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownSetValue.DropdownSetValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetValues(
        $parameters.UniqueId, 
        $parameters.SelectedValues, 
        $parameters.SilentOnChangedEvent
    );
    };
    });
    
    define("OutSystemsUI.controller$DropdownTogglePopup", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$DropdownTogglePopup.TogglePopupJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_DropdownTogglePopup_TogglePopupJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.dropdownTogglePopup$Action = function (widgetIdIn, enablePopupIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownTogglePopup$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.enablePopupInLocal = enablePopupIn;
    var togglePopupJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownTogglePopup$outVars"))());
    // Trigger the API method that will clear the selected valued from the given pattern ID.
    togglePopupJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_DropdownTogglePopup_TogglePopupJS, "TogglePopup", "DropdownTogglePopup", {
    EnablePopup: OS.DataConversion.JSNodeParamConverter.to(vars.value.enablePopupInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.DropdownTogglePopup$togglePopupJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(togglePopupJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownTogglePopup$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EnablePopup",
    attrName: "enablePopupInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownTogglePopup$togglePopupJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.DropdownTogglePopup$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.dropdownTogglePopup$Action = function (widgetIdIn, enablePopupIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    enablePopupIn = (enablePopupIn === undefined) ? true : enablePopupIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.dropdownTogglePopup$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(enablePopupIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$DropdownTogglePopup.TogglePopupJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.TogglePopup($parameters.UniqueId, $parameters.EnablePopup);
    };
    });
    
    define("OutSystemsUI.controller$ECTCall", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ECTCall.InitECTJS", "OutSystemsUI.controller$GetECTURL"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ECTCall_InitECTJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.eCTCall$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_ECTCall_InitECTJS, "InitECT", "ECTCall", {
    URL: OS.DataConversion.JSNodeParamConverter.to(OutSystemsUIController.default.getECTURL$Action(callContext).uRLOut, OS.Types.Text),
    ModuleName: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.getEntryEspaceName(), OS.Types.Text),
    CurrentLocale: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.getCurrentLocale(), OS.Types.Text),
    UserId: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.getUserId(), OS.Types.Integer)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.eCTCall$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.eCTCall$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ECTCall.InitECTJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    function createHTMLElement(block){
        var range = document.createRange();
        var documentFragment = range.createContextualFragment(block);
        
        // Removes the non existant Theme file
        if(documentFragment.querySelector('#ect_wtOutFeedbackDiv') !== null && documentFragment.querySelector('#ect_wtOutFeedbackDiv').childNodes[0].childNodes[0].href.includes('Theme')) {
            documentFragment.querySelector('#ect_wtOutFeedbackDiv').childNodes[0].childNodes[0].remove();
        }
        
        document.body.appendChild(documentFragment);
        
        var floating = document.querySelector('[data-block="Interaction.FloatingActions"]');
    
        if(floating){
            var elements = document.querySelectorAll('.ECT_FeedbackContainer div[class^="Feedback"]');
            elements.forEach(function(i){
               i.style.bottom = '100px';
               i.style.right = '35px';
            });
        }
        
    }
    
    var soapRequest = new XMLHttpRequest();
    var soapBody = '<?xml version="1.0" encoding="utf-8"?>' +
                    '<soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:api="http://127.0.0.1/Integrics/Enswitch/API" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">' +
                        '<soapenv:Body>' +
                            '<GetModernECT xmlns="http://www.outsystems.com"> <moduleName>' + $parameters.ModuleName + '</moduleName>  <userId>' + $parameters.UserId + '</userId>  <locale>' + $parameters.CurrentLocale + '</locale>  </GetModernECT>' +
                        '</soapenv:Body>' +
                    '</soapenv:Envelope>';
    var timeout = 2000;
                    
                    
    soapRequest.open('POST', window.location.origin + $parameters.URL, true);
    
    soapRequest.setRequestHeader('Content-Type', 'text/xml');
    soapRequest.responseType = 'document';
    soapRequest.timeout = timeout;
    
    soapRequest.onload = function() {
        if (soapRequest.readyState === 4) {
            if (soapRequest.status === 200) {
                createHTMLElement(soapRequest.response.getElementsByTagName('GetModernECTResponse')[0].getElementsByTagName('html')[0].textContent);
                if(document.getElementById('ect_wtFeedbackInput') !== null) {
                    document.getElementById('ect_wtFeedbackInput').setAttribute('onchange', '');
                    document.getElementById('ect_wtFeedbackInput').setAttribute('onkeyup', '');
                }
            } else {
                console.error(soapRequest.statusText);
            }
        }
        
    } 
    
    soapRequest.send(soapBody);
    };
    });
    
    define("OutSystemsUI.controller$EnableTabItem", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$EnableTabItem.EnableTabItemJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_EnableTabItem_EnableTabItemJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.enableTabItem$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.EnableTabItem$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var enableTabItemJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.EnableTabItem$outVars"))());
    // Enable a TabHeaderItem with a specific identifier.
    enableTabItemJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_EnableTabItem_EnableTabItemJS, "EnableTabItem", "EnableTabItem", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.EnableTabItem$enableTabItemJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(enableTabItemJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.EnableTabItem$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.EnableTabItem$enableTabItemJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.EnableTabItem$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.enableTabItem$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.enableTabItem$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$EnableTabItem.EnableTabItemJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TabsHeaderItemAPI.EnableTabItem($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$EndOfflineDataSync", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$EndOfflineDataSync.TriggerSyncCompleteEventJS", "OutSystemsUI.controller$EndOfflineDataSync.TriggerSyncErrorEventJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_EndOfflineDataSync_TriggerSyncCompleteEventJS, OutSystemsUI_controller_EndOfflineDataSync_TriggerSyncErrorEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.endOfflineDataSync$Action = function (hasErrorIn, errorMessageIn, allowRetryIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.EndOfflineDataSync$vars"))());
    vars.value.hasErrorInLocal = hasErrorIn;
    vars.value.errorMessageInLocal = errorMessageIn;
    vars.value.allowRetryInLocal = allowRetryIn;
    if((vars.value.hasErrorInLocal)) {
    controller.safeExecuteJSNode(OutSystemsUI_controller_EndOfflineDataSync_TriggerSyncErrorEventJS, "TriggerSyncErrorEvent", "EndOfflineDataSync", {
    ErrorMessage: OS.DataConversion.JSNodeParamConverter.to(vars.value.errorMessageInLocal, OS.Types.Text),
    AllowRetry: OS.DataConversion.JSNodeParamConverter.to(vars.value.allowRetryInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    } else {
    controller.safeExecuteJSNode(OutSystemsUI_controller_EndOfflineDataSync_TriggerSyncCompleteEventJS, "TriggerSyncCompleteEvent", "EndOfflineDataSync", null, function ($parameters) {
    }, {}, {});
    }
    
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.EndOfflineDataSync$vars", [{
    name: "HasError",
    attrName: "hasErrorInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "AllowRetry",
    attrName: "allowRetryInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.endOfflineDataSync$Action = function (hasErrorIn, errorMessageIn, allowRetryIn) {
    hasErrorIn = (hasErrorIn === undefined) ? false : hasErrorIn;
    errorMessageIn = (errorMessageIn === undefined) ? "" : errorMessageIn;
    allowRetryIn = (allowRetryIn === undefined) ? false : allowRetryIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.endOfflineDataSync$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(hasErrorIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(errorMessageIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(allowRetryIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$EndOfflineDataSync.TriggerSyncCompleteEventJS", [], function () {
    return function ($actions, $roles, $public) {
    window.offlineDataSync.triggerSyncCompleteEvent();
    
    };
    });
    define("OutSystemsUI.controller$EndOfflineDataSync.TriggerSyncErrorEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    window.offlineDataSync.triggerSyncErrorEvent($parameters.ErrorMessage, $parameters.AllowRetry);
    
    };
    });
    
    define("OutSystemsUI.controller$FeedbackMessageClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FeedbackMessageClose.closeFeedbackMessageJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FeedbackMessageClose_closeFeedbackMessageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.feedbackMessageClose$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_FeedbackMessageClose_closeFeedbackMessageJS, "closeFeedbackMessage", "FeedbackMessageClose", null, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.feedbackMessageClose$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.feedbackMessageClose$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FeedbackMessageClose.closeFeedbackMessageJS", [], function () {
    return function ($actions, $roles, $public) {
    $public.FeedbackMessage.closeFeedbackMessage();
    };
    });
    
    define("OutSystemsUI.controller$FeedbackMessageShow", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FeedbackMessageShow.ShowFeedbackMessageJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FeedbackMessageShow_ShowFeedbackMessageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.feedbackMessageShow$Action = function (messageIn, messageTypeIn, encodedHTMLIn, extendedClassIn, closeOnClickIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FeedbackMessageShow$vars"))());
    vars.value.messageInLocal = messageIn;
    vars.value.messageTypeInLocal = messageTypeIn;
    vars.value.encodedHTMLInLocal = encodedHTMLIn;
    vars.value.extendedClassInLocal = extendedClassIn;
    vars.value.closeOnClickInLocal = closeOnClickIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_FeedbackMessageShow_ShowFeedbackMessageJS, "ShowFeedbackMessage", "FeedbackMessageShow", {
    ExtraCSSClasses: OS.DataConversion.JSNodeParamConverter.to(vars.value.extendedClassInLocal, OS.Types.Text),
    EncodedHtml: OS.DataConversion.JSNodeParamConverter.to(vars.value.encodedHTMLInLocal, OS.Types.Boolean),
    MessageType: OS.DataConversion.JSNodeParamConverter.to(vars.value.messageTypeInLocal, OS.Types.Integer),
    CloseOnClick: OS.DataConversion.JSNodeParamConverter.to(vars.value.closeOnClickInLocal, OS.Types.Boolean),
    Message: OS.DataConversion.JSNodeParamConverter.to(vars.value.messageInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FeedbackMessageShow$vars", [{
    name: "Message",
    attrName: "messageInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "MessageType",
    attrName: "messageTypeInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }, {
    name: "EncodedHTML",
    attrName: "encodedHTMLInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }, {
    name: "ExtendedClass",
    attrName: "extendedClassInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "CloseOnClick",
    attrName: "closeOnClickInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.feedbackMessageShow$Action = function (messageIn, messageTypeIn, encodedHTMLIn, extendedClassIn, closeOnClickIn) {
    messageIn = (messageIn === undefined) ? "" : messageIn;
    messageTypeIn = (messageTypeIn === undefined) ? 0 : messageTypeIn;
    encodedHTMLIn = (encodedHTMLIn === undefined) ? true : encodedHTMLIn;
    extendedClassIn = (extendedClassIn === undefined) ? "" : extendedClassIn;
    closeOnClickIn = (closeOnClickIn === undefined) ? true : closeOnClickIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.feedbackMessageShow$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(messageIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(messageTypeIn, OS.Types.Integer), OS.DataConversion.JSNodeParamConverter.from(encodedHTMLIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(extendedClassIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(closeOnClickIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FeedbackMessageShow.ShowFeedbackMessageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $public.FeedbackMessage.showFeedbackMessage($parameters.Message, $parameters.MessageType, $parameters.EncodedHtml, $parameters.ExtraCSSClasses, $parameters.CloseOnClick);
    
    };
    });
    
    define("OutSystemsUI.controller$FixInputs", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FixInputs.FixInputsJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FixInputs_FixInputsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.fixInputs$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_FixInputs_FixInputsJS, "FixInputs", "FixInputs", null, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.fixInputs$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.fixInputs$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FixInputs.FixInputsJS", [], function () {
    return function ($actions, $roles, $public) {
    // apply the iOS inputs fix for webviews
    OutSystems.OSUI.Utils.LayoutPrivate.FixInputs();
    };
    });
    
    define("OutSystemsUI.controller$FlipContentBack", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentBack.ShowBackJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentBack_ShowBackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentBack$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentBack$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var showBackJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentBack$outVars"))());
    showBackJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentBack_ShowBackJS, "ShowBack", "FlipContentBack", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentBack$showBackJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(showBackJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentBack$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentBack$showBackJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentBack$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentBack$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentBack$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentBack.ShowBackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.FlipContentAPI.ShowBackContent($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$FlipContentChangeFlipSelf", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentChangeFlipSelf.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentChangeFlipSelf_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentChangeFlipSelf$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentChangeFlipSelf$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentChangeFlipSelf_ChangePropertyJS, "ChangeProperty", "FlipContentChangeFlipSelf", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("FlipSelf", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentChangeFlipSelf$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentChangeFlipSelf$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentChangeFlipSelf$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentChangeFlipSelf.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$FlipContentChangeIsFlipped", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentChangeIsFlipped.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentChangeIsFlipped_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentChangeIsFlipped$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentChangeIsFlipped$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentChangeIsFlipped_ChangePropertyJS, "ChangeProperty", "FlipContentChangeIsFlipped", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("IsFlipped", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentChangeIsFlipped$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentChangeIsFlipped$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentChangeIsFlipped$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentChangeIsFlipped.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$FlipContentChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentChangeProperty_ChangePropertyJS, "ChangeProperty", "FlipContentChangeProperty", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$FlipContentCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentCreate_CreateJS, "Create", "FlipContentCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$FlipContentDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentDestroy_DestroyJS, "Destroy", "FlipContentDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$FlipContentFront", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentFront.ShowFrontJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentFront_ShowFrontJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentFront$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentFront$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var showFrontJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentFront$outVars"))());
    showFrontJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentFront_ShowFrontJS, "ShowFront", "FlipContentFront", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentFront$showFrontJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(showFrontJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentFront$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentFront$showFrontJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentFront$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentFront$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentFront$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentFront.ShowFrontJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.FlipContentAPI.ShowFrontContent($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$FlipContentInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentInitialize_InitializeJS, "Initialize", "FlipContentInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$FlipContentRegisterCallack", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentRegisterCallack.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentRegisterCallack_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentRegisterCallack$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentRegisterCallack$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentRegisterCallack_RegisterCallbackJS, "RegisterCallback", "FlipContentRegisterCallack", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentRegisterCallack$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentRegisterCallack$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentRegisterCallack$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentRegisterCallack.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.FlipContentAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$FlipContentToggle", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FlipContentToggle.ToggleJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FlipContentToggle_ToggleJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.flipContentToggle$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentToggle$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var toggleJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentToggle$outVars"))());
    toggleJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_FlipContentToggle_ToggleJS, "Toggle", "FlipContentToggle", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.FlipContentToggle$toggleJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(toggleJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentToggle$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentToggle$toggleJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FlipContentToggle$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.flipContentToggle$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.flipContentToggle$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$FlipContentToggle.ToggleJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.FlipContentAPI.ToggleFlipContent($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$FocusFirstInvalidInput", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$FocusFirstInvalidInput.FocusFirstInvalidInputJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_FocusFirstInvalidInput_FocusFirstInvalidInputJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.focusFirstInvalidInput$Action = function (widgetIdIn, isSmoothIn, elementParentClassIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FocusFirstInvalidInput$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isSmoothInLocal = isSmoothIn;
    vars.value.elementParentClassInLocal = elementParentClassIn;
    var focusFirstInvalidInputJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.FocusFirstInvalidInput$outVars"))());
    // Script to set the focus on the first invalid input of the screen.
    focusFirstInvalidInputJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_FocusFirstInvalidInput_FocusFirstInvalidInputJS, "FocusFirstInvalidInput", "FocusFirstInvalidInput", {
    IsSmooth: OS.DataConversion.JSNodeParamConverter.to(vars.value.isSmoothInLocal, OS.Types.Boolean),
    ElementParentClass: OS.DataConversion.JSNodeParamConverter.to(vars.value.elementParentClassInLocal, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.FocusFirstInvalidInput$focusFirstInvalidInputJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(focusFirstInvalidInputJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FocusFirstInvalidInput$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsSmooth",
    attrName: "isSmoothInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ElementParentClass",
    attrName: "elementParentClassInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FocusFirstInvalidInput$focusFirstInvalidInputJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.FocusFirstInvalidInput$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.focusFirstInvalidInput$Action = function (widgetIdIn, isSmoothIn, elementParentClassIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isSmoothIn = (isSmoothIn === undefined) ? false : isSmoothIn;
    elementParentClassIn = (elementParentClassIn === undefined) ? "" : elementParentClassIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.focusFirstInvalidInput$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isSmoothIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(elementParentClassIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$FocusFirstInvalidInput.FocusFirstInvalidInputJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Utils.InvalidInputs.FocusFirstInvalidInput(
        $parameters.WidgetId,
        $parameters.IsSmooth,
        $parameters.ElementParentClass
    );
    };
    });
    
    define("OutSystemsUI.controller$GalleryChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GalleryChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GalleryChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.galleryChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GalleryChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_GalleryChangeProperty_ChangePropertyJS, "ChangeProperty", "GalleryChangeProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GalleryChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.galleryChangeProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.galleryChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$GalleryChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.GalleryAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$GalleryCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GalleryCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GalleryCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.galleryCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GalleryCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_GalleryCreate_CreateJS, "Create", "GalleryCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GalleryCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.galleryCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.galleryCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$GalleryCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.GalleryAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$GalleryDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GalleryDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GalleryDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.galleryDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GalleryDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_GalleryDestroy_DestroyJS, "Destroy", "GalleryDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GalleryDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.galleryDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.galleryDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$GalleryDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.GalleryAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$GalleryInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GalleryInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GalleryInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.galleryInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GalleryInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_GalleryInitialize_InitializeJS, "Initialize", "GalleryInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GalleryInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.galleryInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.galleryInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$GalleryInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.GalleryAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$GalleryRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GalleryRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GalleryRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.galleryRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GalleryRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_GalleryRegisterCallback_RegisterCallbackJS, "RegisterCallback", "GalleryRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GalleryRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.galleryRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.galleryRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$GalleryRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.GalleryAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$GenerateUniqueId", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GenerateUniqueId.RandomStringJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GenerateUniqueId_RandomStringJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.generateUniqueId$Action = function (current_Unique_IDIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GenerateUniqueId$vars"))());
    vars.value.current_Unique_IDInLocal = current_Unique_IDIn;
    var randomStringJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GenerateUniqueId$outVars"))());
    // Current_ID is empty?
    if(((vars.value.current_Unique_IDInLocal === OS.BuiltinFunctions.nullTextIdentifier()))) {
    randomStringJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GenerateUniqueId_RandomStringJS, "RandomString", "GenerateUniqueId", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GenerateUniqueId$randomStringJSResult"))();
    jsNodeResult.uniqueIdOut = OS.DataConversion.JSNodeParamConverter.from($parameters.UniqueId, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Return new ID
    // Unique_ID = RandomString.UniqueId
    outVars.value.unique_IDOut = randomStringJSResult.value.uniqueIdOut;
    } else {
    // Return current ID
    // Unique_ID = Current_Unique_ID
    outVars.value.unique_IDOut = vars.value.current_Unique_IDInLocal;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GenerateUniqueId$vars", [{
    name: "Current_Unique_ID",
    attrName: "current_Unique_IDInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GenerateUniqueId$randomStringJSResult", [{
    name: "UniqueId",
    attrName: "uniqueIdOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GenerateUniqueId$outVars", [{
    name: "Unique_ID",
    attrName: "unique_IDOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.generateUniqueId$Action = function (current_Unique_IDIn) {
    current_Unique_IDIn = (current_Unique_IDIn === undefined) ? "" : current_Unique_IDIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.generateUniqueId$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(current_Unique_IDIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Unique_ID: OS.DataConversion.JSNodeParamConverter.to(actionResults.unique_IDOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GenerateUniqueId.RandomStringJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.UniqueId = OutSystems.OSUI.Utils.GenerateUniqueId();
    };
    });
    
    define("OutSystemsUI.controller$GetBrowser", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetBrowser.GetBrowserJS", "OutSystemsUI.controller$GetBrowser_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetBrowser_GetBrowserJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getBrowser$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var getBrowser_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getBrowserJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetBrowser$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    getBrowserJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetBrowser_GetBrowserJS, "GetBrowser", "GetBrowser", {
    Browser: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetBrowser$getBrowserJSResult"))();
    jsNodeResult.browserOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Browser, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Browser
    // Browser = GetBrowser.Browser
    outVars.value.browserOut = getBrowserJSResult.value.browserOut;
    } else {
    // Execute Action: GetBrowser_Legacy
    getBrowser_LegacyVar.value = OutSystemsUIController.default.getBrowser_Legacy$Action(callContext);
    
    // Browser = GetBrowser_Legacy.Browser
    outVars.value.browserOut = getBrowser_LegacyVar.value.browserOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetBrowser$getBrowserJSResult", [{
    name: "Browser",
    attrName: "browserOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetBrowser$outVars", [{
    name: "Browser",
    attrName: "browserOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getBrowser$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getBrowser$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Browser: OS.DataConversion.JSNodeParamConverter.to(actionResults.browserOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetBrowser.GetBrowserJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Browser = OutSystems.OSUI.Utils.GetBrowser();
    };
    });
    
    define("OutSystemsUI.controller$GetBrowser_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getBrowser_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetBrowser_Legacy$vars"))());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetBrowser_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetBrowser", callContext);
    
    // Set UserAgent
    // UserAgent = ToLower
    vars.value.userAgentVar = OS.BuiltinFunctions.toLower(OS.BuiltinFunctions.getUserAgent());
    // Detect Browser
    if((((((((((((OS.BuiltinFunctions.index(vars.value.userAgentVar, "chrome", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "crios", 0, false, false) > -1)) && ((((((((((((((OS.BuiltinFunctions.index(vars.value.userAgentVar, "kindle", 0, false, false) === -1) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "silk", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kftt", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfot", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfjwa", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfjwi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfsowi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfthwa", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfthwi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfapwa", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfapwi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opr", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opera", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opios", 0, false, false) === -1))) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edge", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edgios", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edga", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edg/", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "samsungbrowser", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "yabrowser", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "miuibrowser", 0, false, false) === -1)))) {
    // Chrome
    // Browser = "chrome"
    outVars.value.browserOut = "chrome";
    } else {
    if(((((OS.BuiltinFunctions.index(vars.value.userAgentVar, "edge", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edgios", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edga", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "edg/", 0, false, false) > -1))) {
    // Edge
    // Browser = "edge"
    outVars.value.browserOut = "edge";
    } else {
    if(((OS.BuiltinFunctions.index(vars.value.userAgentVar, "firefox", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "fxios", 0, false, false) > -1))) {
    // Firefox
    // Browser = "firefox"
    outVars.value.browserOut = "firefox";
    } else {
    if((((((((((((((((((OS.BuiltinFunctions.index(vars.value.userAgentVar, "safari", 0, false, false) > -1) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "chrome", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opr", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opera", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opios", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kindle", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "silk", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kftt", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfot", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfjwa", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfjwi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfsowi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfthwa", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfthwi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfapwa", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfapwi", 0, false, false) === -1)) && (OS.BuiltinFunctions.index(vars.value.userAgentVar, "ucbrowser", 0, false, false) === -1))) {
    // Safari
    // Browser = "safari"
    outVars.value.browserOut = "safari";
    } else {
    if((((OS.BuiltinFunctions.index(vars.value.userAgentVar, "opr", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opera", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "opios", 0, false, false) > -1))) {
    // Opera
    // Browser = "opera"
    outVars.value.browserOut = "opera";
    } else {
    if(((OS.BuiltinFunctions.index(vars.value.userAgentVar, "trident", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "msie", 0, false, false) > -1))) {
    // IE
    // Browser = "ie"
    outVars.value.browserOut = "ie";
    } else {
    if((((((((((((OS.BuiltinFunctions.index(vars.value.userAgentVar, "kindle", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "silk", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kftt", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfot", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfjwa", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfjwi", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfsowi", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfthwa", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfthwi", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfapwa", 0, false, false) > -1)) || (OS.BuiltinFunctions.index(vars.value.userAgentVar, "kfapwi", 0, false, false) > -1))) {
    // Kindle
    // Browser = "kindle"
    outVars.value.browserOut = "kindle";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentVar, "samsungbrowser", 0, false, false) > -1)) {
    // Samsung Browser
    // Browser = "samsung"
    outVars.value.browserOut = "samsung";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentVar, "yabrowser", 0, false, false) > -1)) {
    // Yandex
    // Browser = "yandex"
    outVars.value.browserOut = "yandex";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentVar, "miuibrowser", 0, false, false) > -1)) {
    // MIUI Browser
    // Browser = "miui"
    outVars.value.browserOut = "miui";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentVar, "ucbrowser", 0, false, false) > -1)) {
    // UC Browser
    // Browser = "uc"
    outVars.value.browserOut = "uc";
    }
    
    }
    
    }
    
    }
    
    }
    
    }
    
    }
    
    }
    
    }
    
    }
    
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetBrowser_Legacy$vars", [{
    name: "UserAgent",
    attrName: "userAgentVar",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetBrowser_Legacy$outVars", [{
    name: "Browser",
    attrName: "browserOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getBrowser_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getBrowser_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Browser: OS.DataConversion.JSNodeParamConverter.to(actionResults.browserOut, OS.Types.Text)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$GetDeviceOrientation", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetDeviceOrientation.CheckDeviceJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$GetDeviceOrientation_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetDeviceOrientation_CheckDeviceJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getDeviceOrientation$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getDeviceOrientation_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkDeviceJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceOrientation$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkDeviceJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetDeviceOrientation_CheckDeviceJS, "CheckDevice", "GetDeviceOrientation", {
    Orientation: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceOrientation$checkDeviceJSResult"))();
    jsNodeResult.orientationOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Orientation, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Orientation = CheckDevice.Orientation
    outVars.value.orientationOut = checkDeviceJSResult.value.orientationOut;
    } else {
    // Execute Action: GetDeviceOrientation_Legacy
    getDeviceOrientation_LegacyVar.value = OutSystemsUIController.default.getDeviceOrientation_Legacy$Action(callContext);
    
    // Orientation = GetDeviceOrientation_Legacy.Orientation
    outVars.value.orientationOut = getDeviceOrientation_LegacyVar.value.orientationOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceOrientation$checkDeviceJSResult", [{
    name: "Orientation",
    attrName: "orientationOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceOrientation$outVars", [{
    name: "Orientation",
    attrName: "orientationOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getDeviceOrientation$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getDeviceOrientation$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Orientation: OS.DataConversion.JSNodeParamConverter.to(actionResults.orientationOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetDeviceOrientation.CheckDeviceJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Orientation = OutSystems.OSUI.Utils.DeviceDetection.GetDeviceOrientation();
    };
    });
    
    define("OutSystemsUI.controller$GetDeviceOrientation_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetDeviceOrientation_Legacy.CheckDeviceJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetDeviceOrientation_Legacy_CheckDeviceJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getDeviceOrientation_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkDeviceJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceOrientation_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetDeviceOrientation", callContext);
    
    checkDeviceJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetDeviceOrientation_Legacy_CheckDeviceJS, "CheckDevice", "GetDeviceOrientation_Legacy", {
    Orientation: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceOrientation_Legacy$checkDeviceJSResult"))();
    jsNodeResult.orientationOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Orientation, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Orientation = CheckDevice.Orientation
    outVars.value.orientationOut = checkDeviceJSResult.value.orientationOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceOrientation_Legacy$checkDeviceJSResult", [{
    name: "Orientation",
    attrName: "orientationOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceOrientation_Legacy$outVars", [{
    name: "Orientation",
    attrName: "orientationOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getDeviceOrientation_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getDeviceOrientation_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Orientation: OS.DataConversion.JSNodeParamConverter.to(actionResults.orientationOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetDeviceOrientation_Legacy.CheckDeviceJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var classList = document.body.classList;
    
    if(classList.contains("landscape")) {
        $parameters.Orientation = "landscape";
    } else if(classList.contains("portrait")) {
        $parameters.Orientation = "portrait";
    }
    };
    });
    
    define("OutSystemsUI.controller$GetDeviceType", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetDeviceType.CheckDeviceJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$GetDeviceType_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetDeviceType_CheckDeviceJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getDeviceType$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getDeviceType_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkDeviceJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceType$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkDeviceJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetDeviceType_CheckDeviceJS, "CheckDevice", "GetDeviceType", {
    Device: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceType$checkDeviceJSResult"))();
    jsNodeResult.deviceOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Device, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Device = CheckDevice.Device
    outVars.value.deviceOut = checkDeviceJSResult.value.deviceOut;
    } else {
    // Execute Action: GetDeviceType_Legacy
    getDeviceType_LegacyVar.value = OutSystemsUIController.default.getDeviceType_Legacy$Action(callContext);
    
    // Device = GetDeviceType_Legacy.Device
    outVars.value.deviceOut = getDeviceType_LegacyVar.value.deviceOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceType$checkDeviceJSResult", [{
    name: "Device",
    attrName: "deviceOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceType$outVars", [{
    name: "Device",
    attrName: "deviceOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getDeviceType$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getDeviceType$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Device: OS.DataConversion.JSNodeParamConverter.to(actionResults.deviceOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetDeviceType.CheckDeviceJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Device = OutSystems.OSUI.Utils.DeviceDetection.GetDeviceType();
    };
    });
    
    define("OutSystemsUI.controller$GetDeviceType_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetDeviceType_Legacy.CheckDeviceJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetDeviceType_Legacy_CheckDeviceJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getDeviceType_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkDeviceJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceType_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetDeviceType", callContext);
    
    checkDeviceJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetDeviceType_Legacy_CheckDeviceJS, "CheckDevice", "GetDeviceType_Legacy", {
    Device: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetDeviceType_Legacy$checkDeviceJSResult"))();
    jsNodeResult.deviceOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Device, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Device = CheckDevice.Device
    outVars.value.deviceOut = checkDeviceJSResult.value.deviceOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceType_Legacy$checkDeviceJSResult", [{
    name: "Device",
    attrName: "deviceOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetDeviceType_Legacy$outVars", [{
    name: "Device",
    attrName: "deviceOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getDeviceType_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getDeviceType_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Device: OS.DataConversion.JSNodeParamConverter.to(actionResults.deviceOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetDeviceType_Legacy.CheckDeviceJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var classList = document.body.classList;
    
    if(classList.contains("phone")) {
        $parameters.Device = "phone";
    } else if(classList.contains("tablet")) {
        $parameters.Device = "tablet";
    } else {
        $parameters.Device = "desktop";
    }
    };
    });
    
    define("OutSystemsUI.controller$GetECTURL", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getECTURL$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetECTURL$outVars"))());
    // URL
    // URL = "/ECT_Provider/WS_ECT.asmx"
    outVars.value.uRLOut = "/ECT_Provider/WS_ECT.asmx";
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetECTURL$outVars", [{
    name: "URL",
    attrName: "uRLOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getECTURL$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getECTURL$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    URL: OS.DataConversion.JSNodeParamConverter.to(actionResults.uRLOut, OS.Types.Text)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$GetIsTouch", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetIsTouch.SetIsTouchJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$GetIsTouch_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetIsTouch_SetIsTouchJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getIsTouch$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getIsTouch_LegacyVar = new OS.DataTypes.VariableHolder();
    var setIsTouchJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetIsTouch$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    setIsTouchJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetIsTouch_SetIsTouchJS, "SetIsTouch", "GetIsTouch", {
    IsTouch: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetIsTouch$setIsTouchJSResult"))();
    jsNodeResult.isTouchOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsTouch, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsTouch = SetIsTouch.IsTouch
    outVars.value.isTouchOut = setIsTouchJSResult.value.isTouchOut;
    } else {
    // Execute Action: GetIsTouch_Legacy
    getIsTouch_LegacyVar.value = OutSystemsUIController.default.getIsTouch_Legacy$Action(callContext);
    
    // IsTouch = GetIsTouch_Legacy.IsTouch
    outVars.value.isTouchOut = getIsTouch_LegacyVar.value.isTouchOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetIsTouch$setIsTouchJSResult", [{
    name: "IsTouch",
    attrName: "isTouchOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetIsTouch$outVars", [{
    name: "IsTouch",
    attrName: "isTouchOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getIsTouch$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getIsTouch$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsTouch: OS.DataConversion.JSNodeParamConverter.to(actionResults.isTouchOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetIsTouch.SetIsTouchJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.IsTouch = OutSystems.OSUI.Utils.DeviceDetection.IsTouch();
    };
    });
    
    define("OutSystemsUI.controller$GetIsTouch_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetIsTouch_Legacy.SetIsTouchJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetIsTouch_Legacy_SetIsTouchJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getIsTouch_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var setIsTouchJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetIsTouch_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetIsTouch", callContext);
    
    setIsTouchJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetIsTouch_Legacy_SetIsTouchJS, "SetIsTouch", "GetIsTouch_Legacy", {
    IsTouch: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetIsTouch_Legacy$setIsTouchJSResult"))();
    jsNodeResult.isTouchOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsTouch, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsTouch = SetIsTouch.IsTouch
    outVars.value.isTouchOut = setIsTouchJSResult.value.isTouchOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetIsTouch_Legacy$setIsTouchJSResult", [{
    name: "IsTouch",
    attrName: "isTouchOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetIsTouch_Legacy$outVars", [{
    name: "IsTouch",
    attrName: "isTouchOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getIsTouch_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getIsTouch_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsTouch: OS.DataConversion.JSNodeParamConverter.to(actionResults.isTouchOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetIsTouch_Legacy.SetIsTouchJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var body = document.body;
    var isTouch = false;
      
    function detectTouchscreen() {
      if (window.PointerEvent && ('maxTouchPoints' in navigator)) {
        // if Pointer Events are supported, just check maxTouchPoints
        if (navigator.maxTouchPoints > 0) {
          isTouch = true;
        }
      } else {
        // no Pointer Events...
        if (window.matchMedia && window.matchMedia("(any-pointer:coarse)").matches) {
          // check for any-pointer:coarse which mostly means touchscreen
          isTouch = true;
        } else if (window.TouchEvent || ('ontouchstart' in window)) {
          // last resort - check for exposed touch events API / event handler
          isTouch = true;
        }
      }
      
      return isTouch;
      
    }
    
    detectTouchscreen();
    $parameters.IsTouch = isTouch;
    };
    });
    
    define("OutSystemsUI.controller$GetNetworkStatus", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetNetworkStatus.CheckDeviceOnlineJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$GetNetworkStatus_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetNetworkStatus_CheckDeviceOnlineJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getNetworkStatus$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getNetworkStatus_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkDeviceOnlineJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkStatus$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkDeviceOnlineJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetNetworkStatus_CheckDeviceOnlineJS, "CheckDeviceOnline", "GetNetworkStatus", {
    NavigatorOnline: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkStatus$checkDeviceOnlineJSResult"))();
    jsNodeResult.navigatorOnlineOut = OS.DataConversion.JSNodeParamConverter.from($parameters.NavigatorOnline, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsOnline = CheckDeviceOnline.NavigatorOnline
    outVars.value.isOnlineOut = checkDeviceOnlineJSResult.value.navigatorOnlineOut;
    } else {
    // Execute Action: GetNetworkStatus_Legacy
    getNetworkStatus_LegacyVar.value = OutSystemsUIController.default.getNetworkStatus_Legacy$Action(callContext);
    
    // IsOnline = GetNetworkStatus_Legacy.IsOnline
    outVars.value.isOnlineOut = getNetworkStatus_LegacyVar.value.isOnlineOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkStatus$checkDeviceOnlineJSResult", [{
    name: "NavigatorOnline",
    attrName: "navigatorOnlineOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkStatus$outVars", [{
    name: "IsOnline",
    attrName: "isOnlineOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getNetworkStatus$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getNetworkStatus$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsOnline: OS.DataConversion.JSNodeParamConverter.to(actionResults.isOnlineOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetNetworkStatus.CheckDeviceOnlineJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.NavigatorOnline = OutSystems.OSUI.Utils.Network.IsOnline();
    };
    });
    
    define("OutSystemsUI.controller$GetNetworkStatus_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetNetworkStatus_Legacy.CheckDeviceOnlineJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetNetworkStatus_Legacy_CheckDeviceOnlineJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getNetworkStatus_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkDeviceOnlineJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkStatus_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetBrowser", callContext);
    
    checkDeviceOnlineJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetNetworkStatus_Legacy_CheckDeviceOnlineJS, "CheckDeviceOnline", "GetNetworkStatus_Legacy", {
    NavigatorOnline: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkStatus_Legacy$checkDeviceOnlineJSResult"))();
    jsNodeResult.navigatorOnlineOut = OS.DataConversion.JSNodeParamConverter.from($parameters.NavigatorOnline, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsOnline = CheckDeviceOnline.NavigatorOnline
    outVars.value.isOnlineOut = checkDeviceOnlineJSResult.value.navigatorOnlineOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkStatus_Legacy$checkDeviceOnlineJSResult", [{
    name: "NavigatorOnline",
    attrName: "navigatorOnlineOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkStatus_Legacy$outVars", [{
    name: "IsOnline",
    attrName: "isOnlineOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getNetworkStatus_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getNetworkStatus_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsOnline: OS.DataConversion.JSNodeParamConverter.to(actionResults.isOnlineOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetNetworkStatus_Legacy.CheckDeviceOnlineJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    // Uses navigator to check if device is online
    $parameters.NavigatorOnline = navigator.onLine;
    };
    });
    
    define("OutSystemsUI.controller$GetNetworkType", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetNetworkType.CheckNetworkTypeJS", "OutSystemsUI.controller$GetNetworkType_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetNetworkType_CheckNetworkTypeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getNetworkType$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var getNetworkType_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var checkNetworkTypeJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkType$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkNetworkTypeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetNetworkType_CheckNetworkTypeJS, "CheckNetworkType", "GetNetworkType", {
    NetworkType: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkType$checkNetworkTypeJSResult"))();
    jsNodeResult.networkTypeOut = OS.DataConversion.JSNodeParamConverter.from($parameters.NetworkType, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // NetworkType = CheckNetworkType.NetworkType
    outVars.value.networkTypeOut = checkNetworkTypeJSResult.value.networkTypeOut;
    } else {
    // Execute Action: GetNetworkType_Legacy
    getNetworkType_LegacyVar.value = OutSystemsUIController.default.getNetworkType_Legacy$Action(callContext);
    
    // NetworkType = GetNetworkType_Legacy.NetworkType
    outVars.value.networkTypeOut = getNetworkType_LegacyVar.value.networkTypeOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkType$checkNetworkTypeJSResult", [{
    name: "NetworkType",
    attrName: "networkTypeOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkType$outVars", [{
    name: "NetworkType",
    attrName: "networkTypeOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getNetworkType$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getNetworkType$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    NetworkType: OS.DataConversion.JSNodeParamConverter.to(actionResults.networkTypeOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetNetworkType.CheckNetworkTypeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.NetworkType = OutSystems.OSUI.Utils.Network.Type();
    };
    });
    
    define("OutSystemsUI.controller$GetNetworkType_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetNetworkType_Legacy.CheckNetworkTypeJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetNetworkType_Legacy_CheckNetworkTypeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getNetworkType_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkNetworkTypeJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkType_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetBrowser", callContext);
    
    checkNetworkTypeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetNetworkType_Legacy_CheckNetworkTypeJS, "CheckNetworkType", "GetNetworkType_Legacy", {
    NetworkType: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetNetworkType_Legacy$checkNetworkTypeJSResult"))();
    jsNodeResult.networkTypeOut = OS.DataConversion.JSNodeParamConverter.from($parameters.NetworkType, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // NetworkType = CheckNetworkType.NetworkType
    outVars.value.networkTypeOut = checkNetworkTypeJSResult.value.networkTypeOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkType_Legacy$checkNetworkTypeJSResult", [{
    name: "NetworkType",
    attrName: "networkTypeOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetNetworkType_Legacy$outVars", [{
    name: "NetworkType",
    attrName: "networkTypeOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getNetworkType_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getNetworkType_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    NetworkType: OS.DataConversion.JSNodeParamConverter.to(actionResults.networkTypeOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetNetworkType_Legacy.CheckNetworkTypeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    if (typeof navigator.connection !== "undefined") {
        //In a mobile device
        if(typeof navigator.connection.type !== "undefined"){
            $parameters.NetworkType = navigator.connection.type;
        } else {
            //In a web browser
            $parameters.NetworkType = "webbrowser"; 
        }
    } else {
        //In a web browser
        $parameters.NetworkType = "webbrowser";
    }
    };
    });
    
    define("OutSystemsUI.controller$GetOS", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetOS.GetOperatingSystemJS", "OutSystemsUI.controller$GetOS_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetOS_GetOperatingSystemJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getOS$Action = function (userAgentIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetOS$vars"))());
    vars.value.userAgentInLocal = userAgentIn;
    var getOS_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getOperatingSystemJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetOS$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    getOperatingSystemJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_GetOS_GetOperatingSystemJS, "GetOperatingSystem", "GetOS", {
    UserAgent: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.toLower(vars.value.userAgentInLocal), OS.Types.Text),
    OperatingSystem: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.GetOS$getOperatingSystemJSResult"))();
    jsNodeResult.operatingSystemOut = OS.DataConversion.JSNodeParamConverter.from($parameters.OperatingSystem, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // OS = GetOperatingSystem.OperatingSystem
    outVars.value.oSOut = getOperatingSystemJSResult.value.operatingSystemOut;
    } else {
    // Execute Action: GetOS_Legacy
    getOS_LegacyVar.value = OutSystemsUIController.default.getOS_Legacy$Action(vars.value.userAgentInLocal, callContext);
    
    // OS = GetOS_Legacy.OS
    outVars.value.oSOut = getOS_LegacyVar.value.oSOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetOS$vars", [{
    name: "UserAgent",
    attrName: "userAgentInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetOS$getOperatingSystemJSResult", [{
    name: "OperatingSystem",
    attrName: "operatingSystemOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetOS$outVars", [{
    name: "OS",
    attrName: "oSOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getOS$Action = function (userAgentIn) {
    userAgentIn = (userAgentIn === undefined) ? "" : userAgentIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getOS$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(userAgentIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    OS: OS.DataConversion.JSNodeParamConverter.to(actionResults.oSOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetOS.GetOperatingSystemJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.OperatingSystem = OutSystems.OSUI.Utils.DeviceDetection.GetOperatingSystem($parameters.UserAgent);
    };
    });
    
    define("OutSystemsUI.controller$GetOS_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetOS_Legacy.DetectIphoneXJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_GetOS_Legacy_DetectIphoneXJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.getOS_Legacy$Action = function (userAgentIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetOS_Legacy$vars"))());
    vars.value.userAgentInLocal = userAgentIn;
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.GetOS_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("GetOS", callContext);
    
    // UserAgent = ToLower
    vars.value.userAgentInLocal = OS.BuiltinFunctions.toLower(vars.value.userAgentInLocal);
    // Detect Device
    if((((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "ipad", 0, false, false) > -1) || (OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "iphone", 0, false, false) > -1)))) {
    // Ios
    // OS = "ios"
    outVars.value.oSOut = "ios";
    controller.safeExecuteJSNode(OutSystemsUI_controller_GetOS_Legacy_DetectIphoneXJS, "DetectIphoneX", "GetOS_Legacy", null, function ($parameters) {
    }, {}, {});
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "android", 0, false, false) > -1)) {
    // Android
    // OS = "android"
    outVars.value.oSOut = "android";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "windows", 0, false, false) > -1)) {
    // Windows
    // OS = "windows"
    outVars.value.oSOut = "windows";
    } else {
    if((OS.BuiltinFunctions.index(vars.value.userAgentInLocal, "mac", 0, false, false) > -1)) {
    // OSX
    // OS = "osx"
    outVars.value.oSOut = "osx";
    }
    
    }
    
    }
    
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetOS_Legacy$vars", [{
    name: "UserAgent",
    attrName: "userAgentInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.GetOS_Legacy$outVars", [{
    name: "OS",
    attrName: "oSOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.getOS_Legacy$Action = function (userAgentIn) {
    userAgentIn = (userAgentIn === undefined) ? "" : userAgentIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.getOS_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(userAgentIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    OS: OS.DataConversion.JSNodeParamConverter.to(actionResults.oSOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$GetOS_Legacy.DetectIphoneXJS", [], function () {
    return function ($actions, $roles, $public) {
    var body = document.querySelector("body");
    
    // detect iPhoneX
    function detectIphoneX() {
        // devices list and their screen sizes
        var devices = [
            
            // iPhoneX
            {width: 1125, height: 2436, description: "iphone x/xs"},
            {width: 828, height: 1792, description: "iphone xr"},
            {width: 750, height: 1624, description: "iphone xr scaled"},
            {width: 1242, height: 2688, description: "iphone xs max"},
            
            // iPhone12
            {width: 1170, height: 2532, description: "iphone 12"},
            {width: 1284, height: 2778, description: "iphone 12 pro max"},
            
            // iPhone13
            {width: 1170, height: 2532, description: "iphone 13"},
            {width: 1125, height: 2436, description: "iphone 13 mini"},
            {width: 1170, height: 2532, description: "iphone 13 pro"},
            {width: 1284, height: 2778, description: "iphone 13 pro max"},
        ];
        
        // get the device pixel ratio
        var ratio = window.devicePixelRatio || 1;
    
        // get the device screen dimensions
        var screen = {
            width : window.screen.width * ratio,
            height : window.screen.height * ratio
        };
    
        // check if the screen size matches any of the devices in the list
        for(var i = 0; i < devices.length; i++) {
            if(devices[i].width === screen.width && devices[i].height === screen.height) {
                window.iphoneX = true;
                break;
            }
        }
        
        if(window.iphoneX) {
            // get orientation and register an event to update it
            detectOrientation();
            window.addEventListener("orientationchange", function() {
                setTimeout(detectOrientation, 500);
            });
        }
    }
    
    // update orientation
    function detectOrientation() {
        // store the notch position value
        var notchPosition;
        
        if("orientation" in window) {
            // mobile browers
            if (window.orientation == 90) {
                notchPosition = "left";
            } else if (window.orientation == -90) {
                notchPosition = "right";
            } else {
                notchPosition = "up";
            }
        } else if ("orientation" in window.screen) {
            // webkit browsers
            if( window.screen.orientation.type === "landscape-primary") {
                notchPosition = "left";
            } else if( window.screen.orientation.type === "landscape-secondary") {
                notchPosition = "right";
            } else {
                notchPosition = "up";
            }
        } else if("mozOrientation" in window.screen) {
            // firefox browsers
            if( window.screen.mozOrientation === "landscape-primary") {
                notchPosition = "left";
            } else if( window.screen.mozOrientation === "landscape-secondary") {
                notchPosition = "right";
            } else {
                notchPosition = "up";
            }
        }
        
        window.notch = notchPosition;
        updateClasses();
    }
    
    function updateClasses() {
        // set the iphonex class on the body
        body.classList.add("iphonex");
        
        // override tablet detection on landscape mode
        if (window.notch == "left" || window.notch == "right") {
            body.classList.remove("tablet");
            body.classList.add("phone");
        }
    }
    
    // detect iPhoneX
    detectIphoneX();
    };
    });
    
    define("OutSystemsUI.controller$HasMasterDetail", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$HasMasterDetail.HasMasterDetailJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_HasMasterDetail_HasMasterDetailJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.hasMasterDetail$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_HasMasterDetail_HasMasterDetailJS, "HasMasterDetail", "HasMasterDetail", null, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.hasMasterDetail$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.hasMasterDetail$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$HasMasterDetail.HasMasterDetailJS", [], function () {
    return function ($actions, $roles, $public) {
    // detect if master detail is used
    OutSystems.OSUI.Utils.HasMasterDetail();
    };
    });
    
    define("OutSystemsUI.controller$HideHeader", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$HideHeader.SetHideHeaderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_HideHeader_SetHideHeaderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.hideHeader$Action = function (hideHeaderIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.HideHeader$vars"))());
    vars.value.hideHeaderInLocal = hideHeaderIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_HideHeader_SetHideHeaderJS, "SetHideHeader", "HideHeader", {
    HideHeader: OS.DataConversion.JSNodeParamConverter.to(vars.value.hideHeaderInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.HideHeader$vars", [{
    name: "HideHeader",
    attrName: "hideHeaderInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.hideHeader$Action = function (hideHeaderIn) {
    hideHeaderIn = (hideHeaderIn === undefined) ? false : hideHeaderIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.hideHeader$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(hideHeaderIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$HideHeader.SetHideHeaderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Utils.LayoutPrivate.HideHeader($parameters.HideHeader);
    };
    });
    
    define("OutSystemsUI.controller$InlineSVGChangeTextProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$InlineSVGChangeTextProperty.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_InlineSVGChangeTextProperty_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.inlineSVGChangeTextProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.InlineSVGChangeTextProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_InlineSVGChangeTextProperty_ChangeTextPropertyJS, "ChangeTextProperty", "InlineSVGChangeTextProperty", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.InlineSVGChangeTextProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.inlineSVGChangeTextProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.inlineSVGChangeTextProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$InlineSVGChangeTextProperty.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.InlineSvgAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$InlineSVGCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$InlineSVGCreate.CreateJS", "OutSystemsUI.model$InlineSVG_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_InlineSVGCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.inlineSVGCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.InlineSVGCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_InlineSVGCreate_CreateJS, "Create", "InlineSVGCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.InlineSVGCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.InlineSVG_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.InlineSVG_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.inlineSVGCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.InlineSVG_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.inlineSVGCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$InlineSVGCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.InlineSvgAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$InlineSVGDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$InlineSVGDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_InlineSVGDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.inlineSVGDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.InlineSVGDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_InlineSVGDestroy_DestroyJS, "Destroy", "InlineSVGDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.InlineSVGDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.inlineSVGDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.inlineSVGDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$InlineSVGDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.InlineSvgAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$InlineSVGInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$InlineSVGInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_InlineSVGInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.inlineSVGInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.InlineSVGInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_InlineSVGInitialize_InitializeJS, "Initialize", "InlineSVGInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.InlineSVGInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.inlineSVGInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.inlineSVGInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$InlineSVGInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.InlineSvgAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$InlineSVGRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$InlineSVGRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_InlineSVGRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.inlineSVGRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.InlineSVGRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_InlineSVGRegisterCallback_RegisterCallbackJS, "RegisterCallback", "InlineSVGRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.InlineSVGRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.inlineSVGRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.inlineSVGRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$InlineSVGRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.InlineSvgAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$IsDesktop", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsDesktop.GetIsDesktopJS", "OutSystemsUI.controller$IsDesktop_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsDesktop_GetIsDesktopJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isDesktop$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var isDesktop_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var getIsDesktopJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsDesktop$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    getIsDesktopJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsDesktop_GetIsDesktopJS, "GetIsDesktop", "IsDesktop", {
    IsDesktop: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsDesktop$getIsDesktopJSResult"))();
    jsNodeResult.isDesktopOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsDesktop, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsDesktop = GetIsDesktop.IsDesktop
    outVars.value.isDesktopOut = getIsDesktopJSResult.value.isDesktopOut;
    } else {
    // Execute Action: IsDesktop_Legacy
    isDesktop_LegacyVar.value = OutSystemsUIController.default.isDesktop_Legacy$Action(callContext);
    
    // IsDesktop = IsDesktop_Legacy.IsDesktop
    outVars.value.isDesktopOut = isDesktop_LegacyVar.value.isDesktopOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsDesktop$getIsDesktopJSResult", [{
    name: "IsDesktop",
    attrName: "isDesktopOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsDesktop$outVars", [{
    name: "IsDesktop",
    attrName: "isDesktopOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isDesktop$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isDesktop$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsDesktop: OS.DataConversion.JSNodeParamConverter.to(actionResults.isDesktopOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsDesktop.GetIsDesktopJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.IsDesktop = OutSystems.OSUI.Utils.DeviceDetection.IsDesktop();
    };
    });
    
    define("OutSystemsUI.controller$IsDesktop_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetDeviceType_Legacy", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isDesktop_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var getDeviceType_LegacyVar = new OS.DataTypes.VariableHolder();
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsDesktop_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsDesktop", callContext);
    
    // Execute Action: GetDeviceType_Legacy
    getDeviceType_LegacyVar.value = OutSystemsUIController.default.getDeviceType_Legacy$Action(callContext);
    
    // IsDesktop = GetDeviceType_Legacy.Device = "desktop"
    outVars.value.isDesktopOut = (getDeviceType_LegacyVar.value.deviceOut === "desktop");
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsDesktop_Legacy$outVars", [{
    name: "IsDesktop",
    attrName: "isDesktopOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isDesktop_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isDesktop_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsDesktop: OS.DataConversion.JSNodeParamConverter.to(actionResults.isDesktopOut, OS.Types.Boolean)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$IsLayoutNative", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsLayoutNative.CheckIsLayoutNativeJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$IsLayoutNative_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsLayoutNative_CheckIsLayoutNativeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isLayoutNative$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var isLayoutNative_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkIsLayoutNativeJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsLayoutNative$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkIsLayoutNativeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsLayoutNative_CheckIsLayoutNativeJS, "CheckIsLayoutNative", "IsLayoutNative", {
    IsNative: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsLayoutNative$checkIsLayoutNativeJSResult"))();
    jsNodeResult.isNativeOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsNative, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsNative = CheckIsLayoutNative.IsNative
    outVars.value.isNativeOut = checkIsLayoutNativeJSResult.value.isNativeOut;
    } else {
    // Execute Action: IsLayoutNative_Legacy
    isLayoutNative_LegacyVar.value = OutSystemsUIController.default.isLayoutNative_Legacy$Action(callContext);
    
    // IsNative = IsLayoutNative_Legacy.IsNative
    outVars.value.isNativeOut = isLayoutNative_LegacyVar.value.isNativeOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsLayoutNative$checkIsLayoutNativeJSResult", [{
    name: "IsNative",
    attrName: "isNativeOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsLayoutNative$outVars", [{
    name: "IsNative",
    attrName: "isNativeOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isLayoutNative$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isLayoutNative$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsNative: OS.DataConversion.JSNodeParamConverter.to(actionResults.isNativeOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsLayoutNative.CheckIsLayoutNativeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.IsNative = OutSystems.OSUI.Utils.DeviceDetection.CheckIsLayoutNative();
    };
    });
    
    define("OutSystemsUI.controller$IsLayoutNative_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsLayoutNative_Legacy.CheckIsWebAppJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsLayoutNative_Legacy_CheckIsWebAppJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isLayoutNative_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkIsWebAppJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsLayoutNative_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsLayoutNative", callContext);
    
    checkIsWebAppJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsLayoutNative_Legacy_CheckIsWebAppJS, "CheckIsWebApp", "IsLayoutNative_Legacy", {
    IsNative: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsLayoutNative_Legacy$checkIsWebAppJSResult"))();
    jsNodeResult.isNativeOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsNative, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsNative = CheckIsWebApp.IsNative
    outVars.value.isNativeOut = checkIsWebAppJSResult.value.isNativeOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsLayoutNative_Legacy$checkIsWebAppJSResult", [{
    name: "IsNative",
    attrName: "isNativeOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsLayoutNative_Legacy$outVars", [{
    name: "IsNative",
    attrName: "isNativeOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isLayoutNative_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isLayoutNative_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsNative: OS.DataConversion.JSNodeParamConverter.to(actionResults.isNativeOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsLayoutNative_Legacy.CheckIsWebAppJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var layout = document.body.querySelector('.layout');
    
    if(layout) {
        var isNative = layout.classList.contains('layout-native');
    
        if(isNative) {
            $parameters.IsNative = true;
        } else {
            $parameters.IsNative = false;
        }
    }
    
    };
    });
    
    define("OutSystemsUI.controller$IsMenuDraggable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsMenuDraggable.CheckIsMenuDraggableJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsMenuDraggable_CheckIsMenuDraggableJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isMenuDraggable$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkIsMenuDraggableJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsMenuDraggable$outVars"))());
    checkIsMenuDraggableJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsMenuDraggable_CheckIsMenuDraggableJS, "CheckIsMenuDraggable", "IsMenuDraggable", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsMenuDraggable$checkIsMenuDraggableJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(checkIsMenuDraggableJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    // AddDrag = If
    outVars.value.addDragOut = (((jSONDeserializeReturnMessageVar.value.dataOut.valueAttr === "true")) ? (true) : (false));
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsMenuDraggable$checkIsMenuDraggableJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsMenuDraggable$outVars", [{
    name: "AddDrag",
    attrName: "addDragOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.isMenuDraggable$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isMenuDraggable$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    AddDrag: OS.DataConversion.JSNodeParamConverter.to(actionResults.addDragOut, OS.Types.Boolean),
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsMenuDraggable.CheckIsMenuDraggableJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.IsMenuDraggable();
    };
    });
    
    define("OutSystemsUI.controller$IsPhone", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsPhone.CheckIsPhoneJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$IsPhone_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsPhone_CheckIsPhoneJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isPhone$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var isPhone_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkIsPhoneJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsPhone$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkIsPhoneJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsPhone_CheckIsPhoneJS, "CheckIsPhone", "IsPhone", {
    IsPhone: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsPhone$checkIsPhoneJSResult"))();
    jsNodeResult.isPhoneOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsPhone, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsPhone = CheckIsPhone.IsPhone
    outVars.value.isPhoneOut = checkIsPhoneJSResult.value.isPhoneOut;
    } else {
    // Execute Action: IsPhone_Legacy
    isPhone_LegacyVar.value = OutSystemsUIController.default.isPhone_Legacy$Action(callContext);
    
    // IsPhone = IsPhone_Legacy.IsPhone
    outVars.value.isPhoneOut = isPhone_LegacyVar.value.isPhoneOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsPhone$checkIsPhoneJSResult", [{
    name: "IsPhone",
    attrName: "isPhoneOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsPhone$outVars", [{
    name: "IsPhone",
    attrName: "isPhoneOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isPhone$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isPhone$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsPhone: OS.DataConversion.JSNodeParamConverter.to(actionResults.isPhoneOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsPhone.CheckIsPhoneJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.IsPhone = OutSystems.OSUI.Utils.DeviceDetection.IsPhone();
    };
    });
    
    define("OutSystemsUI.controller$IsPhone_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.controller$GetDeviceType_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isPhone_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var getDeviceType_LegacyVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsPhone_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsPhone", callContext);
    
    // Execute Action: GetDeviceType_Legacy
    getDeviceType_LegacyVar.value = OutSystemsUIController.default.getDeviceType_Legacy$Action(callContext);
    
    // IsPhone = GetDeviceType_Legacy.Device = "phone"
    outVars.value.isPhoneOut = (getDeviceType_LegacyVar.value.deviceOut === "phone");
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsPhone_Legacy$outVars", [{
    name: "IsPhone",
    attrName: "isPhoneOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isPhone_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isPhone_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsPhone: OS.DataConversion.JSNodeParamConverter.to(actionResults.isPhoneOut, OS.Types.Boolean)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$IsRTL", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsRTL.CheckRTLJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.controller$IsRTL_Legacy"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsRTL_CheckRTLJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isRTL$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var isRTL_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkRTLJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRTL$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    // Retunrs the value of IsRTL
    checkRTLJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsRTL_CheckRTLJS, "CheckRTL", "IsRTL", {
    RTL: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRTL$checkRTLJSResult"))();
    jsNodeResult.rTLOut = OS.DataConversion.JSNodeParamConverter.from($parameters.RTL, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsRTL = CheckRTL.RTL
    outVars.value.isRTLOut = checkRTLJSResult.value.rTLOut;
    } else {
    // Execute Action: IsRTL_Legacy
    isRTL_LegacyVar.value = OutSystemsUIController.default.isRTL_Legacy$Action(callContext);
    
    // IsRTL = IsRTL_Legacy.IsRTL
    outVars.value.isRTLOut = isRTL_LegacyVar.value.isRTLOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRTL$checkRTLJSResult", [{
    name: "RTL",
    attrName: "rTLOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRTL$outVars", [{
    name: "IsRTL",
    attrName: "isRTLOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isRTL$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isRTL$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsRTL: OS.DataConversion.JSNodeParamConverter.to(actionResults.isRTLOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsRTL.CheckRTLJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.RTL = OutSystems.OSUI.Utils.GetIsRTL();
    };
    });
    
    define("OutSystemsUI.controller$IsRTL_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsRTL_Legacy.CheckRTLJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsRTL_Legacy_CheckRTLJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isRTL_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkRTLJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRTL_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsRTL", callContext);
    
    // Retunrs the value of IsRTL
    checkRTLJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsRTL_Legacy_CheckRTLJS, "CheckRTL", "IsRTL_Legacy", {
    RTL: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRTL_Legacy$checkRTLJSResult"))();
    jsNodeResult.rTLOut = OS.DataConversion.JSNodeParamConverter.from($parameters.RTL, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsRTL = CheckRTL.RTL
    outVars.value.isRTLOut = checkRTLJSResult.value.rTLOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRTL_Legacy$checkRTLJSResult", [{
    name: "RTL",
    attrName: "rTLOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRTL_Legacy$outVars", [{
    name: "IsRTL",
    attrName: "isRTLOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isRTL_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isRTL_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsRTL: OS.DataConversion.JSNodeParamConverter.to(actionResults.isRTLOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsRTL_Legacy.CheckRTLJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.RTL = document.querySelector('.is-rtl') ? true : false;
    };
    });
    
    define("OutSystemsUI.controller$IsRunningAsPWA", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsRunningAsPWA.IsRunningAsPWAJS", "OutSystemsUI.controller$IsRunningAsPWA_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsRunningAsPWA_IsRunningAsPWAJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isRunningAsPWA$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var isRunningAsPWA_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var isRunningAsPWAJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRunningAsPWA$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    isRunningAsPWAJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsRunningAsPWA_IsRunningAsPWAJS, "IsRunningAsPWA", "IsRunningAsPWA", {
    isStandalone: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRunningAsPWA$isRunningAsPWAJSResult"))();
    jsNodeResult.isStandaloneOut = OS.DataConversion.JSNodeParamConverter.from($parameters.isStandalone, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsStandalone = IsRunningAsPWA.isStandalone
    outVars.value.isStandaloneOut = isRunningAsPWAJSResult.value.isStandaloneOut;
    } else {
    // Execute Action: IsRunningAsPWA_Legacy
    isRunningAsPWA_LegacyVar.value = OutSystemsUIController.default.isRunningAsPWA_Legacy$Action(callContext);
    
    // IsStandalone = IsRunningAsPWA_Legacy.IsStandalone
    outVars.value.isStandaloneOut = isRunningAsPWA_LegacyVar.value.isStandaloneOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRunningAsPWA$isRunningAsPWAJSResult", [{
    name: "isStandalone",
    attrName: "isStandaloneOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRunningAsPWA$outVars", [{
    name: "IsStandalone",
    attrName: "isStandaloneOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isRunningAsPWA$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isRunningAsPWA$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsStandalone: OS.DataConversion.JSNodeParamConverter.to(actionResults.isStandaloneOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsRunningAsPWA.IsRunningAsPWAJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.isStandalone =  OutSystems.OSUI.Utils.DeviceDetection.IsRunningAsPWA();
    };
    });
    
    define("OutSystemsUI.controller$IsRunningAsPWA_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsRunningAsPWA_Legacy.IsRunningAsPWAJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsRunningAsPWA_Legacy_IsRunningAsPWAJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isRunningAsPWA_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var isRunningAsPWAJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRunningAsPWA_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsRunningAsPWA", callContext);
    
    isRunningAsPWAJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsRunningAsPWA_Legacy_IsRunningAsPWAJS, "IsRunningAsPWA", "IsRunningAsPWA_Legacy", {
    isStandalone: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsRunningAsPWA_Legacy$isRunningAsPWAJSResult"))();
    jsNodeResult.isStandaloneOut = OS.DataConversion.JSNodeParamConverter.from($parameters.isStandalone, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsStandalone = IsRunningAsPWA.isStandalone
    outVars.value.isStandaloneOut = isRunningAsPWAJSResult.value.isStandaloneOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRunningAsPWA_Legacy$isRunningAsPWAJSResult", [{
    name: "isStandalone",
    attrName: "isStandaloneOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsRunningAsPWA_Legacy$outVars", [{
    name: "IsStandalone",
    attrName: "isStandaloneOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isRunningAsPWA_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isRunningAsPWA_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsStandalone: OS.DataConversion.JSNodeParamConverter.to(actionResults.isStandaloneOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsRunningAsPWA_Legacy.IsRunningAsPWAJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    if (window.matchMedia && (window.matchMedia('(display-mode: standalone)').matches) || window.navigator.standalone === true) {
        $parameters.isStandalone = true;
    }
    else {
        $parameters.isStandalone = false;
    }
    };
    });
    
    define("OutSystemsUI.controller$IsTablet", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsTablet.CheckIsTabletJS", "OutSystemsUI.controller$IsTablet_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsTablet_CheckIsTabletJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isTablet$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var isTablet_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var checkIsTabletJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsTablet$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkIsTabletJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsTablet_CheckIsTabletJS, "CheckIsTablet", "IsTablet", {
    IsTablet: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsTablet$checkIsTabletJSResult"))();
    jsNodeResult.isTabletOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsTablet, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsTablet = CheckIsTablet.IsTablet
    outVars.value.isTabletOut = checkIsTabletJSResult.value.isTabletOut;
    } else {
    // Execute Action: IsTablet_Legacy
    isTablet_LegacyVar.value = OutSystemsUIController.default.isTablet_Legacy$Action(callContext);
    
    // IsTablet = IsTablet_Legacy.IsTablet
    outVars.value.isTabletOut = isTablet_LegacyVar.value.isTabletOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsTablet$checkIsTabletJSResult", [{
    name: "IsTablet",
    attrName: "isTabletOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsTablet$outVars", [{
    name: "IsTablet",
    attrName: "isTabletOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isTablet$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isTablet$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsTablet: OS.DataConversion.JSNodeParamConverter.to(actionResults.isTabletOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsTablet.CheckIsTabletJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.IsTablet = OutSystems.OSUI.Utils.DeviceDetection.IsTablet();
    };
    });
    
    define("OutSystemsUI.controller$IsTablet_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$GetDeviceType_Legacy", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isTablet_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var getDeviceType_LegacyVar = new OS.DataTypes.VariableHolder();
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsTablet_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsTablet", callContext);
    
    // Execute Action: GetDeviceType_Legacy
    getDeviceType_LegacyVar.value = OutSystemsUIController.default.getDeviceType_Legacy$Action(callContext);
    
    // IsTablet = GetDeviceType_Legacy.Device = "tablet"
    outVars.value.isTabletOut = (getDeviceType_LegacyVar.value.deviceOut === "tablet");
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsTablet_Legacy$outVars", [{
    name: "IsTablet",
    attrName: "isTabletOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isTablet_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isTablet_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsTablet: OS.DataConversion.JSNodeParamConverter.to(actionResults.isTabletOut, OS.Types.Boolean)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$IsWebApp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsWebApp.CheckIsWebAppJS", "OutSystemsUI.controller$IsWebApp_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsWebApp_CheckIsWebAppJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isWebApp$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var isWebApp_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var checkIsWebAppJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsWebApp$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    checkIsWebAppJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsWebApp_CheckIsWebAppJS, "CheckIsWebApp", "IsWebApp", {
    IsWebApp: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsWebApp$checkIsWebAppJSResult"))();
    jsNodeResult.isWebAppOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsWebApp, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsWebApp = CheckIsWebApp.IsWebApp
    outVars.value.isWebAppOut = checkIsWebAppJSResult.value.isWebAppOut;
    } else {
    // Execute Action: IsWebApp_Legacy
    isWebApp_LegacyVar.value = OutSystemsUIController.default.isWebApp_Legacy$Action(callContext);
    
    // IsWebApp = IsWebApp_Legacy.IsWebApp
    outVars.value.isWebAppOut = isWebApp_LegacyVar.value.isWebAppOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsWebApp$checkIsWebAppJSResult", [{
    name: "IsWebApp",
    attrName: "isWebAppOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsWebApp$outVars", [{
    name: "IsWebApp",
    attrName: "isWebAppOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isWebApp$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isWebApp$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsWebApp: OS.DataConversion.JSNodeParamConverter.to(actionResults.isWebAppOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsWebApp.CheckIsWebAppJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.IsWebApp = OutSystems.OSUI.Utils.DeviceDetection.IsWebApp();
    };
    });
    
    define("OutSystemsUI.controller$IsWebApp_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$IsWebApp_Legacy.CheckIsWebAppJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_IsWebApp_Legacy_CheckIsWebAppJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.isWebApp_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var checkIsWebAppJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.IsWebApp_Legacy$outVars"))());
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("IsWebApp", callContext);
    
    checkIsWebAppJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_IsWebApp_Legacy_CheckIsWebAppJS, "CheckIsWebApp", "IsWebApp_Legacy", {
    IsWebApp: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.IsWebApp_Legacy$checkIsWebAppJSResult"))();
    jsNodeResult.isWebAppOut = OS.DataConversion.JSNodeParamConverter.from($parameters.IsWebApp, OS.Types.Boolean);
    return jsNodeResult;
    }, {}, {});
    // IsWebApp = CheckIsWebApp.IsWebApp
    outVars.value.isWebAppOut = checkIsWebAppJSResult.value.isWebAppOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsWebApp_Legacy$checkIsWebAppJSResult", [{
    name: "IsWebApp",
    attrName: "isWebAppOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.IsWebApp_Legacy$outVars", [{
    name: "IsWebApp",
    attrName: "isWebAppOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.isWebApp_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.isWebApp_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    IsWebApp: OS.DataConversion.JSNodeParamConverter.to(actionResults.isWebAppOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$IsWebApp_Legacy.CheckIsWebAppJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var layout = document.body.querySelector('.layout');
    
    if(layout) {
        var isNative = layout.classList.contains('layout-native');
        var isNotOldNativeLayouts = document.querySelector('.active-screen .layout.layout-top') || document.querySelector('.active-screen .layout.layout-side') || document.querySelector('.active-screen .layout.blank') || document.querySelector('.active-screen .layout.layout-blank');
        
        if(isNotOldNativeLayouts && !isNative) {
                $parameters.IsWebApp = true;
        }
    }
    
    };
    });
    
    define("OutSystemsUI.controller$LayoutDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$LayoutDestroy.DestroyLayoutJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_LayoutDestroy_DestroyLayoutJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.layoutDestroy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_LayoutDestroy_DestroyLayoutJS, "DestroyLayout", "LayoutDestroy", null, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.layoutDestroy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.layoutDestroy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$LayoutDestroy.DestroyLayoutJS", [], function () {
    return function ($actions, $roles, $public) {
    OutSystems.OSUI.Utils.LayoutPrivate.Dispose();
    };
    });
    
    define("OutSystemsUI.controller$LayoutReady", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$LayoutReady.RunOnStartJS", "OutSystemsUI.controller$LayoutReady.FixForRenderingIssuesJS", "OutSystemsUI.controller$LayoutReady.SetBodyCssVariablesJS", "OutSystemsUI.controller$LayoutReady.SetDeprecatedSubmenuEventsJS", "OutSystemsUI.controller$LayoutReady.SetExpandableExceptionsJS", "OutSystemsUI.controller$FixInputs", "OutSystemsUI.controller$IsRunningAsPWA", "OutSystemsUI.controller$IsWebApp", "OutSystemsUI.controller$DeviceDetection", "OutSystemsUI.controller$ECTCall", "OutSystemsUI.controller$WCAGMetaTag"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_LayoutReady_RunOnStartJS, OutSystemsUI_controller_LayoutReady_FixForRenderingIssuesJS, OutSystemsUI_controller_LayoutReady_SetBodyCssVariablesJS, OutSystemsUI_controller_LayoutReady_SetDeprecatedSubmenuEventsJS, OutSystemsUI_controller_LayoutReady_SetExpandableExceptionsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.layoutReady$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.LayoutReady$vars"))());
    // Init IsWebApp and IsPWA
    // IsWebApp = IsWebApp()
    vars.value.isWebAppVar = OutSystemsUIController.default.isWebApp$Action(callContext).isWebAppOut;
    // IsPWA = IsRunningAsPWA()
    vars.value.isPWAVar = OutSystemsUIController.default.isRunningAsPWA$Action(callContext).isStandaloneOut;
    controller.safeExecuteJSNode(OutSystemsUI_controller_LayoutReady_RunOnStartJS, "RunOnStart", "LayoutReady", {
    IsPWA: OS.DataConversion.JSNodeParamConverter.to(vars.value.isPWAVar, OS.Types.Boolean),
    URL: OS.DataConversion.JSNodeParamConverter.to(OS.Navigation.VersionedURL.getVersionedUrl("scripts/OutSystemsUI.MWO.js"), OS.Types.Text),
    IsWebApp: OS.DataConversion.JSNodeParamConverter.to(vars.value.isWebAppVar, OS.Types.Boolean)
    }, function ($parameters) {
    }, {
    DeviceDetection: OutSystemsUIController.default.clientActionProxies.deviceDetection$Action,
    ECTCall: OutSystemsUIController.default.clientActionProxies.eCTCall$Action,
    WCAGMetaTag: OutSystemsUIController.default.clientActionProxies.wCAGMetaTag$Action,
    RequireScript: OS.SystemActions.requireScript
    }, {});
    controller.safeExecuteJSNode(OutSystemsUI_controller_LayoutReady_SetExpandableExceptionsJS, "SetExpandableExceptions", "LayoutReady", null, function ($parameters) {
    }, {}, {});
    if((vars.value.isWebAppVar)) {
    // Execute Action: FixInputs
    OutSystemsUIController.default.fixInputs$Action(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_LayoutReady_SetDeprecatedSubmenuEventsJS, "SetDeprecatedSubmenuEvents", "LayoutReady", null, function ($parameters) {
    }, {}, {});
    } else {
    controller.safeExecuteJSNode(OutSystemsUI_controller_LayoutReady_FixForRenderingIssuesJS, "FixForRenderingIssues", "LayoutReady", null, function ($parameters) {
    }, {}, {});
    }
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_LayoutReady_SetBodyCssVariablesJS, "SetBodyCssVariables", "LayoutReady", null, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.LayoutReady$vars", [{
    name: "IsWebApp",
    attrName: "isWebAppVar",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "IsPWA",
    attrName: "isPWAVar",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.layoutReady$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.layoutReady$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$LayoutReady.RunOnStartJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    // Actions that run only once per application start
    
    if(window.applicationStarted === undefined) {
        $actions.DeviceDetection($parameters.IsWebApp);
    
        if($parameters.IsWebApp || $parameters.IsPWA) {
            $actions.ECTCall();  
            $actions.WCAGMetaTag();
        }
        
        // Call the "Built with OutSystems" label for Reactive Web apps
        var showMWO = false;
        
        try {
            showMWO = $public.Branding.showOutSystemsWatermark();
        } catch(e) {
            
        }
        
        $actions.RequireScript($parameters.URL).then(function(){
            if(showMWO && $parameters.IsWebApp) {
                osui.StartMWO();
            }
        });
        
        window.applicationStarted = true;
    }
    };
    });
    define("OutSystemsUI.controller$LayoutReady.FixForRenderingIssuesJS", [], function () {
    return function ($actions, $roles, $public) {
    // Simulate scroll to avoid rendering issues on WebView (replicated on Tablet devices)
    var docElem = document.documentElement;
    
    docElem.scrollLeft = 2;
    
    setTimeout(function(){ 
        docElem.scrollLeft = 0;
    }, 100);
    };
    });
    define("OutSystemsUI.controller$LayoutReady.SetBodyCssVariablesJS", [], function () {
    return function ($actions, $roles, $public) {
    OutSystems.OSUI.Utils.LayoutPrivate.CssBodyVariables.Set()
    };
    });
    define("OutSystemsUI.controller$LayoutReady.SetDeprecatedSubmenuEventsJS", [], function () {
    return function ($actions, $roles, $public) {
    // API to set the legacy code to support the DEPRECATED_Submenu
    OutSystems.OSUI.Utils.LayoutPrivate.CloseDeprecatedSubmenu.Set();
    };
    });
    define("OutSystemsUI.controller$LayoutReady.SetExpandableExceptionsJS", [], function () {
    return function ($actions, $roles, $public) {
    OutSystems.OSUI.Utils.Application.SetExpandableExceptions();
    };
    });
    
    define("OutSystemsUI.controller$ListItemHint", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ListItemHint.ListItemAnimateJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ListItemHint_ListItemAnimateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.listItemHint$Action = function (listIdIn, hasLeftActionIn, hasRightActionIn, animationTimeIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ListItemHint$vars"))());
    vars.value.listIdInLocal = listIdIn;
    vars.value.hasLeftActionInLocal = hasLeftActionIn;
    vars.value.hasRightActionInLocal = hasRightActionIn;
    vars.value.animationTimeInLocal = animationTimeIn;
    var listItemAnimateJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ListItemHint$outVars"))());
    listItemAnimateJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ListItemHint_ListItemAnimateJS, "ListItemAnimate", "ListItemHint", {
    AnimationTime: OS.DataConversion.JSNodeParamConverter.to(vars.value.animationTimeInLocal, OS.Types.Decimal),
    ListId: OS.DataConversion.JSNodeParamConverter.to(vars.value.listIdInLocal, OS.Types.Text),
    HasRightAction: OS.DataConversion.JSNodeParamConverter.to(vars.value.hasRightActionInLocal, OS.Types.Boolean),
    HasLeftAction: OS.DataConversion.JSNodeParamConverter.to(vars.value.hasLeftActionInLocal, OS.Types.Boolean),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ListItemHint$listItemAnimateJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(listItemAnimateJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ListItemHint$vars", [{
    name: "ListId",
    attrName: "listIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "HasLeftAction",
    attrName: "hasLeftActionInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "HasRightAction",
    attrName: "hasRightActionInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "AnimationTime",
    attrName: "animationTimeInLocal",
    mandatory: true,
    dataType: OS.Types.Decimal,
    defaultValue: function () {
    return OS.DataTypes.Decimal.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ListItemHint$listItemAnimateJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ListItemHint$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.listItemHint$Action = function (listIdIn, hasLeftActionIn, hasRightActionIn, animationTimeIn) {
    listIdIn = (listIdIn === undefined) ? "" : listIdIn;
    hasLeftActionIn = (hasLeftActionIn === undefined) ? false : hasLeftActionIn;
    hasRightActionIn = (hasRightActionIn === undefined) ? false : hasRightActionIn;
    animationTimeIn = (animationTimeIn === undefined) ? OS.DataTypes.Decimal.defaultValue : animationTimeIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.listItemHint$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(listIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(hasLeftActionIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(hasRightActionIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(animationTimeIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ListItemHint.ListItemAnimateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.ListItemAnimate($parameters.ListId,$parameters.HasLeftAction,$parameters.HasRightAction,$parameters.AnimationTime);
    };
    });
    
    define("OutSystemsUI.controller$LoadOutSystemsUIScript", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$LoadOutSystemsUIScript.RequireOSUIJS", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_LoadOutSystemsUIScript_RequireOSUIJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.loadOutSystemsUIScript$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var requireOSUIJSResult = new OS.DataTypes.VariableHolder();
    return OS.Flow.executeAsyncFlow(function () {
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Is Script Loaded?
    return OS.Flow.executeSequence(function () {
    if((!(checkOutSystemsUIScriptVar.value.isLoadedOut))) {
    // Script to require the OutsystemsUI.js
    return controller.safeExecuteAsyncJSNode(OutSystemsUI_controller_LoadOutSystemsUIScript_RequireOSUIJS, "RequireOSUI", "LoadOutSystemsUIScript", {
    URL: OS.DataConversion.JSNodeParamConverter.to(OS.Navigation.VersionedURL.getVersionedUrl("scripts/OutSystemsUI.OutSystemsUI.js"), OS.Types.Text),
    Success: OS.DataConversion.JSNodeParamConverter.to(false, OS.Types.Boolean)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.LoadOutSystemsUIScript$requireOSUIJSResult"))();
    jsNodeResult.successOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Success, OS.Types.Boolean);
    return jsNodeResult;
    }, {
    RequireScript: OS.SystemActions.requireScript
    }, {}).then(function (results) {
    requireOSUIJSResult.value = results;
    });
    }
    
    });
    }).then(function () {
    return ;
    });
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.LoadOutSystemsUIScript$requireOSUIJSResult", [{
    name: "Success",
    attrName: "successOut",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.loadOutSystemsUIScript$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.loadOutSystemsUIScript$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$LoadOutSystemsUIScript.RequireOSUIJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    return new Promise(function ($resolve, $reject) {
    // Require the OutsystemsUI.js
    $actions.RequireScript($parameters.URL).then(function(){    
        $parameters.Success = true;
    }).catch(function(e){
        $parameters.Success = false;
        console.warn('The OutSystemsUI.js wasn\'t successfully required');
    }).finally(function(){
        $resolve();
    })
    
    });
    };
    });
    
    define("OutSystemsUI.controller$LogEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$LogEvent.LogMessageJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_LogEvent_LogMessageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.logEvent$Action = function (logTypeIdIn, messageIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.LogEvent$vars"))());
    vars.value.logTypeIdInLocal = logTypeIdIn;
    vars.value.messageInLocal = messageIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_LogEvent_LogMessageJS, "LogMessage", "LogEvent", {
    LogTypeId: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.identifierToText(vars.value.logTypeIdInLocal), OS.Types.Text),
    Message: OS.DataConversion.JSNodeParamConverter.to(vars.value.messageInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.LogEvent$vars", [{
    name: "LogTypeId",
    attrName: "logTypeIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Message",
    attrName: "messageInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.logEvent$Action = function (logTypeIdIn, messageIn) {
    logTypeIdIn = (logTypeIdIn === undefined) ? "" : logTypeIdIn;
    messageIn = (messageIn === undefined) ? "" : messageIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.logEvent$Action.bind(controller, logTypeIdIn, OS.DataConversion.JSNodeParamConverter.from(messageIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$LogEvent.LogMessageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Utils.LogMessage($parameters.Message);
    };
    });
    
    define("OutSystemsUI.controller$MasterDetailSetContentFocus", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MasterDetailSetContentFocus.SetFocusBehaviourJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$MasterDetailSetContentFocus_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MasterDetailSetContentFocus_SetFocusBehaviourJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.masterDetailSetContentFocus$Action = function (contentIdIn, triggerItemIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus$vars"))());
    vars.value.contentIdInLocal = contentIdIn;
    vars.value.triggerItemInLocal = triggerItemIn;
    var masterDetailSetContentFocus_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var setFocusBehaviourJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    // MasterDetail focus behaviour
    setFocusBehaviourJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MasterDetailSetContentFocus_SetFocusBehaviourJS, "SetFocusBehaviour", "MasterDetailSetContentFocus", {
    ClickedItemId: OS.DataConversion.JSNodeParamConverter.to(vars.value.triggerItemInLocal, OS.Types.Text),
    SetFocusWidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.contentIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus$setFocusBehaviourJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setFocusBehaviourJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: MasterDetailSetContentFocus_Legacy
    masterDetailSetContentFocus_LegacyVar.value = OutSystemsUIController.default.masterDetailSetContentFocus_Legacy$Action(vars.value.contentIdInLocal, vars.value.triggerItemInLocal, callContext);
    
    // Set Error Message
    // Success = MasterDetailSetContentFocus_Legacy.Success
    outVars.value.successOut = masterDetailSetContentFocus_LegacyVar.value.successOut;
    // ErrorMessage.Code = MasterDetailSetContentFocus_Legacy.ErrorMessage.Code
    outVars.value.errorMessageOut.codeAttr = masterDetailSetContentFocus_LegacyVar.value.errorMessageOut.codeAttr;
    // ErrorMessage.Message = MasterDetailSetContentFocus_Legacy.ErrorMessage.Message
    outVars.value.errorMessageOut.messageAttr = masterDetailSetContentFocus_LegacyVar.value.errorMessageOut.messageAttr;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus$vars", [{
    name: "ContentId",
    attrName: "contentIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "TriggerItem",
    attrName: "triggerItemInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus$setFocusBehaviourJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.masterDetailSetContentFocus$Action = function (contentIdIn, triggerItemIn) {
    contentIdIn = (contentIdIn === undefined) ? "" : contentIdIn;
    triggerItemIn = (triggerItemIn === undefined) ? "" : triggerItemIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.masterDetailSetContentFocus$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(contentIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(triggerItemIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MasterDetailSetContentFocus.SetFocusBehaviourJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.SetFocusBehaviour($parameters.SetFocusWidgetId,$parameters.ClickedItemId);
    };
    });
    
    define("OutSystemsUI.controller$MasterDetailSetContentFocus_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MasterDetailSetContentFocus_Legacy.SetFocusBehaviourJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MasterDetailSetContentFocus_Legacy_SetFocusBehaviourJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.masterDetailSetContentFocus_Legacy$Action = function (contentIdIn, triggerItemIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus_Legacy$vars"))());
    vars.value.contentIdInLocal = contentIdIn;
    vars.value.triggerItemInLocal = triggerItemIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("MasterDetailSetContentFocus", callContext);
    
    // MasterDetail focus behaviour
    controller.safeExecuteJSNode(OutSystemsUI_controller_MasterDetailSetContentFocus_Legacy_SetFocusBehaviourJS, "SetFocusBehaviour", "MasterDetailSetContentFocus_Legacy", {
    SetFocusWidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.contentIdInLocal, OS.Types.Text),
    ClickedItemId: OS.DataConversion.JSNodeParamConverter.to(vars.value.triggerItemInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("MasterDetailSetContentFocus_Legacy.MasterDetailSetContentFocus_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000003"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000003";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus_Legacy$vars", [{
    name: "ContentId",
    attrName: "contentIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "TriggerItem",
    attrName: "triggerItemInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MasterDetailSetContentFocus_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.masterDetailSetContentFocus_Legacy$Action = function (contentIdIn, triggerItemIn) {
    contentIdIn = (contentIdIn === undefined) ? "" : contentIdIn;
    triggerItemIn = (triggerItemIn === undefined) ? "" : triggerItemIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.masterDetailSetContentFocus_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(contentIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(triggerItemIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MasterDetailSetContentFocus_Legacy.SetFocusBehaviourJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    // Set focus in the container
    var elementId = document.getElementById($parameters.SetFocusWidgetId);
    var isPhone = document.body.classList.contains('phone');
    
    elementId.setAttribute('tabindex', "0");
    elementId.focus();
    
    if(!isPhone) {
        // Set the properties to define the tab navigation inside the content
        var focusItemTop = elementId.closest(".split-right-content").querySelector("span.focus-item.top");
        focusItemTop.setAttribute("tabindex", "0");
        focusItemTop.setAttribute("focusItemId", $parameters.ClickedItemId);
        
        var focusItemBottom = elementId.closest(".split-right-content").querySelector("span.focus-item.bottom");
        if(document.querySelector("#"+$parameters.ClickedItemId + " + div")){
            focusItemBottom.setAttribute("tabindex", "0");
            focusItemBottom.setAttribute("focusItemId", document.querySelector("#"+$parameters.ClickedItemId + " + div").id);   
        }
        else {
            focusItemBottom.setAttribute("tabindex", "-1");
            focusItemBottom.removeAttribute("focusItemId");
        } 
    }
    };
    });
    
    define("OutSystemsUI.controller$MenuHide", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MenuHide.JsMenuHideJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MenuHide_JsMenuHideJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.menuHide$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var jsMenuHideJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MenuHide$outVars"))());
    jsMenuHideJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MenuHide_JsMenuHideJS, "JsMenuHide", "MenuHide", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MenuHide$jsMenuHideJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsMenuHideJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MenuHide$jsMenuHideJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MenuHide$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.menuHide$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.menuHide$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MenuHide.JsMenuHideJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.MenuHide();
    };
    });
    
    define("OutSystemsUI.controller$MenuShow", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MenuShow.JsMenuShowJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MenuShow_JsMenuShowJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.menuShow$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var jsMenuShowJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MenuShow$outVars"))());
    jsMenuShowJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MenuShow_JsMenuShowJS, "JsMenuShow", "MenuShow", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MenuShow$jsMenuShowJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsMenuShowJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MenuShow$jsMenuShowJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MenuShow$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.menuShow$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.menuShow$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MenuShow.JsMenuShowJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.MenuShow();
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerChangeMonthYearProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerChangeMonthYearProp.ChangeMonthPropertyJS", "OutSystemsUI.model$MonthYearRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerChangeMonthYearProp_ChangeMonthPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerChangeMonthYearProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerChangeMonthYearProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn.clone();
    var monthYearVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: MonthYear
    monthYearVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.propertyValueInLocal, true, false);
    controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerChangeMonthYearProp_ChangeMonthPropertyJS, "ChangeMonthProperty", "MonthPickerChangeMonthYearProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(monthYearVar.value.jSONOut, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerChangeMonthYearProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.MonthYearRec();
    },
    complexType: OutSystemsUIModel.MonthYearRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerChangeMonthYearProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? new OutSystemsUIModel.MonthYearRec() : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerChangeMonthYearProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), propertyValueIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerChangeMonthYearProp.ChangeMonthPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.MonthPickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        JSON.parse($parameters.PropertyValue)
    );
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "MonthPickerChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.MonthPickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerClear", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerClear.ClearMonthPickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerClear_ClearMonthPickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerClear$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerClear$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var clearMonthPickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerClear$outVars"))());
    // Trigger the API method that will clear the MonthPicker.
    clearMonthPickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerClear_ClearMonthPickerJS, "ClearMonthPicker", "MonthPickerClear", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerClear$clearMonthPickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(clearMonthPickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerClear$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerClear$clearMonthPickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerClear$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerClear$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerClear$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerClear.ClearMonthPickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.Clear($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerClose.CloseMonthPickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerClose_CloseMonthPickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeMonthPickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerClose$outVars"))());
    // Trigger the API method that will close the MonthPicker.
    closeMonthPickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerClose_CloseMonthPickerJS, "CloseMonthPicker", "MonthPickerClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerClose$closeMonthPickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeMonthPickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerClose$closeMonthPickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerClose.CloseMonthPickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerCreate.CreateMonthPickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerCreate_CreateMonthPickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerCreate$Action = function (uniqueIdIn, internalConfigsIn, providerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    vars.value.providerInLocal = providerIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerCreate_CreateMonthPickerJS, "CreateMonthPicker", "MonthPickerCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Provider: OS.DataConversion.JSNodeParamConverter.to(vars.value.providerInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Provider",
    attrName: "providerInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerCreate$Action = function (uniqueIdIn, internalConfigsIn, providerIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    providerIn = (providerIn === undefined) ? "" : providerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text), providerIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerCreate.CreateMonthPickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.MonthPickerAPI.Create($parameters.UniqueId, $parameters.Configs, $parameters.Provider);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerDestroy.DestroyMonthPickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerDestroy_DestroyMonthPickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerDestroy_DestroyMonthPickerJS, "DestroyMonthPicker", "MonthPickerDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerDestroy.DestroyMonthPickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.MonthPickerAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerInitialize.InitializeMonthPickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerInitialize_InitializeMonthPickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerInitialize_InitializeMonthPickerJS, "InitializeMonthPicker", "MonthPickerInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerInitialize.InitializeMonthPickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.MonthPickerAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerOpen.OpenMonthPickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerOpen_OpenMonthPickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openMonthPickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerOpen$outVars"))());
    // Trigger the API method that will open the MonthPicker.
    openMonthPickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerOpen_OpenMonthPickerJS, "OpenMonthPicker", "MonthPickerOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerOpen$openMonthPickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openMonthPickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerOpen$openMonthPickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerOpen.OpenMonthPickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerRegisterCallback_RegisterCallbackJS, "RegisterCallback", "MonthPickerRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.MonthPickerAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerSetEditableInput", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerSetEditableInput.SetEditableInputJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerSetEditableInput_SetEditableInputJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerSetEditableInput$Action = function (widgetIdIn, isEditableInputIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerSetEditableInput$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isEditableInputInLocal = isEditableInputIn;
    var setEditableInputJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerSetEditableInput$outVars"))());
    // Trigger the API method that will open the MonthPicker.
    setEditableInputJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerSetEditableInput_SetEditableInputJS, "SetEditableInput", "MonthPickerSetEditableInput", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    IsEditableInput: OS.DataConversion.JSNodeParamConverter.to(vars.value.isEditableInputInLocal, OS.Types.Boolean),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerSetEditableInput$setEditableInputJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setEditableInputJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // ErrorMessage
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerSetEditableInput$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsEditableInput",
    attrName: "isEditableInputInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerSetEditableInput$setEditableInputJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerSetEditableInput$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerSetEditableInput$Action = function (widgetIdIn, isEditableInputIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isEditableInputIn = (isEditableInputIn === undefined) ? true : isEditableInputIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerSetEditableInput$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isEditableInputIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerSetEditableInput.SetEditableInputJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.SetEditableInput($parameters.UniqueId, $parameters.IsEditableInput);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerSetLanguage", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerSetLanguage.SetMonthPickerNewLanguageJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerSetLanguage_SetMonthPickerNewLanguageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerSetLanguage$Action = function (widgetIdIn, languageIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerSetLanguage$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.languageInLocal = languageIn;
    var setMonthPickerNewLanguageJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerSetLanguage$outVars"))());
    // Trigger the API method that will open the datepicker.
    setMonthPickerNewLanguageJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerSetLanguage_SetMonthPickerNewLanguageJS, "SetMonthPickerNewLanguage", "MonthPickerSetLanguage", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Lang: OS.DataConversion.JSNodeParamConverter.to(vars.value.languageInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerSetLanguage$setMonthPickerNewLanguageJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setMonthPickerNewLanguageJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerSetLanguage$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Language",
    attrName: "languageInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerSetLanguage$setMonthPickerNewLanguageJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerSetLanguage$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerSetLanguage$Action = function (widgetIdIn, languageIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    languageIn = (languageIn === undefined) ? "" : languageIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerSetLanguage$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), languageIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerSetLanguage.SetMonthPickerNewLanguageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.SetLanguage($parameters.WidgetId, $parameters.Lang);
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerUpdateMonth", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerUpdateMonth.UpdateInitialMonthJS", "OutSystemsUI.model$MonthYearRec", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerUpdateMonth_UpdateInitialMonthJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerUpdateMonth$Action = function (widgetIdIn, newMonthIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerUpdateMonth$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.newMonthInLocal = newMonthIn.clone();
    var updateInitialMonthJSResult = new OS.DataTypes.VariableHolder();
    var jSONSerializeMonthPickerNewMonthVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerUpdateMonth$outVars"))());
    // JSON Serialize: JSONSerializeMonthPickerNewMonth
    jSONSerializeMonthPickerNewMonthVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.newMonthInLocal, false, false);
    // Trigger the API method that will toggle native on datepicker.
    updateInitialMonthJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerUpdateMonth_UpdateInitialMonthJS, "UpdateInitialMonth", "MonthPickerUpdateMonth", {
    NewMonth: OS.DataConversion.JSNodeParamConverter.to(jSONSerializeMonthPickerNewMonthVar.value.jSONOut, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerUpdateMonth$updateInitialMonthJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updateInitialMonthJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerUpdateMonth$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "NewMonth",
    attrName: "newMonthInLocal",
    mandatory: true,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.MonthYearRec();
    },
    complexType: OutSystemsUIModel.MonthYearRec
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerUpdateMonth$updateInitialMonthJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerUpdateMonth$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerUpdateMonth$Action = function (widgetIdIn, newMonthIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    newMonthIn = (newMonthIn === undefined) ? new OutSystemsUIModel.MonthYearRec() : newMonthIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerUpdateMonth$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), newMonthIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerUpdateMonth.UpdateInitialMonthJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.UpdateInitialMonth(
        $parameters.UniqueId,
        JSON.parse($parameters.NewMonth)
    );
    
    };
    });
    
    define("OutSystemsUI.controller$MonthPickerUpdatePrompt", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MonthPickerUpdatePrompt.UpdatePromptMessageJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MonthPickerUpdatePrompt_UpdatePromptMessageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.monthPickerUpdatePrompt$Action = function (widgetIdIn, promptIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerUpdatePrompt$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.promptInLocal = promptIn;
    var updatePromptMessageJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerUpdatePrompt$outVars"))());
    // Trigger the API method that will open the datepicker.
    updatePromptMessageJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MonthPickerUpdatePrompt_UpdatePromptMessageJS, "UpdatePromptMessage", "MonthPickerUpdatePrompt", {
    Prompt: OS.DataConversion.JSNodeParamConverter.to(vars.value.promptInLocal, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MonthPickerUpdatePrompt$updatePromptMessageJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updatePromptMessageJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerUpdatePrompt$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Prompt",
    attrName: "promptInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerUpdatePrompt$updatePromptMessageJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MonthPickerUpdatePrompt$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.monthPickerUpdatePrompt$Action = function (widgetIdIn, promptIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    promptIn = (promptIn === undefined) ? "" : promptIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.monthPickerUpdatePrompt$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(promptIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MonthPickerUpdatePrompt.UpdatePromptMessageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.MonthPickerAPI.UpdatePrompt($parameters.WidgetId, $parameters.Prompt);
    };
    });
    
    define("OutSystemsUI.controller$MoveElement", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MoveElement.JsMoveElementJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$MoveElement_Legacy", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MoveElement_JsMoveElementJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.moveElement$Action = function (widgetIdIn, targetIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MoveElement$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.targetInLocal = targetIn;
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var moveElement_LegacyVar = new OS.DataTypes.VariableHolder();
    var jsMoveElementJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MoveElement$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    jsMoveElementJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_MoveElement_JsMoveElementJS, "JsMoveElement", "MoveElement", {
    ElementId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Object),
    TargetSelector: OS.DataConversion.JSNodeParamConverter.to(vars.value.targetInLocal, OS.Types.Object),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.MoveElement$jsMoveElementJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsMoveElementJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: MoveElement_Legacy
    moveElement_LegacyVar.value = OutSystemsUIController.default.moveElement_Legacy$Action(vars.value.widgetIdInLocal, vars.value.targetInLocal, callContext);
    
    // Set Error Message
    // Success = MoveElement_Legacy.Success
    outVars.value.successOut = moveElement_LegacyVar.value.successOut;
    // ErrorMessage = MoveElement_Legacy.ErrorMessage
    outVars.value.errorMessageOut = moveElement_LegacyVar.value.errorMessageOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MoveElement$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }, {
    name: "Target",
    attrName: "targetInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MoveElement$jsMoveElementJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MoveElement$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.moveElement$Action = function (widgetIdIn, targetIn) {
    widgetIdIn = (widgetIdIn === undefined) ? null : widgetIdIn;
    targetIn = (targetIn === undefined) ? null : targetIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.moveElement$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Object), OS.DataConversion.JSNodeParamConverter.from(targetIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MoveElement.JsMoveElementJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.MoveElement($parameters.ElementId,$parameters.TargetSelector)
    };
    });
    
    define("OutSystemsUI.controller$MoveElement_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$MoveElement_Legacy.MoveElementJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_MoveElement_Legacy_MoveElementJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.moveElement_Legacy$Action = function (widgetIdIn, targetIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MoveElement_Legacy$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.targetInLocal = targetIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.MoveElement_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("MoveElement", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_MoveElement_Legacy_MoveElementJS, "MoveElement", "MoveElement_Legacy", {
    Element: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Object),
    Target: OS.DataConversion.JSNodeParamConverter.to(vars.value.targetInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("MoveElement_Legacy.MoveElement_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000002"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000002";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MoveElement_Legacy$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }, {
    name: "Target",
    attrName: "targetInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.MoveElement_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.moveElement_Legacy$Action = function (widgetIdIn, targetIn) {
    widgetIdIn = (widgetIdIn === undefined) ? null : widgetIdIn;
    targetIn = (targetIn === undefined) ? null : targetIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.moveElement_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Object), OS.DataConversion.JSNodeParamConverter.from(targetIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$MoveElement_Legacy.MoveElementJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    if($parameters.Target && $parameters.Element) 
    {
        var screenEl = document.getElementById($parameters.Element);
        var element = document.querySelector($parameters.Target);
        
        if(screenEl && element) 
        {
            setTimeout(function (){
                element.appendChild(screenEl);
            }, 200);
        }
    }
    };
    });
    
    define("OutSystemsUI.controller$NoOutSystemsUIScriptMessage", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage.ConsoleWarningJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NoOutSystemsUIScriptMessage_ConsoleWarningJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action = function (actionNameIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NoOutSystemsUIScriptMessage$vars"))());
    vars.value.actionNameInLocal = actionNameIn;
    var consoleWarningJSResult = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NoOutSystemsUIScriptMessage$outVars"))());
    consoleWarningJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_NoOutSystemsUIScriptMessage_ConsoleWarningJS, "ConsoleWarning", "NoOutSystemsUIScriptMessage", {
    ActionName: OS.DataConversion.JSNodeParamConverter.to(vars.value.actionNameInLocal, OS.Types.Text),
    Message: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.NoOutSystemsUIScriptMessage$consoleWarningJSResult"))();
    jsNodeResult.messageOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Message, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // Message = ConsoleWarning.Message
    outVars.value.messageOut = consoleWarningJSResult.value.messageOut;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NoOutSystemsUIScriptMessage$vars", [{
    name: "ActionName",
    attrName: "actionNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NoOutSystemsUIScriptMessage$consoleWarningJSResult", [{
    name: "Message",
    attrName: "messageOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NoOutSystemsUIScriptMessage$outVars", [{
    name: "Message",
    attrName: "messageOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.noOutSystemsUIScriptMessage$Action = function (actionNameIn) {
    actionNameIn = (actionNameIn === undefined) ? "" : actionNameIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(actionNameIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Message: OS.DataConversion.JSNodeParamConverter.to(actionResults.messageOut, OS.Types.Text)
    };
    });
    };
    });
    define("OutSystemsUI.controller$NoOutSystemsUIScriptMessage.ConsoleWarningJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Message = 'The action ' + $parameters.ActionName + ' requires the OutSystemsUI.js script and it is not loaded yet. Use the LoadOutSystemsUIScript action before the action to ensure that the script is defined.';
    
    console.warn($parameters.Message);
    };
    });
    
    define("OutSystemsUI.controller$NotificationChangeCloseAfterTime", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationChangeCloseAfterTime.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationChangeCloseAfterTime_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationChangeCloseAfterTime$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationChangeCloseAfterTime$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationChangeCloseAfterTime_ChangePropertyJS, "ChangeProperty", "NotificationChangeCloseAfterTime", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("CloseAfterTime", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Integer)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationChangeCloseAfterTime$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationChangeCloseAfterTime$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? 0 : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationChangeCloseAfterTime$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationChangeCloseAfterTime.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$NotificationChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "NotificationChangeExtendedClass", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$NotificationChangeInteractToClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationChangeInteractToClose.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationChangeInteractToClose_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationChangeInteractToClose$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationChangeInteractToClose$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationChangeInteractToClose_ChangePropertyJS, "ChangeProperty", "NotificationChangeInteractToClose", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("InteractToClose", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationChangeInteractToClose$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationChangeInteractToClose$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationChangeInteractToClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationChangeInteractToClose.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$NotificationChangePosition", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationChangePosition.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationChangePosition_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationChangePosition$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationChangePosition$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationChangePosition_ChangePropertyJS, "ChangeProperty", "NotificationChangePosition", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Position", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationChangePosition$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationChangePosition$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationChangePosition$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationChangePosition.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$NotificationChangeStartsOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationChangeStartsOpen.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationChangeStartsOpen_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationChangeStartsOpen$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationChangeStartsOpen$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationChangeStartsOpen_ChangePropertyJS, "ChangeProperty", "NotificationChangeStartsOpen", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("StartsOpen", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationChangeStartsOpen$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationChangeStartsOpen$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationChangeStartsOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationChangeStartsOpen.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$NotificationChangeWidth", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationChangeWidth.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationChangeWidth_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationChangeWidth$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationChangeWidth$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationChangeWidth_ChangePropertyJS, "ChangeProperty", "NotificationChangeWidth", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Width", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationChangeWidth$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationChangeWidth$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationChangeWidth$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationChangeWidth.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$NotificationClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationClose.HideNotificationJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationClose_HideNotificationJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var hideNotificationJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationClose$outVars"))());
    hideNotificationJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationClose_HideNotificationJS, "HideNotification", "NotificationClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationClose$hideNotificationJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(hideNotificationJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationClose$hideNotificationJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$NotificationClose.HideNotificationJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.NotificationAPI.Hide($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$NotificationCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationCreate.CreateJS", "OutSystemsUI.model$Notification_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationCreate_CreateJS, "Create", "NotificationCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.Notification_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.Notification_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.Notification_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.Create($parameters.UniqueId, $parameters.Configs);
    
    };
    });
    
    define("OutSystemsUI.controller$NotificationDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationDestroy_DestroyJS, "Destroy", "NotificationDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$NotificationInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationInitialize.InitializeNotificationJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationInitialize_InitializeNotificationJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationInitialize_InitializeNotificationJS, "InitializeNotification", "NotificationInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationInitialize.InitializeNotificationJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$NotificationOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationOpen.ShowNotificationJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationOpen_ShowNotificationJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var showNotificationJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationOpen$outVars"))());
    showNotificationJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationOpen_ShowNotificationJS, "ShowNotification", "NotificationOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationOpen$showNotificationJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(showNotificationJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationOpen$showNotificationJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$NotificationOpen.ShowNotificationJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.NotificationAPI.Show($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$NotificationRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$NotificationRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_NotificationRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.notificationRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.NotificationRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_NotificationRegisterCallback_RegisterCallbackJS, "RegisterCallback", "NotificationRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.NotificationRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.notificationRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.notificationRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$NotificationRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.NotificationAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$ProgressApplyGradient", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressApplyGradient.JsProgressApplyGradientAPIJS", "OutSystemsUI.model$GradientColorList", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressApplyGradient_JsProgressApplyGradientAPIJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressApplyGradient$Action = function (widgetIdIn, gradientTypeIn, colorsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressApplyGradient$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.gradientTypeInLocal = gradientTypeIn;
    vars.value.colorsInLocal = colorsIn.clone();
    var jsProgressApplyGradientAPIJSResult = new OS.DataTypes.VariableHolder();
    var jSONSerializeColorsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressApplyGradient$outVars"))());
    // JSON Serialize: JSONSerializeColors
    jSONSerializeColorsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.colorsInLocal, true, false);
    jsProgressApplyGradientAPIJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressApplyGradient_JsProgressApplyGradientAPIJS, "JsProgressApplyGradientAPI", "ProgressApplyGradient", {
    GradientType: OS.DataConversion.JSNodeParamConverter.to(vars.value.gradientTypeInLocal, OS.Types.Text),
    Colors: OS.DataConversion.JSNodeParamConverter.to(jSONSerializeColorsVar.value.jSONOut, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressApplyGradient$jsProgressApplyGradientAPIJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsProgressApplyGradientAPIJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressApplyGradient$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "GradientType",
    attrName: "gradientTypeInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return OutSystemsUIModel.staticEntities.gradient.linearHorizontal;
    }
    }, {
    name: "Colors",
    attrName: "colorsInLocal",
    mandatory: true,
    dataType: OS.Types.RecordList,
    defaultValue: function () {
    return new OutSystemsUIModel.GradientColorList();
    },
    complexType: OutSystemsUIModel.GradientColorList
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressApplyGradient$jsProgressApplyGradientAPIJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressApplyGradient$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.progressApplyGradient$Action = function (widgetIdIn, gradientTypeIn, colorsIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    gradientTypeIn = (gradientTypeIn === undefined) ? OutSystemsUIModel.staticEntities.gradient.linearHorizontal : gradientTypeIn;
    colorsIn = (colorsIn === undefined) ? new OutSystemsUIModel.GradientColorList() : colorsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressApplyGradient$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), gradientTypeIn, colorsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ProgressApplyGradient.JsProgressApplyGradientAPIJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.ProgressAPI.ProgressApplyGradient($parameters.WidgetId, $parameters.GradientType, $parameters.Colors);
    };
    });
    
    define("OutSystemsUI.controller$ProgressBarCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressBarCreate.CreateJS", "OutSystemsUI.model$ProgressBar_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressBarCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressBarCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressBarCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressBarCreate_CreateJS, "Create", "ProgressBarCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text),
    Type: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.typeAttr, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressBarCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ProgressBar_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.ProgressBar_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.progressBarCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.ProgressBar_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressBarCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressBarCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.Create($parameters.UniqueId, $parameters.Type, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$ProgressChangeIntegerProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressChangeIntegerProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressChangeIntegerProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressChangeIntegerProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressChangeIntegerProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "ProgressChangeIntegerProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.LongInteger),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressChangeIntegerProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.LongInteger,
    defaultValue: function () {
    return OS.DataTypes.LongInteger.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.progressChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressChangeIntegerProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressChangeIntegerProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$ProgressChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "ProgressChangeTextProp", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.progressChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$ProgressCircleCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressCircleCreate.CreateJS", "OutSystemsUI.model$ProgressCircle_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressCircleCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressCircleCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressCircleCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressCircleCreate_CreateJS, "Create", "ProgressCircleCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text),
    Type: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.typeAttr, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressCircleCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ProgressCircle_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.ProgressCircle_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.progressCircleCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.ProgressCircle_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressCircleCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressCircleCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.Create($parameters.UniqueId, $parameters.Type, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$ProgressDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressDestroy_DestroyJS, "Destroy", "ProgressDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.progressDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$ProgressInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressInitialize_InitializeJS, "Initialize", "ProgressInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.progressInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$ProgressRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ProgressRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ProgressRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.progressRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ProgressRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_ProgressRegisterCallback_RegisterCallbackJS, "RegisterCallback", "ProgressRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ProgressRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.progressRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.progressRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$ProgressRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.ProgressAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderChangeBooleanProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderChangeBooleanProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderChangeBooleanProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "RangeSliderChangeBooleanProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderChangeBooleanProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderChangeDecimalProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderChangeDecimalProp.ChangeDecimalPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderChangeDecimalProp_ChangeDecimalPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderChangeDecimalProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderChangeDecimalProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderChangeDecimalProp_ChangeDecimalPropertyJS, "ChangeDecimalProperty", "RangeSliderChangeDecimalProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Decimal),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderChangeDecimalProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Decimal,
    defaultValue: function () {
    return OS.DataTypes.Decimal.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderChangeDecimalProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderChangeDecimalProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderChangeDecimalProp.ChangeDecimalPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "RangeSliderChangeTextProp", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderCreate.CreateRangeSliderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderCreate_CreateRangeSliderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderCreate$Action = function (uniqueIdIn, internalConfigsIn, modeIn, providerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    vars.value.modeInLocal = modeIn;
    vars.value.providerInLocal = providerIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderCreate_CreateRangeSliderJS, "CreateRangeSlider", "RangeSliderCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Provider: OS.DataConversion.JSNodeParamConverter.to(vars.value.providerInLocal, OS.Types.Text),
    Mode: OS.DataConversion.JSNodeParamConverter.to(vars.value.modeInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Mode",
    attrName: "modeInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Provider",
    attrName: "providerInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderCreate$Action = function (uniqueIdIn, internalConfigsIn, modeIn, providerIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    modeIn = (modeIn === undefined) ? "" : modeIn;
    providerIn = (providerIn === undefined) ? "" : providerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text), modeIn, providerIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderCreate.CreateRangeSliderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.Create($parameters.UniqueId, $parameters.Configs, $parameters.Mode, $parameters.Provider);
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderDestroy.DestroyRangeSliderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderDestroy_DestroyRangeSliderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderDestroy_DestroyRangeSliderJS, "DestroyRangeSlider", "RangeSliderDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderDestroy.DestroyRangeSliderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderDisable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderDisable.JsRangeSliderDisableJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderDisable_JsRangeSliderDisableJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderDisable$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderDisable$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var jsRangeSliderDisableJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderDisable$outVars"))());
    // Method that will set RangeSlider with given RangeSlider ID as Disabled.
    jsRangeSliderDisableJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderDisable_JsRangeSliderDisableJS, "JsRangeSliderDisable", "RangeSliderDisable", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderDisable$jsRangeSliderDisableJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsRangeSliderDisableJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // ErrorMessage
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderDisable$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderDisable$jsRangeSliderDisableJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderDisable$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderDisable$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderDisable$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderDisable.JsRangeSliderDisableJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.Disable($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderEnable", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderEnable.JsRangeSliderEnableJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderEnable_JsRangeSliderEnableJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderEnable$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderEnable$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var jsRangeSliderEnableJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderEnable$outVars"))());
    // Method that will set RangeSlider with given RangeSlider ID as Enabled.
    jsRangeSliderEnableJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderEnable_JsRangeSliderEnableJS, "JsRangeSliderEnable", "RangeSliderEnable", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderEnable$jsRangeSliderEnableJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsRangeSliderEnableJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // ErrorMessage
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderEnable$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderEnable$jsRangeSliderEnableJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderEnable$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderEnable$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderEnable$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderEnable.JsRangeSliderEnableJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.Enable($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderInitialize.InitializeRangeSliderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderInitialize_InitializeRangeSliderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderInitialize_InitializeRangeSliderJS, "InitializeRangeSlider", "RangeSliderInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderInitialize.InitializeRangeSliderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$RangeSliderRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RangeSliderRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RangeSliderRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.rangeSliderRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RangeSliderRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RangeSliderRegisterCallback_RegisterCallbackJS, "RegisterCallback", "RangeSliderRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RangeSliderRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.rangeSliderRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.rangeSliderRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RangeSliderRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RangeSliderAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$RatingChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "RatingChangeExtendedClass", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RatingChangeIsEdit", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingChangeIsEdit.ChangeIsEditJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingChangeIsEdit_ChangeIsEditJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingChangeIsEdit$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingChangeIsEdit$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingChangeIsEdit_ChangeIsEditJS, "ChangeIsEdit", "RatingChangeIsEdit", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("IsEdit", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingChangeIsEdit$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingChangeIsEdit$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingChangeIsEdit$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingChangeIsEdit.ChangeIsEditJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RatingChangeRatingScale", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingChangeRatingScale.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingChangeRatingScale_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingChangeRatingScale$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingChangeRatingScale$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingChangeRatingScale_ChangePropertyJS, "ChangeProperty", "RatingChangeRatingScale", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Integer),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("RatingScale", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingChangeRatingScale$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingChangeRatingScale$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? 0 : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingChangeRatingScale$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingChangeRatingScale.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RatingChangeRatingValue", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingChangeRatingValue.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingChangeRatingValue_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingChangeRatingValue$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingChangeRatingValue$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingChangeRatingValue_ChangePropertyJS, "ChangeProperty", "RatingChangeRatingValue", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("RatingValue", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Decimal)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingChangeRatingValue$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Decimal,
    defaultValue: function () {
    return OS.DataTypes.Decimal.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingChangeRatingValue$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingChangeRatingValue$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingChangeRatingValue.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RatingChangeSize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingChangeSize.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingChangeSize_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingChangeSize$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingChangeSize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingChangeSize_ChangePropertyJS, "ChangeProperty", "RatingChangeSize", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Size", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingChangeSize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingChangeSize$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingChangeSize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingChangeSize.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$RatingCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingCreate.CreateRatingJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingCreate_CreateRatingJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingCreate_CreateRatingJS, "CreateRating", "RatingCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingCreate.CreateRatingJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$RatingDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingDestroy_DestroyJS, "Destroy", "RatingDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$RatingInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingInitialize_InitializeJS, "Initialize", "RatingInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$RatingRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RatingRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RatingRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.ratingRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RatingRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RatingRegisterCallback_RegisterCallbackJS, "RegisterCallback", "RatingRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RatingRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.ratingRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.ratingRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RatingRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.RatingAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$RemoveRTLObserver", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$RemoveRTLObserver.ObserverJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_RemoveRTLObserver_ObserverJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.removeRTLObserver$Action = function (callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.RemoveRTLObserver$vars"))());
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_RemoveRTLObserver_ObserverJS, "Observer", "RemoveRTLObserver", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.RemoveRTLObserver$vars", [{
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.removeRTLObserver$Action = function (callbackIn) {
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.removeRTLObserver$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$RemoveRTLObserver.ObserverJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OSFramework.OSUI.Event.DOMEvents.Observers.GlobalObserverManager.Instance.removeHandler(
        OSFramework.OSUI.Event.DOMEvents.Observers.ObserverEvent.RTL,
        $parameters.Callback
    );
    };
    });
    
    define("OutSystemsUI.controller$ResetProgressBar", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ResetProgressBar.ResetProgressValueJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ResetProgressBar_ResetProgressValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.resetProgressBar$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetProgressBar$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var resetProgressValueJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetProgressBar$outVars"))());
    resetProgressValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ResetProgressBar_ResetProgressValueJS, "ResetProgressValue", "ResetProgressBar", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetProgressBar$resetProgressValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(resetProgressValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetProgressBar$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetProgressBar$resetProgressValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetProgressBar$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.resetProgressBar$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.resetProgressBar$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ResetProgressBar.ResetProgressValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.ProgressAPI.ResetProgressValue($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$ResetProgressCircle", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ResetProgressCircle.ResetProgressValueJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ResetProgressCircle_ResetProgressValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.resetProgressCircle$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetProgressCircle$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var resetProgressValueJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetProgressCircle$outVars"))());
    resetProgressValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ResetProgressCircle_ResetProgressValueJS, "ResetProgressValue", "ResetProgressCircle", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetProgressCircle$resetProgressValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(resetProgressValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetProgressCircle$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetProgressCircle$resetProgressValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetProgressCircle$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.resetProgressCircle$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.resetProgressCircle$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ResetProgressCircle.ResetProgressValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.ProgressAPI.ResetProgressValue($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$ResetRangeSlider", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ResetRangeSlider.ResetRangeSliderJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ResetRangeSlider_ResetRangeSliderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.resetRangeSlider$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetRangeSlider$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var resetRangeSliderJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetRangeSlider$outVars"))());
    resetRangeSliderJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ResetRangeSlider_ResetRangeSliderJS, "ResetRangeSlider", "ResetRangeSlider", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetRangeSlider$resetRangeSliderJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(resetRangeSliderJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetRangeSlider$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetRangeSlider$resetRangeSliderJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetRangeSlider$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.resetRangeSlider$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.resetRangeSlider$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ResetRangeSlider.ResetRangeSliderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.ResetRangeSliderValue($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$ResetRangeSliderInterval", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ResetRangeSliderInterval.ResetRangeSliderJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ResetRangeSliderInterval_ResetRangeSliderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.resetRangeSliderInterval$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetRangeSliderInterval$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var resetRangeSliderJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetRangeSliderInterval$outVars"))());
    resetRangeSliderJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ResetRangeSliderInterval_ResetRangeSliderJS, "ResetRangeSlider", "ResetRangeSliderInterval", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ResetRangeSliderInterval$resetRangeSliderJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(resetRangeSliderJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetRangeSliderInterval$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetRangeSliderInterval$resetRangeSliderJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ResetRangeSliderInterval$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.resetRangeSliderInterval$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.resetRangeSliderInterval$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ResetRangeSliderInterval.ResetRangeSliderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.ResetRangeSliderValue($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$ScrollToElement", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ScrollToElement.ScrollToElementJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ScrollToElement_ScrollToElementJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.scrollToElement$Action = function (widgetIdIn, isSmoothIn, offSetIn, elementParentClassIn, scrollDelayIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ScrollToElement$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isSmoothInLocal = isSmoothIn;
    vars.value.offSetInLocal = offSetIn;
    vars.value.elementParentClassInLocal = elementParentClassIn;
    vars.value.scrollDelayInLocal = scrollDelayIn;
    var scrollToElementJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ScrollToElement$outVars"))());
    // Script to automatically scroll to a given element on the page.
    scrollToElementJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ScrollToElement_ScrollToElementJS, "ScrollToElement", "ScrollToElement", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    OffSet: OS.DataConversion.JSNodeParamConverter.to(vars.value.offSetInLocal, OS.Types.Integer),
    ScrollDelay: OS.DataConversion.JSNodeParamConverter.to(vars.value.scrollDelayInLocal, OS.Types.Integer),
    ElementParentClass: OS.DataConversion.JSNodeParamConverter.to(vars.value.elementParentClassInLocal, OS.Types.Text),
    IsSmooth: OS.DataConversion.JSNodeParamConverter.to(vars.value.isSmoothInLocal, OS.Types.Boolean),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ScrollToElement$scrollToElementJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(scrollToElementJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ScrollToElement$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsSmooth",
    attrName: "isSmoothInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }, {
    name: "OffSet",
    attrName: "offSetInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }, {
    name: "ElementParentClass",
    attrName: "elementParentClassInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ScrollDelay",
    attrName: "scrollDelayInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ScrollToElement$scrollToElementJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ScrollToElement$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.scrollToElement$Action = function (widgetIdIn, isSmoothIn, offSetIn, elementParentClassIn, scrollDelayIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isSmoothIn = (isSmoothIn === undefined) ? true : isSmoothIn;
    offSetIn = (offSetIn === undefined) ? 0 : offSetIn;
    elementParentClassIn = (elementParentClassIn === undefined) ? "" : elementParentClassIn;
    scrollDelayIn = (scrollDelayIn === undefined) ? 0 : scrollDelayIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.scrollToElement$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isSmoothIn, OS.Types.Boolean), OS.DataConversion.JSNodeParamConverter.from(offSetIn, OS.Types.Integer), OS.DataConversion.JSNodeParamConverter.from(elementParentClassIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(scrollDelayIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ScrollToElement.ScrollToElementJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.ScrollToElement(
        $parameters.WidgetId,
        $parameters.IsSmooth,
        $parameters.OffSet,
        $parameters.ElementParentClass,
        $parameters.ScrollDelay
    );
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "SectionIndexChangeExtendedClass", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexChangeIsFixed", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexChangeIsFixed.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexChangeIsFixed_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexChangeIsFixed$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexChangeIsFixed$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexChangeIsFixed_ChangePropertyJS, "ChangeProperty", "SectionIndexChangeIsFixed", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("IsFixed", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexChangeIsFixed$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexChangeIsFixed$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexChangeIsFixed$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexChangeIsFixed.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexChangeSmoothScrolling", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexChangeSmoothScrolling.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexChangeSmoothScrolling_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexChangeSmoothScrolling$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexChangeSmoothScrolling$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexChangeSmoothScrolling_ChangePropertyJS, "ChangeProperty", "SectionIndexChangeSmoothScrolling", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("SmoothScrolling", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexChangeSmoothScrolling$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexChangeSmoothScrolling$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexChangeSmoothScrolling$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexChangeSmoothScrolling.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexCreate.CreateSectionIndexJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexCreate_CreateSectionIndexJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexCreate_CreateSectionIndexJS, "CreateSectionIndex", "SectionIndexCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexCreate.CreateSectionIndexJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexDestroy_DestroyJS, "Destroy", "SectionIndexDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexInitialize_InitializeJS, "Initialize", "SectionIndexInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexItemChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexItemChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexItemChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexItemChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexItemChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexItemChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "SectionIndexItemChangeExtendedClass", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexItemChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexItemChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexItemChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexItemChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexItemCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexItemCreate.CreateSectionItemIndexJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexItemCreate_CreateSectionItemIndexJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexItemCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexItemCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexItemCreate_CreateSectionItemIndexJS, "CreateSectionItemIndex", "SectionIndexItemCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexItemCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexItemCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexItemCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexItemCreate.CreateSectionItemIndexJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexItemAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexItemDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexItemDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexItemDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexItemDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexItemDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexItemDestroy_DestroyJS, "Destroy", "SectionIndexItemDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexItemDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexItemDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexItemDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexItemDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexItemAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexItemInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexItemInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexItemInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexItemInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexItemInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexItemInitialize_InitializeJS, "Initialize", "SectionIndexItemInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexItemInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexItemInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexItemInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexItemInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexItemAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexItemRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexItemRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexItemRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexItemRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexItemRegisterCallback_RegisterCallbackJS, "RegisterCallback", "SectionIndexItemRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexItemRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexItemRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexItemRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexItemAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$SectionIndexRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SectionIndexRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SectionIndexRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sectionIndexRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SectionIndexRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SectionIndexRegisterCallback_RegisterCallbackJS, "RegisterCallback", "SectionIndexRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SectionIndexRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sectionIndexRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sectionIndexRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SectionIndexRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SectionIndexAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$SetAccessibilityRole", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetAccessibilityRole.SetRoleJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$SetAccessibilityRole_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetAccessibilityRole_SetRoleJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setAccessibilityRole$Action = function (widgetIdIn, roleIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAccessibilityRole$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.roleInLocal = roleIn;
    var setAccessibilityRole_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var setRoleJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAccessibilityRole$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    setRoleJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetAccessibilityRole_SetRoleJS, "SetRole", "SetAccessibilityRole", {
    Role: OS.DataConversion.JSNodeParamConverter.to(vars.value.roleInLocal, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAccessibilityRole$setRoleJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setRoleJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: SetAccessibilityRole_Legacy
    setAccessibilityRole_LegacyVar.value = OutSystemsUIController.default.setAccessibilityRole_Legacy$Action(vars.value.widgetIdInLocal, vars.value.roleInLocal, callContext);
    
    // Set Error Message
    // Success = SetAccessibilityRole_Legacy.Success
    outVars.value.successOut = setAccessibilityRole_LegacyVar.value.successOut;
    // ErrorMessage = SetAccessibilityRole_Legacy.ErrorMessage
    outVars.value.errorMessageOut = setAccessibilityRole_LegacyVar.value.errorMessageOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAccessibilityRole$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Role",
    attrName: "roleInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAccessibilityRole$setRoleJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAccessibilityRole$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setAccessibilityRole$Action = function (widgetIdIn, roleIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    roleIn = (roleIn === undefined) ? "" : roleIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setAccessibilityRole$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(roleIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetAccessibilityRole.SetRoleJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Accessibility.SetAccessibilityRole($parameters.WidgetId,$parameters.Role);
    };
    });
    
    define("OutSystemsUI.controller$SetAccessibilityRole_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetAccessibilityRole_Legacy.SetRoleJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetAccessibilityRole_Legacy_SetRoleJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setAccessibilityRole_Legacy$Action = function (widgetIdIn, roleIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAccessibilityRole_Legacy$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.roleInLocal = roleIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAccessibilityRole_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("SetAccessibilityRole", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetAccessibilityRole_Legacy_SetRoleJS, "SetRole", "SetAccessibilityRole_Legacy", {
    Role: OS.DataConversion.JSNodeParamConverter.to(vars.value.roleInLocal, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("SetAccessibilityRole_Legacy.SetAccessibilityRole_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000004"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000004";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAccessibilityRole_Legacy$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Role",
    attrName: "roleInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAccessibilityRole_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setAccessibilityRole_Legacy$Action = function (widgetIdIn, roleIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    roleIn = (roleIn === undefined) ? "" : roleIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setAccessibilityRole_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(roleIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetAccessibilityRole_Legacy.SetRoleJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element = document.getElementById($parameters.WidgetId);
    
    if (element) {
        var isBlock = element.hasAttribute('data-block');
        
        if(isBlock) {
           element.children[0].setAttribute('role', $parameters.Role); 
        } else {
            element.setAttribute('role', $parameters.Role);
        }
    }
    
    };
    });
    
    define("OutSystemsUI.controller$SetActiveElement", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetActiveElement.SetActiveElementJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetActiveElement_SetActiveElementJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setActiveElement$Action = function (widgetIdIn, isActiveIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveElement$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isActiveInLocal = isActiveIn;
    var setActiveElementJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveElement$outVars"))());
    setActiveElementJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetActiveElement_SetActiveElementJS, "SetActiveElement", "SetActiveElement", {
    IsActive: OS.DataConversion.JSNodeParamConverter.to(vars.value.isActiveInLocal, OS.Types.Boolean),
    ID: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveElement$setActiveElementJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setActiveElementJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveElement$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsActive",
    attrName: "isActiveInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveElement$setActiveElementJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveElement$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setActiveElement$Action = function (widgetIdIn, isActiveIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isActiveIn = (isActiveIn === undefined) ? false : isActiveIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setActiveElement$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isActiveIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetActiveElement.SetActiveElementJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.SetActiveElement($parameters.ID,$parameters.IsActive);
    };
    });
    
    define("OutSystemsUI.controller$SetActiveMenuItems", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetActiveMenuItems.SetActiveJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetActiveMenuItems_SetActiveJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setActiveMenuItems$Action = function (widgetIdIn, activeItemIn, activeSubItemIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveMenuItems$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.activeItemInLocal = activeItemIn;
    vars.value.activeSubItemInLocal = activeSubItemIn;
    var setActiveJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveMenuItems$outVars"))());
    setActiveJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetActiveMenuItems_SetActiveJS, "SetActive", "SetActiveMenuItems", {
    ActiveItem: OS.DataConversion.JSNodeParamConverter.to(vars.value.activeItemInLocal, OS.Types.Integer),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ActiveSubItem: OS.DataConversion.JSNodeParamConverter.to(vars.value.activeSubItemInLocal, OS.Types.Integer),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveMenuItems$setActiveJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setActiveJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveMenuItems$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ActiveItem",
    attrName: "activeItemInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return -1;
    }
    }, {
    name: "ActiveSubItem",
    attrName: "activeSubItemInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return -1;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveMenuItems$setActiveJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveMenuItems$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setActiveMenuItems$Action = function (widgetIdIn, activeItemIn, activeSubItemIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    activeItemIn = (activeItemIn === undefined) ? -1 : activeItemIn;
    activeSubItemIn = (activeSubItemIn === undefined) ? -1 : activeSubItemIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setActiveMenuItems$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(activeItemIn, OS.Types.Integer), OS.DataConversion.JSNodeParamConverter.from(activeSubItemIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetActiveMenuItems.SetActiveJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.SetActiveMenuItems($parameters.WidgetId,$parameters.ActiveItem,$parameters.ActiveSubItem);
    };
    });
    
    define("OutSystemsUI.controller$SetActiveTab", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetActiveTab.SetActiveTabJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetActiveTab_SetActiveTabJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setActiveTab$Action = function (widgetIdIn, tabsNumberIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveTab$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.tabsNumberInLocal = tabsNumberIn;
    var setActiveTabJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveTab$outVars"))());
    setActiveTabJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetActiveTab_SetActiveTabJS, "SetActiveTab", "SetActiveTab", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    TabsNumber: OS.DataConversion.JSNodeParamConverter.to(vars.value.tabsNumberInLocal, OS.Types.Integer),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetActiveTab$setActiveTabJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setActiveTabJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveTab$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "TabsNumber",
    attrName: "tabsNumberInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveTab$setActiveTabJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetActiveTab$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setActiveTab$Action = function (widgetIdIn, tabsNumberIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    tabsNumberIn = (tabsNumberIn === undefined) ? 0 : tabsNumberIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setActiveTab$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(tabsNumberIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetActiveTab.SetActiveTabJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TabsAPI.SetActiveTab($parameters.UniqueId,$parameters.TabsNumber);
    };
    });
    
    define("OutSystemsUI.controller$SetAriaHidden", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetAriaHidden.setAriaHiddenJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$SetAriaHidden_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetAriaHidden_setAriaHiddenJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setAriaHidden$Action = function (widgetIdIn, isHiddenIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAriaHidden$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isHiddenInLocal = isHiddenIn;
    var setAriaHidden_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var setAriaHiddenJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAriaHidden$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    setAriaHiddenJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetAriaHidden_setAriaHiddenJS, "setAriaHidden", "SetAriaHidden", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    IsHidden: OS.DataConversion.JSNodeParamConverter.to(vars.value.isHiddenInLocal, OS.Types.Boolean),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAriaHidden$setAriaHiddenJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setAriaHiddenJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: SetAriaHidden_Legacy
    setAriaHidden_LegacyVar.value = OutSystemsUIController.default.setAriaHidden_Legacy$Action(vars.value.widgetIdInLocal, vars.value.isHiddenInLocal, callContext);
    
    // Set Error Message
    // Success = SetAriaHidden_Legacy.Success
    outVars.value.successOut = setAriaHidden_LegacyVar.value.successOut;
    // ErrorMessage.Code = SetAriaHidden_Legacy.ErrorMessage.Code
    outVars.value.errorMessageOut.codeAttr = setAriaHidden_LegacyVar.value.errorMessageOut.codeAttr;
    // ErrorMessage.Message = SetAriaHidden_Legacy.ErrorMessage.Message
    outVars.value.errorMessageOut.messageAttr = setAriaHidden_LegacyVar.value.errorMessageOut.messageAttr;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAriaHidden$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsHidden",
    attrName: "isHiddenInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAriaHidden$setAriaHiddenJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAriaHidden$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setAriaHidden$Action = function (widgetIdIn, isHiddenIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isHiddenIn = (isHiddenIn === undefined) ? false : isHiddenIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setAriaHidden$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isHiddenIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetAriaHidden.setAriaHiddenJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Accessibility.SetAriaHidden($parameters.WidgetId,$parameters.IsHidden);
    };
    });
    
    define("OutSystemsUI.controller$SetAriaHidden_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetAriaHidden_Legacy.setAriaHiddenJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetAriaHidden_Legacy_setAriaHiddenJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setAriaHidden_Legacy$Action = function (widgetIdIn, isHiddenIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAriaHidden_Legacy$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isHiddenInLocal = isHiddenIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetAriaHidden_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("SetAriaHidden", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetAriaHidden_Legacy_setAriaHiddenJS, "setAriaHidden", "SetAriaHidden_Legacy", {
    IsHidden: OS.DataConversion.JSNodeParamConverter.to(vars.value.isHiddenInLocal, OS.Types.Boolean),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("SetAriaHidden_Legacy.SetAriaHidden_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000005"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000005";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAriaHidden_Legacy$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsHidden",
    attrName: "isHiddenInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetAriaHidden_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setAriaHidden_Legacy$Action = function (widgetIdIn, isHiddenIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isHiddenIn = (isHiddenIn === undefined) ? false : isHiddenIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setAriaHidden_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isHiddenIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetAriaHidden_Legacy.setAriaHiddenJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var elem = document.getElementById($parameters.WidgetId);
    
    if(elem) {
        elem.setAttribute('aria-hidden', $parameters.IsHidden);   
    }
    
    };
    });
    
    define("OutSystemsUI.controller$SetBottomBarActiveElement", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetBottomBarActiveElement.SetBottomBarActiveElementJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetBottomBarActiveElement_SetBottomBarActiveElementJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setBottomBarActiveElement$Action = function (activeItemIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetBottomBarActiveElement$vars"))());
    vars.value.activeItemInLocal = activeItemIn;
    var setBottomBarActiveElementJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetBottomBarActiveElement$outVars"))());
    setBottomBarActiveElementJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetBottomBarActiveElement_SetBottomBarActiveElementJS, "SetBottomBarActiveElement", "SetBottomBarActiveElement", {
    Active: OS.DataConversion.JSNodeParamConverter.to(vars.value.activeItemInLocal, OS.Types.Integer),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetBottomBarActiveElement$setBottomBarActiveElementJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setBottomBarActiveElementJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetBottomBarActiveElement$vars", [{
    name: "ActiveItem",
    attrName: "activeItemInLocal",
    mandatory: false,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return -1;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetBottomBarActiveElement$setBottomBarActiveElementJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetBottomBarActiveElement$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setBottomBarActiveElement$Action = function (activeItemIn) {
    activeItemIn = (activeItemIn === undefined) ? -1 : activeItemIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setBottomBarActiveElement$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(activeItemIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetBottomBarActiveElement.SetBottomBarActiveElementJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.SetBottomBarActiveElement($parameters.Active);
    };
    });
    
    define("OutSystemsUI.controller$SetCarouselDirection", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetCarouselDirection.CarouselGoToJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetCarouselDirection_CarouselGoToJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setCarouselDirection$Action = function (widgetIdIn, directionIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetCarouselDirection$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.directionInLocal = directionIn;
    var carouselGoToJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetCarouselDirection$outVars"))());
    carouselGoToJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetCarouselDirection_CarouselGoToJS, "CarouselGoTo", "SetCarouselDirection", {
    Direction: OS.DataConversion.JSNodeParamConverter.to(vars.value.directionInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetCarouselDirection$carouselGoToJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(carouselGoToJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetCarouselDirection$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Direction",
    attrName: "directionInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetCarouselDirection$carouselGoToJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetCarouselDirection$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setCarouselDirection$Action = function (widgetIdIn, directionIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    directionIn = (directionIn === undefined) ? "" : directionIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setCarouselDirection$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), directionIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetCarouselDirection.CarouselGoToJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.SetCarouselDirection($parameters.UniqueId, $parameters.Direction);
    };
    });
    
    define("OutSystemsUI.controller$SetDeviceBreakpoints", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetDeviceBreakpoints.SetDeviceOnResizeJS", "OutSystemsUI.model$DeviceConfigurationRec", "OutSystemsUI.controller$SetDeviceBreakpoints_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetDeviceBreakpoints_SetDeviceOnResizeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setDeviceBreakpoints$Action = function (deviceConfigurationIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetDeviceBreakpoints$vars"))());
    vars.value.deviceConfigurationInLocal = deviceConfigurationIn.clone();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetDeviceBreakpoints_SetDeviceOnResizeJS, "SetDeviceOnResize", "SetDeviceBreakpoints", {
    Phone: OS.DataConversion.JSNodeParamConverter.to(vars.value.deviceConfigurationInLocal.phoneWidthAttr, OS.Types.Integer),
    Tablet: OS.DataConversion.JSNodeParamConverter.to(vars.value.deviceConfigurationInLocal.tabletWidthAttr, OS.Types.Integer)
    }, function ($parameters) {
    }, {}, {});
    } else {
    // Execute Action: SetDeviceBreakpoints_Legacy
    OutSystemsUIController.default.setDeviceBreakpoints_Legacy$Action(vars.value.deviceConfigurationInLocal, callContext);
    }
    
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetDeviceBreakpoints$vars", [{
    name: "DeviceConfiguration",
    attrName: "deviceConfigurationInLocal",
    mandatory: true,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.DeviceConfigurationRec();
    },
    complexType: OutSystemsUIModel.DeviceConfigurationRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setDeviceBreakpoints$Action = function (deviceConfigurationIn) {
    deviceConfigurationIn = (deviceConfigurationIn === undefined) ? new OutSystemsUIModel.DeviceConfigurationRec() : deviceConfigurationIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setDeviceBreakpoints$Action.bind(controller, deviceConfigurationIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SetDeviceBreakpoints.SetDeviceOnResizeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $public.View.registerDeviceClassGetter(OutSystems.OSUI.Utils.DeviceDetection.SetDeviceBreakpoints($parameters.Phone, $parameters.Tablet));
    };
    });
    
    define("OutSystemsUI.controller$SetDeviceBreakpoints_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetDeviceBreakpoints_Legacy.SetDeviceOnResizeJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$DeviceConfigurationRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetDeviceBreakpoints_Legacy_SetDeviceOnResizeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setDeviceBreakpoints_Legacy$Action = function (deviceConfigurationIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetDeviceBreakpoints_Legacy$vars"))());
    vars.value.deviceConfigurationInLocal = deviceConfigurationIn.clone();
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    // Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("SetDeviceBreakpoints", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetDeviceBreakpoints_Legacy_SetDeviceOnResizeJS, "SetDeviceOnResize", "SetDeviceBreakpoints_Legacy", {
    Tablet: OS.DataConversion.JSNodeParamConverter.to(vars.value.deviceConfigurationInLocal.tabletWidthAttr, OS.Types.Integer),
    Phone: OS.DataConversion.JSNodeParamConverter.to(vars.value.deviceConfigurationInLocal.phoneWidthAttr, OS.Types.Integer)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetDeviceBreakpoints_Legacy$vars", [{
    name: "DeviceConfiguration",
    attrName: "deviceConfigurationInLocal",
    mandatory: true,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.DeviceConfigurationRec();
    },
    complexType: OutSystemsUIModel.DeviceConfigurationRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setDeviceBreakpoints_Legacy$Action = function (deviceConfigurationIn) {
    deviceConfigurationIn = (deviceConfigurationIn === undefined) ? new OutSystemsUIModel.DeviceConfigurationRec() : deviceConfigurationIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setDeviceBreakpoints_Legacy$Action.bind(controller, deviceConfigurationIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SetDeviceBreakpoints_Legacy.SetDeviceOnResizeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $public.View.registerDeviceClassGetter(function() {
    
        var deviceList;
        var userValues;
        var device;
        var body = document.body;
        var windowWidth = window.innerWidth || document.documentElement.clientWidth;
        var windowHeight = window.innerHeight || document.documentElement.clientHeight;
        var orient = windowWidth > windowHeight ? "landscape" : "portrait";
        var isLandscape = (orient === "landscape");
        
        userValues = {
            phone: $parameters.Phone,
            tablet: $parameters.Tablet,
        };
        
        var phoneMax = userValues.phone ? userValues.phone : 700;
        var tabletMax = userValues.tablet ? userValues.tablet : 1024;
       
        deviceList = ["phone", "tablet","desktop"];
        
        switch(true) {
            case (windowWidth < phoneMax || (!isLandscape && windowHeight < phoneMax)):
                device = 0;
                break;
            case ((windowWidth >= phoneMax && windowWidth <= tabletMax) || (windowHeight >= phoneMax && windowHeight <= tabletMax && isLandscape)):
                device = 1;
                break;
            case (windowWidth > tabletMax ||(windowHeight > tabletMax && isLandscape)):  
                device = 2;
                break;
        }
       
       return [orient, deviceList[device]];
       
    });
    
    };
    });
    
    define("OutSystemsUI.controller$SetFlatpickrConfigs", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetFlatpickrConfigs.SetProviderConfigsJS", "OutSystemsUI.model$FlatpickrConfigsRec", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetFlatpickrConfigs_SetProviderConfigsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setFlatpickrConfigs$Action = function (widgetIdIn, providerConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFlatpickrConfigs$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.providerConfigsInLocal = providerConfigsIn.clone();
    var setProviderConfigsJSResult = new OS.DataTypes.VariableHolder();
    var jSONProviderConfigsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFlatpickrConfigs$outVars"))());
    // JSON Serialize: JSONProviderConfigs
    jSONProviderConfigsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.providerConfigsInLocal, false, false);
    setProviderConfigsJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetFlatpickrConfigs_SetProviderConfigsJS, "SetProviderConfigs", "SetFlatpickrConfigs", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ProviderConfigs: OS.DataConversion.JSNodeParamConverter.to(jSONProviderConfigsVar.value.jSONOut, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFlatpickrConfigs$setProviderConfigsJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderConfigsJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFlatpickrConfigs$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ProviderConfigs",
    attrName: "providerConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.FlatpickrConfigsRec();
    },
    complexType: OutSystemsUIModel.FlatpickrConfigsRec
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFlatpickrConfigs$setProviderConfigsJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFlatpickrConfigs$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setFlatpickrConfigs$Action = function (widgetIdIn, providerConfigsIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    providerConfigsIn = (providerConfigsIn === undefined) ? new OutSystemsUIModel.FlatpickrConfigsRec() : providerConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setFlatpickrConfigs$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), providerConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetFlatpickrConfigs.SetProviderConfigsJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var apiMethod = OutSystems.OSUI.Utils.GetPickerExtensibilityAPI($parameters.WidgetId, "SetProviderConfigs");
    
    $parameters.ResponseJSON = apiMethod($parameters.WidgetId, Providers.OSUI.SharedProviderResources.Flatpickr.NormalizeFlatpickrConfigs(JSON.parse($parameters.ProviderConfigs)));
    };
    });
    
    define("OutSystemsUI.controller$SetFlatpickrEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetFlatpickrEvent.SetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetFlatpickrEvent_SetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setFlatpickrEvent$Action = function (widgetIdIn, eventNameIn, handlerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFlatpickrEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.handlerInLocal = handlerIn;
    var setProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFlatpickrEvent$outVars"))());
    setProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetFlatpickrEvent_SetProviderEventJS, "SetProviderEvent", "SetFlatpickrEvent", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Handler: OS.DataConversion.JSNodeParamConverter.to(vars.value.handlerInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFlatpickrEvent$setProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // FlatpickrEventId = JSONDeserializeProviderEventReturnMessage.Data.ProviderEventId
    outVars.value.flatpickrEventIdOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.providerEventIdAttr;
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFlatpickrEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Handler",
    attrName: "handlerInLocal",
    mandatory: false,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFlatpickrEvent$setProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFlatpickrEvent$outVars", [{
    name: "FlatpickrEventId",
    attrName: "flatpickrEventIdOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setFlatpickrEvent$Action = function (widgetIdIn, eventNameIn, handlerIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    handlerIn = (handlerIn === undefined) ? null : handlerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setFlatpickrEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(handlerIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    FlatpickrEventId: OS.DataConversion.JSNodeParamConverter.to(actionResults.flatpickrEventIdOut, OS.Types.Text),
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetFlatpickrEvent.SetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var apiMethod = OutSystems.OSUI.Utils.GetPickerExtensibilityAPI($parameters.WidgetId, "SetProviderEvent");
    
    $parameters.ResponseJSON = apiMethod($parameters.WidgetId, $parameters.EventName, $parameters.Handler);
    
    };
    });
    
    define("OutSystemsUI.controller$SetFocus", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetFocus.SetFocusJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$SetFocus_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetFocus_SetFocusJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setFocus$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFocus$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var setFocus_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var setFocusJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFocus$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    setFocusJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetFocus_SetFocusJS, "SetFocus", "SetFocus", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFocus$setFocusJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setFocusJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: SetFocus_Legacy
    setFocus_LegacyVar.value = OutSystemsUIController.default.setFocus_Legacy$Action(vars.value.widgetIdInLocal, callContext);
    
    // Set Result Information
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Code = SetFocus_Legacy.ErrorMessage.Code
    outVars.value.errorMessageOut.codeAttr = setFocus_LegacyVar.value.errorMessageOut.codeAttr;
    // ErrorMessage.Message = SetFocus_Legacy.ErrorMessage.Message
    outVars.value.errorMessageOut.messageAttr = setFocus_LegacyVar.value.errorMessageOut.messageAttr;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFocus$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFocus$setFocusJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFocus$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setFocus$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setFocus$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetFocus.SetFocusJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Accessibility.SetFocus($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SetFocus_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetFocus_Legacy.SetFocusJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetFocus_Legacy_SetFocusJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setFocus_Legacy$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFocus_Legacy$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetFocus_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("SetFocus", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetFocus_Legacy_SetFocusJS, "SetFocus", "SetFocus_Legacy", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("SetFocus_Legacy.SetFocus_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000006"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000006";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFocus_Legacy$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetFocus_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setFocus_Legacy$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setFocus_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetFocus_Legacy.SetFocusJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var elementId = document.getElementById($parameters.WidgetId);
    
    if(elementId) {
        elementId.focus();
    }    
    
    
    };
    });
    
    define("OutSystemsUI.controller$SetLang", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetLang.SetLangJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$SetLang_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetLang_SetLangJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setLang$Action = function (langIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetLang$vars"))());
    vars.value.langInLocal = langIn;
    var setLang_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var setLangJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetLang$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    setLangJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetLang_SetLangJS, "SetLang", "SetLang", {
    Lang: OS.DataConversion.JSNodeParamConverter.to(vars.value.langInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetLang$setLangJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setLangJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: SetLang_Legacy
    setLang_LegacyVar.value = OutSystemsUIController.default.setLang_Legacy$Action(vars.value.langInLocal, callContext);
    
    // Set Result Information
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Code = SetLang_Legacy.ErrorMessage.Code
    outVars.value.errorMessageOut.codeAttr = setLang_LegacyVar.value.errorMessageOut.codeAttr;
    // ErrorMessage.Message = SetLang_Legacy.ErrorMessage.Message
    outVars.value.errorMessageOut.messageAttr = setLang_LegacyVar.value.errorMessageOut.messageAttr;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetLang$vars", [{
    name: "Lang",
    attrName: "langInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetLang$setLangJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetLang$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setLang$Action = function (langIn) {
    langIn = (langIn === undefined) ? "" : langIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setLang$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(langIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetLang.SetLangJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Accessibility.SetLang($parameters.Lang);
    };
    });
    
    define("OutSystemsUI.controller$SetLang_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetLang_Legacy.SetLangJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetLang_Legacy_SetLangJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setLang_Legacy$Action = function (langIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetLang_Legacy$vars"))());
    vars.value.langInLocal = langIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetLang_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("SetLang", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetLang_Legacy_SetLangJS, "SetLang", "SetLang_Legacy", {
    Lang: OS.DataConversion.JSNodeParamConverter.to(vars.value.langInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("SetLang_Legacy.SetLang_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000007"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000007";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetLang_Legacy$vars", [{
    name: "Lang",
    attrName: "langInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetLang_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setLang_Legacy$Action = function (langIn) {
    langIn = (langIn === undefined) ? "" : langIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setLang_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(langIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetLang_Legacy.SetLangJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var hasLangAttribute = document.documentElement.lang !== "";
    
    if(!hasLangAttribute && $parameters.Lang !== "") {
        document.documentElement.lang = $parameters.Lang;
    }
    };
    });
    
    define("OutSystemsUI.controller$SetLocalLanguage", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetLocalLanguage.SetAppLanguageJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetLocalLanguage_SetAppLanguageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setLocalLanguage$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    // Trigger the API method that will set the ServerDate format.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetLocalLanguage_SetAppLanguageJS, "SetAppLanguage", "SetLocalLanguage", {
    Locale: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.getCurrentLocale(), OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.setLocalLanguage$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setLocalLanguage$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SetLocalLanguage.SetAppLanguageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Language.Set($parameters.Locale);
    };
    });
    
    define("OutSystemsUI.controller$SetMenuAttributes", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetMenuAttributes.JsSetMenuAttributesJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetMenuAttributes_JsSetMenuAttributesJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setMenuAttributes$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var jsSetMenuAttributesJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuAttributes$outVars"))());
    jsSetMenuAttributesJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetMenuAttributes_JsSetMenuAttributesJS, "JsSetMenuAttributes", "SetMenuAttributes", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuAttributes$jsSetMenuAttributesJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsSetMenuAttributesJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuAttributes$jsSetMenuAttributesJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuAttributes$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setMenuAttributes$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setMenuAttributes$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetMenuAttributes.JsSetMenuAttributesJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.SetMenuAttributes();
    };
    });
    
    define("OutSystemsUI.controller$SetMenuIcon", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetMenuIcon.JsSetMenuIconJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetMenuIcon_JsSetMenuIconJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setMenuIcon$Action = function (menuActionIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuIcon$vars"))());
    vars.value.menuActionInLocal = menuActionIn;
    var jsSetMenuIconJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuIcon$outVars"))());
    jsSetMenuIconJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetMenuIcon_JsSetMenuIconJS, "JsSetMenuIcon", "SetMenuIcon", {
    MenuAction: OS.DataConversion.JSNodeParamConverter.to(vars.value.menuActionInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuIcon$jsSetMenuIconJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsSetMenuIconJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Outputs
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuIcon$vars", [{
    name: "MenuAction",
    attrName: "menuActionInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuIcon$jsSetMenuIconJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuIcon$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setMenuIcon$Action = function (menuActionIn) {
    menuActionIn = (menuActionIn === undefined) ? "" : menuActionIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setMenuIcon$Action.bind(controller, menuActionIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetMenuIcon.JsSetMenuIconJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.SetMenuIcon($parameters.MenuAction);
    };
    });
    
    define("OutSystemsUI.controller$SetMenuIconListeners", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetMenuIconListeners.JsSetEventListenerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetMenuIconListeners_JsSetEventListenerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setMenuIconListeners$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var jsSetEventListenerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuIconListeners$outVars"))());
    jsSetEventListenerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetMenuIconListeners_JsSetEventListenerJS, "JsSetEventListener", "SetMenuIconListeners", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuIconListeners$jsSetEventListenerJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsSetEventListenerJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuIconListeners$jsSetEventListenerJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuIconListeners$outVars", [{
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.setMenuIconListeners$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setMenuIconListeners$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    ErrorMessage: actionResults.errorMessageOut,
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean)
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetMenuIconListeners.JsSetEventListenerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.SetMenuIconListeners();
    };
    });
    
    define("OutSystemsUI.controller$SetMenuListeners", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetMenuListeners.JsSetEventListenerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetMenuListeners_JsSetEventListenerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setMenuListeners$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuListeners$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var jsSetEventListenerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuListeners$outVars"))());
    jsSetEventListenerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetMenuListeners_JsSetEventListenerJS, "JsSetEventListener", "SetMenuListeners", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetMenuListeners$jsSetEventListenerJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsSetEventListenerJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuListeners$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuListeners$jsSetEventListenerJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetMenuListeners$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setMenuListeners$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setMenuListeners$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetMenuListeners.JsSetEventListenerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.SetMenuListeners($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SetNoUISliderConfigs", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetNoUISliderConfigs.SetProviderConfigsJS", "OutSystemsUI.model$NoUiSliderConfigsRec", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetNoUISliderConfigs_SetProviderConfigsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setNoUISliderConfigs$Action = function (widgetIdIn, providerConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetNoUISliderConfigs$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.providerConfigsInLocal = providerConfigsIn.clone();
    var setProviderConfigsJSResult = new OS.DataTypes.VariableHolder();
    var jSONProviderConfigsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetNoUISliderConfigs$outVars"))());
    // JSON Serialize: JSONProviderConfigs
    jSONProviderConfigsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.providerConfigsInLocal, false, false);
    setProviderConfigsJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetNoUISliderConfigs_SetProviderConfigsJS, "SetProviderConfigs", "SetNoUISliderConfigs", {
    ProviderConfigs: OS.DataConversion.JSNodeParamConverter.to(jSONProviderConfigsVar.value.jSONOut, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetNoUISliderConfigs$setProviderConfigsJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderConfigsJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetNoUISliderConfigs$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ProviderConfigs",
    attrName: "providerConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.NoUiSliderConfigsRec();
    },
    complexType: OutSystemsUIModel.NoUiSliderConfigsRec
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetNoUISliderConfigs$setProviderConfigsJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetNoUISliderConfigs$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setNoUISliderConfigs$Action = function (widgetIdIn, providerConfigsIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    providerConfigsIn = (providerConfigsIn === undefined) ? new OutSystemsUIModel.NoUiSliderConfigsRec() : providerConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setNoUISliderConfigs$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), providerConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetNoUISliderConfigs.SetProviderConfigsJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.SetProviderConfigs(
        $parameters.WidgetId,
        Providers.OSUI.RangeSlider.NoUISlider.Utils.NormalizeNoUISliderConfigs(JSON.parse($parameters.ProviderConfigs))
    );
    };
    });
    
    define("OutSystemsUI.controller$SetNoUISliderEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetNoUISliderEvent.SetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetNoUISliderEvent_SetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setNoUISliderEvent$Action = function (widgetIdIn, eventNameIn, handlerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetNoUISliderEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.handlerInLocal = handlerIn;
    var setProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetNoUISliderEvent$outVars"))());
    setProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetNoUISliderEvent_SetProviderEventJS, "SetProviderEvent", "SetNoUISliderEvent", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Handler: OS.DataConversion.JSNodeParamConverter.to(vars.value.handlerInLocal, OS.Types.Object),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetNoUISliderEvent$setProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // NoUISliderEventId = JSONDeserializeProviderEventReturnMessage.Data.ProviderEventId
    outVars.value.noUISliderEventIdOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.providerEventIdAttr;
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetNoUISliderEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Handler",
    attrName: "handlerInLocal",
    mandatory: false,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetNoUISliderEvent$setProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetNoUISliderEvent$outVars", [{
    name: "NoUISliderEventId",
    attrName: "noUISliderEventIdOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setNoUISliderEvent$Action = function (widgetIdIn, eventNameIn, handlerIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    handlerIn = (handlerIn === undefined) ? null : handlerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setNoUISliderEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(handlerIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    NoUISliderEventId: OS.DataConversion.JSNodeParamConverter.to(actionResults.noUISliderEventIdOut, OS.Types.Text),
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetNoUISliderEvent.SetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.SetProviderEvent($parameters.WidgetId, $parameters.EventName, $parameters.Handler);
    };
    });
    
    define("OutSystemsUI.controller$SetProgressBarValue", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetProgressBarValue.SetProgressValueJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetProgressBarValue_SetProgressValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setProgressBarValue$Action = function (widgetIdIn, progressIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetProgressBarValue$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.progressInLocal = progressIn;
    var setProgressValueJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetProgressBarValue$outVars"))());
    setProgressValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetProgressBarValue_SetProgressValueJS, "SetProgressValue", "SetProgressBarValue", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Progress: OS.DataConversion.JSNodeParamConverter.to(vars.value.progressInLocal, OS.Types.Integer),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetProgressBarValue$setProgressValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProgressValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetProgressBarValue$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Progress",
    attrName: "progressInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetProgressBarValue$setProgressValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetProgressBarValue$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setProgressBarValue$Action = function (widgetIdIn, progressIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    progressIn = (progressIn === undefined) ? 0 : progressIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setProgressBarValue$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(progressIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetProgressBarValue.SetProgressValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.ProgressAPI.SetProgressValue($parameters.WidgetId, $parameters.Progress);
    };
    });
    
    define("OutSystemsUI.controller$SetProgressCircleValue", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetProgressCircleValue.SetProgressValueJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetProgressCircleValue_SetProgressValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setProgressCircleValue$Action = function (widgetIdIn, progressIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetProgressCircleValue$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.progressInLocal = progressIn;
    var setProgressValueJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetProgressCircleValue$outVars"))());
    setProgressValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetProgressCircleValue_SetProgressValueJS, "SetProgressValue", "SetProgressCircleValue", {
    Progress: OS.DataConversion.JSNodeParamConverter.to(vars.value.progressInLocal, OS.Types.Integer),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetProgressCircleValue$setProgressValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProgressValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetProgressCircleValue$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Progress",
    attrName: "progressInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetProgressCircleValue$setProgressValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetProgressCircleValue$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setProgressCircleValue$Action = function (widgetIdIn, progressIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    progressIn = (progressIn === undefined) ? 0 : progressIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setProgressCircleValue$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(progressIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetProgressCircleValue.SetProgressValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.ProgressAPI.SetProgressValue($parameters.UniqueId, $parameters.Progress);
    };
    });
    
    define("OutSystemsUI.controller$SetRangeSliderChangeOnDragEnd", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetRangeSliderChangeOnDragEnd.SetRangeSliderChangeOnDragEndJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetRangeSliderChangeOnDragEnd_SetRangeSliderChangeOnDragEndJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setRangeSliderChangeOnDragEnd$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderChangeOnDragEnd$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var setRangeSliderChangeOnDragEndJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderChangeOnDragEnd$outVars"))());
    setRangeSliderChangeOnDragEndJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetRangeSliderChangeOnDragEnd_SetRangeSliderChangeOnDragEndJS, "SetRangeSliderChangeOnDragEnd", "SetRangeSliderChangeOnDragEnd", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderChangeOnDragEnd$setRangeSliderChangeOnDragEndJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setRangeSliderChangeOnDragEndJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderChangeOnDragEnd$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderChangeOnDragEnd$setRangeSliderChangeOnDragEndJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderChangeOnDragEnd$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setRangeSliderChangeOnDragEnd$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setRangeSliderChangeOnDragEnd$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetRangeSliderChangeOnDragEnd.SetRangeSliderChangeOnDragEndJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.SetRangeIntervalChangeOnDragEnd($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SetRangeSliderIntervalChangeOnDragEnd", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetRangeSliderIntervalChangeOnDragEnd.SetRangeSliderChangeOnDragEndJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetRangeSliderIntervalChangeOnDragEnd_SetRangeSliderChangeOnDragEndJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setRangeSliderIntervalChangeOnDragEnd$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderIntervalChangeOnDragEnd$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var setRangeSliderChangeOnDragEndJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderIntervalChangeOnDragEnd$outVars"))());
    setRangeSliderChangeOnDragEndJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetRangeSliderIntervalChangeOnDragEnd_SetRangeSliderChangeOnDragEndJS, "SetRangeSliderChangeOnDragEnd", "SetRangeSliderIntervalChangeOnDragEnd", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderIntervalChangeOnDragEnd$setRangeSliderChangeOnDragEndJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setRangeSliderChangeOnDragEndJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderIntervalChangeOnDragEnd$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderIntervalChangeOnDragEnd$setRangeSliderChangeOnDragEndJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderIntervalChangeOnDragEnd$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setRangeSliderIntervalChangeOnDragEnd$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setRangeSliderIntervalChangeOnDragEnd$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetRangeSliderIntervalChangeOnDragEnd.SetRangeSliderChangeOnDragEndJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.SetRangeIntervalChangeOnDragEnd($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SetRangeSliderIntervalValue", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetRangeSliderIntervalValue.SetRangeSliderValueJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetRangeSliderIntervalValue_SetRangeSliderValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setRangeSliderIntervalValue$Action = function (widgetIdIn, intervalStartIn, intervalEndIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderIntervalValue$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.intervalStartInLocal = intervalStartIn;
    vars.value.intervalEndInLocal = intervalEndIn;
    var setRangeSliderValueJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderIntervalValue$outVars"))());
    setRangeSliderValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetRangeSliderIntervalValue_SetRangeSliderValueJS, "SetRangeSliderValue", "SetRangeSliderIntervalValue", {
    ValueFrom: OS.DataConversion.JSNodeParamConverter.to(vars.value.intervalStartInLocal, OS.Types.Decimal),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ValueTo: OS.DataConversion.JSNodeParamConverter.to(vars.value.intervalEndInLocal, OS.Types.Decimal),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderIntervalValue$setRangeSliderValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setRangeSliderValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderIntervalValue$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IntervalStart",
    attrName: "intervalStartInLocal",
    mandatory: true,
    dataType: OS.Types.Decimal,
    defaultValue: function () {
    return OS.DataTypes.Decimal.defaultValue;
    }
    }, {
    name: "IntervalEnd",
    attrName: "intervalEndInLocal",
    mandatory: true,
    dataType: OS.Types.Decimal,
    defaultValue: function () {
    return OS.DataTypes.Decimal.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderIntervalValue$setRangeSliderValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderIntervalValue$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setRangeSliderIntervalValue$Action = function (widgetIdIn, intervalStartIn, intervalEndIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    intervalStartIn = (intervalStartIn === undefined) ? OS.DataTypes.Decimal.defaultValue : intervalStartIn;
    intervalEndIn = (intervalEndIn === undefined) ? OS.DataTypes.Decimal.defaultValue : intervalEndIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setRangeSliderIntervalValue$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(intervalStartIn, OS.Types.Decimal), OS.DataConversion.JSNodeParamConverter.from(intervalEndIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetRangeSliderIntervalValue.SetRangeSliderValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.SetRangeSliderValue($parameters.UniqueId, $parameters.ValueFrom, $parameters.ValueTo);
    };
    });
    
    define("OutSystemsUI.controller$SetRangeSliderValue", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetRangeSliderValue.SetRangeSliderValueJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetRangeSliderValue_SetRangeSliderValueJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setRangeSliderValue$Action = function (widgetIdIn, valueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderValue$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.valueInLocal = valueIn;
    var setRangeSliderValueJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderValue$outVars"))());
    setRangeSliderValueJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetRangeSliderValue_SetRangeSliderValueJS, "SetRangeSliderValue", "SetRangeSliderValue", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Value: OS.DataConversion.JSNodeParamConverter.to(vars.value.valueInLocal, OS.Types.Decimal),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetRangeSliderValue$setRangeSliderValueJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setRangeSliderValueJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderValue$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Value",
    attrName: "valueInLocal",
    mandatory: true,
    dataType: OS.Types.Decimal,
    defaultValue: function () {
    return OS.DataTypes.Decimal.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderValue$setRangeSliderValueJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetRangeSliderValue$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setRangeSliderValue$Action = function (widgetIdIn, valueIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    valueIn = (valueIn === undefined) ? OS.DataTypes.Decimal.defaultValue : valueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setRangeSliderValue$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(valueIn, OS.Types.Decimal)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetRangeSliderValue.SetRangeSliderValueJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.SetRangeSliderValue($parameters.UniqueId, $parameters.Value);
    };
    });
    
    define("OutSystemsUI.controller$SetSelectedTableRow", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetSelectedTableRow.SetSelectedRowJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetSelectedTableRow_SetSelectedRowJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setSelectedTableRow$Action = function (tableIdIn, rowNumberIn, isSelectedIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSelectedTableRow$vars"))());
    vars.value.tableIdInLocal = tableIdIn;
    vars.value.rowNumberInLocal = rowNumberIn;
    vars.value.isSelectedInLocal = isSelectedIn;
    var setSelectedRowJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSelectedTableRow$outVars"))());
    setSelectedRowJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetSelectedTableRow_SetSelectedRowJS, "SetSelectedRow", "SetSelectedTableRow", {
    Value: OS.DataConversion.JSNodeParamConverter.to(vars.value.isSelectedInLocal, OS.Types.Boolean),
    RowNumber: OS.DataConversion.JSNodeParamConverter.to(vars.value.rowNumberInLocal, OS.Types.Integer),
    TabletId: OS.DataConversion.JSNodeParamConverter.to(vars.value.tableIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSelectedTableRow$setSelectedRowJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setSelectedRowJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSelectedTableRow$vars", [{
    name: "TableId",
    attrName: "tableIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "RowNumber",
    attrName: "rowNumberInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }, {
    name: "IsSelected",
    attrName: "isSelectedInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSelectedTableRow$setSelectedRowJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSelectedTableRow$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setSelectedTableRow$Action = function (tableIdIn, rowNumberIn, isSelectedIn) {
    tableIdIn = (tableIdIn === undefined) ? "" : tableIdIn;
    rowNumberIn = (rowNumberIn === undefined) ? 0 : rowNumberIn;
    isSelectedIn = (isSelectedIn === undefined) ? false : isSelectedIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setSelectedTableRow$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(tableIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(rowNumberIn, OS.Types.Integer), OS.DataConversion.JSNodeParamConverter.from(isSelectedIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetSelectedTableRow.SetSelectedRowJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.SetSelectedTableRow($parameters.TabletId,$parameters.RowNumber,$parameters.Value);
    };
    });
    
    define("OutSystemsUI.controller$SetServerDateFormat", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetServerDateFormat.SetServerDateFormatJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetServerDateFormat_SetServerDateFormatJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setServerDateFormat$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    // Trigger the API method that will set the ServerDate format.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SetServerDateFormat_SetServerDateFormatJS, "SetServerDateFormat", "SetServerDateFormat", {
    SampleDate: OS.DataConversion.JSNodeParamConverter.to(OS.BuiltinFunctions.dateToText(OS.BuiltinFunctions.newDate(1900, 10, 13)), OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.setServerDateFormat$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setServerDateFormat$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SetServerDateFormat.SetServerDateFormatJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Dates.SetServerDateFormat($parameters.SampleDate);
    };
    });
    
    define("OutSystemsUI.controller$SetSplideConfigs", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetSplideConfigs.SetProviderConfigsJS", "OutSystemsUI.model$SplideConfigsRec", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetSplideConfigs_SetProviderConfigsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setSplideConfigs$Action = function (widgetIdIn, providerConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSplideConfigs$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.providerConfigsInLocal = providerConfigsIn.clone();
    var setProviderConfigsJSResult = new OS.DataTypes.VariableHolder();
    var jSONProviderConfigsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSplideConfigs$outVars"))());
    // JSON Serialize: JSONProviderConfigs
    jSONProviderConfigsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.providerConfigsInLocal, false, false);
    setProviderConfigsJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetSplideConfigs_SetProviderConfigsJS, "SetProviderConfigs", "SetSplideConfigs", {
    ProviderConfigs: OS.DataConversion.JSNodeParamConverter.to(jSONProviderConfigsVar.value.jSONOut, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSplideConfigs$setProviderConfigsJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderConfigsJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSplideConfigs$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ProviderConfigs",
    attrName: "providerConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.SplideConfigsRec();
    },
    complexType: OutSystemsUIModel.SplideConfigsRec
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSplideConfigs$setProviderConfigsJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSplideConfigs$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setSplideConfigs$Action = function (widgetIdIn, providerConfigsIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    providerConfigsIn = (providerConfigsIn === undefined) ? new OutSystemsUIModel.SplideConfigsRec() : providerConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setSplideConfigs$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), providerConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetSplideConfigs.SetProviderConfigsJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.SetProviderConfigs(
            $parameters.WidgetId, 
            Providers.OSUI.Carousel.Splide.Utils.NormalizeSplideConfigs(JSON.parse($parameters.ProviderConfigs))
        );
    };
    });
    
    define("OutSystemsUI.controller$SetSplideEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetSplideEvent.SetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetSplideEvent_SetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setSplideEvent$Action = function (widgetIdIn, eventNameIn, handlerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSplideEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.handlerInLocal = handlerIn;
    var setProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSplideEvent$outVars"))());
    setProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetSplideEvent_SetProviderEventJS, "SetProviderEvent", "SetSplideEvent", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Handler: OS.DataConversion.JSNodeParamConverter.to(vars.value.handlerInLocal, OS.Types.Object),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetSplideEvent$setProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // SplideEventId = JSONDeserializeProviderEventReturnMessage.Data.ProviderEventId
    outVars.value.splideEventIdOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.providerEventIdAttr;
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSplideEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Handler",
    attrName: "handlerInLocal",
    mandatory: false,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSplideEvent$setProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetSplideEvent$outVars", [{
    name: "SplideEventId",
    attrName: "splideEventIdOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setSplideEvent$Action = function (widgetIdIn, eventNameIn, handlerIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    handlerIn = (handlerIn === undefined) ? null : handlerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setSplideEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(handlerIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    SplideEventId: OS.DataConversion.JSNodeParamConverter.to(actionResults.splideEventIdOut, OS.Types.Text),
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetSplideEvent.SetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.SetProviderEvent($parameters.WidgetId, $parameters.EventName, $parameters.Handler);
    };
    });
    
    define("OutSystemsUI.controller$SetVirtualSelectConfigs", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetVirtualSelectConfigs.SetProviderConfigsJS", "OutSystemsUI.model$VirtualSelectConfigsRec", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetVirtualSelectConfigs_SetProviderConfigsJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setVirtualSelectConfigs$Action = function (widgetIdIn, providerConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetVirtualSelectConfigs$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.providerConfigsInLocal = providerConfigsIn.clone();
    var setProviderConfigsJSResult = new OS.DataTypes.VariableHolder();
    var jSONProviderConfigsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetVirtualSelectConfigs$outVars"))());
    // JSON Serialize: JSONProviderConfigs
    jSONProviderConfigsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.providerConfigsInLocal, false, false);
    setProviderConfigsJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetVirtualSelectConfigs_SetProviderConfigsJS, "SetProviderConfigs", "SetVirtualSelectConfigs", {
    ProviderConfigs: OS.DataConversion.JSNodeParamConverter.to(jSONProviderConfigsVar.value.jSONOut, OS.Types.Text),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetVirtualSelectConfigs$setProviderConfigsJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderConfigsJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetVirtualSelectConfigs$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "ProviderConfigs",
    attrName: "providerConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.VirtualSelectConfigsRec();
    },
    complexType: OutSystemsUIModel.VirtualSelectConfigsRec
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetVirtualSelectConfigs$setProviderConfigsJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetVirtualSelectConfigs$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setVirtualSelectConfigs$Action = function (widgetIdIn, providerConfigsIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    providerConfigsIn = (providerConfigsIn === undefined) ? new OutSystemsUIModel.VirtualSelectConfigsRec() : providerConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setVirtualSelectConfigs$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), providerConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetVirtualSelectConfigs.SetProviderConfigsJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetProviderConfigs(
            $parameters.WidgetId, 
            Providers.OSUI.Dropdown.VirtualSelect.Utils.NormalizeVirtualSelectConfigs(JSON.parse($parameters.ProviderConfigs))
        );
    };
    });
    
    define("OutSystemsUI.controller$SetVirtualSelectEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SetVirtualSelectEvent.SetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SetVirtualSelectEvent_SetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.setVirtualSelectEvent$Action = function (widgetIdIn, eventNameIn, handlerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetVirtualSelectEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.handlerInLocal = handlerIn;
    var setProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SetVirtualSelectEvent$outVars"))());
    setProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SetVirtualSelectEvent_SetProviderEventJS, "SetProviderEvent", "SetVirtualSelectEvent", {
    Handler: OS.DataConversion.JSNodeParamConverter.to(vars.value.handlerInLocal, OS.Types.Object),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SetVirtualSelectEvent$setProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // VirtualSelectEventId = JSONDeserializeProviderEventReturnMessage.Data.ProviderEventId
    outVars.value.virtualSelectEventIdOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.providerEventIdAttr;
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetVirtualSelectEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Handler",
    attrName: "handlerInLocal",
    mandatory: false,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetVirtualSelectEvent$setProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SetVirtualSelectEvent$outVars", [{
    name: "VirtualSelectEventId",
    attrName: "virtualSelectEventIdOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.setVirtualSelectEvent$Action = function (widgetIdIn, eventNameIn, handlerIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    handlerIn = (handlerIn === undefined) ? null : handlerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.setVirtualSelectEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(handlerIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    VirtualSelectEventId: OS.DataConversion.JSNodeParamConverter.to(actionResults.virtualSelectEventIdOut, OS.Types.Text),
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SetVirtualSelectEvent.SetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.SetProviderEvent($parameters.WidgetId, $parameters.EventName, $parameters.Handler);
    };
    });
    
    define("OutSystemsUI.controller$ShowPassword", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ShowPassword.ShowPasswordJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ShowPassword_ShowPasswordJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.showPassword$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var showPasswordJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ShowPassword$outVars"))());
    showPasswordJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ShowPassword_ShowPasswordJS, "ShowPassword", "ShowPassword", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ShowPassword$showPasswordJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(showPasswordJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ShowPassword$showPasswordJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ShowPassword$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.showPassword$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.showPassword$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ShowPassword.ShowPasswordJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.ShowPassword();
    };
    });
    
    define("OutSystemsUI.controller$SidebarChangeDirection", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarChangeDirection.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarChangeDirection_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarChangeDirection$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarChangeDirection$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarChangeDirection_ChangePropertyJS, "ChangeProperty", "SidebarChangeDirection", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Direction", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarChangeDirection$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarChangeDirection$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarChangeDirection$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarChangeDirection.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SidebarChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "SidebarChangeExtendedClass", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SidebarChangeHasOverlay", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarChangeHasOverlay.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarChangeHasOverlay_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarChangeHasOverlay$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarChangeHasOverlay$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarChangeHasOverlay_ChangePropertyJS, "ChangeProperty", "SidebarChangeHasOverlay", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("HasOverlay", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarChangeHasOverlay$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarChangeHasOverlay$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarChangeHasOverlay$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarChangeHasOverlay.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SidebarChangeStartsOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarChangeStartsOpen.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarChangeStartsOpen_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarChangeStartsOpen$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarChangeStartsOpen$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarChangeStartsOpen_ChangePropertyJS, "ChangeProperty", "SidebarChangeStartsOpen", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("StartsOpen", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarChangeStartsOpen$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarChangeStartsOpen$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarChangeStartsOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarChangeStartsOpen.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SidebarChangeWidth", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarChangeWidth.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarChangeWidth_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarChangeWidth$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarChangeWidth$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarChangeWidth_ChangePropertyJS, "ChangeProperty", "SidebarChangeWidth", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Width", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarChangeWidth$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarChangeWidth$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarChangeWidth$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarChangeWidth.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SidebarClickOutsideToClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarClickOutsideToClose.JsClickOutsideToCloseJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarClickOutsideToClose_JsClickOutsideToCloseJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarClickOutsideToClose$Action = function (widgetIdIn, closeOnOutsideClickIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarClickOutsideToClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.closeOnOutsideClickInLocal = closeOnOutsideClickIn;
    var jsClickOutsideToCloseJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarClickOutsideToClose$outVars"))());
    // Script to enable/disable the click outside to close the Sidebar.
    jsClickOutsideToCloseJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarClickOutsideToClose_JsClickOutsideToCloseJS, "JsClickOutsideToClose", "SidebarClickOutsideToClose", {
    CloseOnOutsideClick: OS.DataConversion.JSNodeParamConverter.to(vars.value.closeOnOutsideClickInLocal, OS.Types.Boolean),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarClickOutsideToClose$jsClickOutsideToCloseJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsClickOutsideToCloseJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarClickOutsideToClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "CloseOnOutsideClick",
    attrName: "closeOnOutsideClickInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarClickOutsideToClose$jsClickOutsideToCloseJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarClickOutsideToClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarClickOutsideToClose$Action = function (widgetIdIn, closeOnOutsideClickIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    closeOnOutsideClickIn = (closeOnOutsideClickIn === undefined) ? false : closeOnOutsideClickIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarClickOutsideToClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(closeOnOutsideClickIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SidebarClickOutsideToClose.JsClickOutsideToCloseJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SidebarAPI.ClickOutsideToClose($parameters.WidgetId, $parameters.CloseOnOutsideClick);
    };
    });
    
    define("OutSystemsUI.controller$SidebarClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarClose.CloseSidebarJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarClose_CloseSidebarJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeSidebarJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarClose$outVars"))());
    closeSidebarJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarClose_CloseSidebarJS, "CloseSidebar", "SidebarClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarClose$closeSidebarJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeSidebarJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarClose$closeSidebarJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SidebarClose.CloseSidebarJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SidebarAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SidebarCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarCreate.CreateSidebarJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarCreate_CreateSidebarJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarCreate_CreateSidebarJS, "CreateSidebar", "SidebarCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarCreate.CreateSidebarJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$SidebarDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarDestroy_DestroyJS, "Destroy", "SidebarDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SidebarInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarInitialize.InitializeSidebarJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarInitialize_InitializeSidebarJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarInitialize_InitializeSidebarJS, "InitializeSidebar", "SidebarInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarInitialize.InitializeSidebarJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SidebarOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarOpen.OpenSidebarJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarOpen_OpenSidebarJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openSidebarJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarOpen$outVars"))());
    openSidebarJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarOpen_OpenSidebarJS, "OpenSidebar", "SidebarOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarOpen$openSidebarJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openSidebarJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarOpen$openSidebarJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SidebarOpen.OpenSidebarJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SidebarAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SidebarRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarRegisterCallback_RegisterCallbackJS, "RegisterCallback", "SidebarRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SidebarRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SidebarAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$SidebarToggleSwipe", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SidebarToggleSwipe.ToggleSwipeSidebarJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SidebarToggleSwipe_ToggleSwipeSidebarJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.sidebarToggleSwipe$Action = function (widgetIdIn, enableSwipeIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarToggleSwipe$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.enableSwipeInLocal = enableSwipeIn;
    var toggleSwipeSidebarJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarToggleSwipe$outVars"))());
    toggleSwipeSidebarJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SidebarToggleSwipe_ToggleSwipeSidebarJS, "ToggleSwipeSidebar", "SidebarToggleSwipe", {
    EnableSwipe: OS.DataConversion.JSNodeParamConverter.to(vars.value.enableSwipeInLocal, OS.Types.Boolean),
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SidebarToggleSwipe$toggleSwipeSidebarJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(toggleSwipeSidebarJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarToggleSwipe$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EnableSwipe",
    attrName: "enableSwipeInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarToggleSwipe$toggleSwipeSidebarJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SidebarToggleSwipe$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.sidebarToggleSwipe$Action = function (widgetIdIn, enableSwipeIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    enableSwipeIn = (enableSwipeIn === undefined) ? true : enableSwipeIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.sidebarToggleSwipe$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(enableSwipeIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SidebarToggleSwipe.ToggleSwipeSidebarJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SidebarAPI.ToggleGestures($parameters.WidgetId, $parameters.EnableSwipe);
    };
    });
    
    define("OutSystemsUI.controller$SkipToContent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SkipToContent.SkipToContentJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$SkipToContent_Legacy", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SkipToContent_SkipToContentJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.skipToContent$Action = function (targetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SkipToContent$vars"))());
    vars.value.targetIdInLocal = targetIdIn;
    var skipToContent_LegacyVar = new OS.DataTypes.VariableHolder();
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var skipToContentJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SkipToContent$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    skipToContentJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SkipToContent_SkipToContentJS, "SkipToContent", "SkipToContent", {
    TargetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.targetIdInLocal, OS.Types.Text),
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SkipToContent$skipToContentJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(skipToContentJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: SkipToContent_Legacy
    skipToContent_LegacyVar.value = OutSystemsUIController.default.skipToContent_Legacy$Action(vars.value.targetIdInLocal, callContext);
    
    // Set Result Information
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Code = SkipToContent_Legacy.ErrorMessage.Code
    outVars.value.errorMessageOut.codeAttr = skipToContent_LegacyVar.value.errorMessageOut.codeAttr;
    // ErrorMessage.Message = SkipToContent_Legacy.ErrorMessage.Message
    outVars.value.errorMessageOut.messageAttr = skipToContent_LegacyVar.value.errorMessageOut.messageAttr;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SkipToContent$vars", [{
    name: "TargetId",
    attrName: "targetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SkipToContent$skipToContentJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SkipToContent$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.skipToContent$Action = function (targetIdIn) {
    targetIdIn = (targetIdIn === undefined) ? "" : targetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.skipToContent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(targetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SkipToContent.SkipToContentJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Accessibility.SkipToContent($parameters.TargetId);
    };
    });
    
    define("OutSystemsUI.controller$SkipToContent_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SkipToContent_Legacy.SkipToContentJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SkipToContent_Legacy_SkipToContentJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.skipToContent_Legacy$Action = function (targetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SkipToContent_Legacy$vars"))());
    vars.value.targetIdInLocal = targetIdIn;
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SkipToContent_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("SkipToContent", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_SkipToContent_Legacy_SkipToContentJS, "SkipToContent", "SkipToContent_Legacy", {
    TargetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.targetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("SkipToContent_Legacy.SkipToContent_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000008"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000008";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SkipToContent_Legacy$vars", [{
    name: "TargetId",
    attrName: "targetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SkipToContent_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.skipToContent_Legacy$Action = function (targetIdIn) {
    targetIdIn = (targetIdIn === undefined) ? "" : targetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.skipToContent_Legacy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(targetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SkipToContent_Legacy.SkipToContentJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var target = document.getElementById($parameters.TargetId);
    
    if(target) {
        var isFocusable = target.getAttribute('tabindex');
        
        if(isFocusable === null) {
            target.setAttribute('tabindex', '0');
            target.focus();
            target.removeAttribute('tabindex');    
        } else {
            target.focus();
        }
    }
    };
    });
    
    define("OutSystemsUI.controller$StackedCardsSwipeLeft", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$StackedCardsSwipeLeft.SwipeLeftJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_StackedCardsSwipeLeft_SwipeLeftJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.stackedCardsSwipeLeft$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.StackedCardsSwipeLeft$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_StackedCardsSwipeLeft_SwipeLeftJS, "SwipeLeft", "StackedCardsSwipeLeft", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.StackedCardsSwipeLeft$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.stackedCardsSwipeLeft$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.stackedCardsSwipeLeft$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$StackedCardsSwipeLeft.SwipeLeftJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element;
    
    var swipeActionInterval = setInterval(function(){
        
        element = document.getElementById($parameters.WidgetId);
    
        if( element !== null) {
            element.querySelector('.stackedcards-container').leftAction();
            clearInterval(swipeActionInterval);
        }
        
    }, 100)
    };
    });
    
    define("OutSystemsUI.controller$StackedCardsSwipeRight", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$StackedCardsSwipeRight.SwipeRightJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_StackedCardsSwipeRight_SwipeRightJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.stackedCardsSwipeRight$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.StackedCardsSwipeRight$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_StackedCardsSwipeRight_SwipeRightJS, "SwipeRight", "StackedCardsSwipeRight", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.StackedCardsSwipeRight$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.stackedCardsSwipeRight$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.stackedCardsSwipeRight$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$StackedCardsSwipeRight.SwipeRightJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element;
    
    var swipeActionInterval = setInterval(function(){
        
        element = document.getElementById($parameters.WidgetId);
    
        if( element !== null) {
            element.querySelector('.stackedcards-container').rightAction();
            clearInterval(swipeActionInterval);
        }
        
    }, 100)
    };
    });
    
    define("OutSystemsUI.controller$StackedCardsSwipeTop", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$StackedCardsSwipeTop.SwipeTopJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_StackedCardsSwipeTop_SwipeTopJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.stackedCardsSwipeTop$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.StackedCardsSwipeTop$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_StackedCardsSwipeTop_SwipeTopJS, "SwipeTop", "StackedCardsSwipeTop", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.StackedCardsSwipeTop$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.stackedCardsSwipeTop$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.stackedCardsSwipeTop$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$StackedCardsSwipeTop.SwipeTopJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element;
    
    var swipeActionInterval = setInterval(function(){
        
        element = document.getElementById($parameters.WidgetId);
    
        if( element !== null) {
            element.querySelector('.stackedcards-container').topAction();
            clearInterval(swipeActionInterval);
        }
        
    }, 100)
    };
    });
    
    define("OutSystemsUI.controller$StackedCardsUpdate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$StackedCardsUpdate.UpdateUiJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_StackedCardsUpdate_UpdateUiJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.stackedCardsUpdate$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.StackedCardsUpdate$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_StackedCardsUpdate_UpdateUiJS, "UpdateUi", "StackedCardsUpdate", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.StackedCardsUpdate$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.stackedCardsUpdate$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.stackedCardsUpdate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$StackedCardsUpdate.UpdateUiJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var element = document.getElementById($parameters.WidgetId).querySelector('.stackedcards-container').updateUi();
    };
    });
    
    define("OutSystemsUI.controller$StartOfflineDataSync", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$StartOfflineDataSync.CallBlockHandlerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_StartOfflineDataSync_CallBlockHandlerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.startOfflineDataSync$Action = function (syncUnitIn, discardPendingSyncUnitsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.StartOfflineDataSync$vars"))());
    vars.value.syncUnitInLocal = syncUnitIn;
    vars.value.discardPendingSyncUnitsInLocal = discardPendingSyncUnitsIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_StartOfflineDataSync_CallBlockHandlerJS, "CallBlockHandler", "StartOfflineDataSync", {
    SyncUnit: OS.DataConversion.JSNodeParamConverter.to(vars.value.syncUnitInLocal, OS.Types.Text),
    DiscardPendingUnits: OS.DataConversion.JSNodeParamConverter.to(vars.value.discardPendingSyncUnitsInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.StartOfflineDataSync$vars", [{
    name: "SyncUnit",
    attrName: "syncUnitInLocal",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "DiscardPendingSyncUnits",
    attrName: "discardPendingSyncUnitsInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.startOfflineDataSync$Action = function (syncUnitIn, discardPendingSyncUnitsIn) {
    syncUnitIn = (syncUnitIn === undefined) ? "" : syncUnitIn;
    discardPendingSyncUnitsIn = (discardPendingSyncUnitsIn === undefined) ? false : discardPendingSyncUnitsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.startOfflineDataSync$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(syncUnitIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(discardPendingSyncUnitsIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$StartOfflineDataSync.CallBlockHandlerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    if (window.offlineDataSync) {
        window.offlineDataSync.sync($parameters.SyncUnit, $parameters.DiscardPendingUnits);
    }
    };
    });
    
    define("OutSystemsUI.controller$SubmenuChangeIntegerProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuChangeIntegerProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuChangeIntegerProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuChangeIntegerProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuChangeIntegerProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "SubmenuChangeIntegerProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.LongInteger),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuChangeIntegerProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.LongInteger,
    defaultValue: function () {
    return OS.DataTypes.LongInteger.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuChangeIntegerProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.LongInteger.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuChangeIntegerProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.LongInteger)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuChangeIntegerProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SubmenuChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "SubmenuChangeTextProp", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$SubmenuClickOutsideToClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuClickOutsideToClose.ClickOutsideToCloseAPIJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuClickOutsideToClose_ClickOutsideToCloseAPIJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuClickOutsideToClose$Action = function (widgetIdIn, closeOnOutsideClickIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuClickOutsideToClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.closeOnOutsideClickInLocal = closeOnOutsideClickIn;
    var clickOutsideToCloseAPIJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuClickOutsideToClose$outVars"))());
    // Trigger the API method that will close the submenu.
    clickOutsideToCloseAPIJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuClickOutsideToClose_ClickOutsideToCloseAPIJS, "ClickOutsideToCloseAPI", "SubmenuClickOutsideToClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    CloseOnOutsideClick: OS.DataConversion.JSNodeParamConverter.to(vars.value.closeOnOutsideClickInLocal, OS.Types.Boolean),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuClickOutsideToClose$clickOutsideToCloseAPIJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(clickOutsideToCloseAPIJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuClickOutsideToClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "CloseOnOutsideClick",
    attrName: "closeOnOutsideClickInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuClickOutsideToClose$clickOutsideToCloseAPIJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuClickOutsideToClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuClickOutsideToClose$Action = function (widgetIdIn, closeOnOutsideClickIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    closeOnOutsideClickIn = (closeOnOutsideClickIn === undefined) ? false : closeOnOutsideClickIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuClickOutsideToClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(closeOnOutsideClickIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuClickOutsideToClose.ClickOutsideToCloseAPIJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SubmenuAPI.ClickOutsideToClose($parameters.WidgetId,$parameters.CloseOnOutsideClick);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuClose.CloseSubmenuJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuClose_CloseSubmenuJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeSubmenuJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuClose$outVars"))());
    // Trigger the API method that will close the submenu.
    closeSubmenuJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuClose_CloseSubmenuJS, "CloseSubmenu", "SubmenuClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuClose$closeSubmenuJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeSubmenuJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuClose$closeSubmenuJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuClose.CloseSubmenuJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SubmenuAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuCreate.CreateJS", "OutSystemsUI.model$Submenu_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuCreate_CreateJS, "Create", "SubmenuCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.Submenu_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.Submenu_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.Submenu_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuDestroy_DestroyJS, "Destroy", "SubmenuDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuInitialize_InitializeJS, "Initialize", "SubmenuInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuOnRender", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuOnRender.OnRenderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuOnRender_OnRenderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuOnRender$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOnRender$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuOnRender_OnRenderJS, "OnRender", "SubmenuOnRender", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOnRender$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuOnRender$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuOnRender$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuOnRender.OnRenderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.UpdateOnRender($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuOpen.OpenSubmenuJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuOpen_OpenSubmenuJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openSubmenuJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOpen$outVars"))());
    // Trigger the API method that will open the submenu.
    openSubmenuJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuOpen_OpenSubmenuJS, "OpenSubmenu", "SubmenuOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOpen$openSubmenuJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openSubmenuJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOpen$openSubmenuJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuOpen.OpenSubmenuJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SubmenuAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuOpenOnHover", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuOpenOnHover.SetSubmenuOpenOnHoverJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuOpenOnHover_SetSubmenuOpenOnHoverJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuOpenOnHover$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOpenOnHover$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var setSubmenuOpenOnHoverJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOpenOnHover$outVars"))());
    // Trigger the API method that set the open by hover on the submenu.
    setSubmenuOpenOnHoverJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuOpenOnHover_SetSubmenuOpenOnHoverJS, "SetSubmenuOpenOnHover", "SubmenuOpenOnHover", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuOpenOnHover$setSubmenuOpenOnHoverJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setSubmenuOpenOnHoverJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOpenOnHover$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOpenOnHover$setSubmenuOpenOnHoverJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuOpenOnHover$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuOpenOnHover$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuOpenOnHover$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuOpenOnHover.SetSubmenuOpenOnHoverJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.SubmenuAPI.SubmenuOpenOnHover($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$SubmenuRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$SubmenuRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_SubmenuRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.submenuRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.SubmenuRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_SubmenuRegisterCallback_RegisterCallbackJS, "RegisterCallback", "SubmenuRegisterCallback", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.SubmenuRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.submenuRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.submenuRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$SubmenuRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.SubmenuAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$TabsChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsChangeBooleanProp.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsChangeBooleanProp_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsChangeBooleanProp_ChangePropertyJS, "ChangeProperty", "TabsChangeBooleanProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsChangeBooleanProp.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsChangeExtendedClass", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsChangeExtendedClass.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsChangeExtendedClass_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsChangeExtendedClass$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsChangeExtendedClass_ChangePropertyJS, "ChangeProperty", "TabsChangeExtendedClass", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsChangeExtendedClass$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsChangeExtendedClass$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsChangeExtendedClass$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsChangeExtendedClass.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsChangeHeight", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsChangeHeight.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsChangeHeight_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsChangeHeight$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsChangeHeight$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsChangeHeight_ChangePropertyJS, "ChangeProperty", "TabsChangeHeight", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("Height", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsChangeHeight$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsChangeHeight$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsChangeHeight$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsChangeHeight.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsChangeStartingTab", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsChangeStartingTab.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsChangeStartingTab_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsChangeStartingTab$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsChangeStartingTab$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsChangeStartingTab_ChangePropertyJS, "ChangeProperty", "TabsChangeStartingTab", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("StartingTab", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to((vars.value.propertyValueInLocal).toString(), OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsChangeStartingTab$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsChangeStartingTab$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? 0 : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsChangeStartingTab$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsChangeStartingTab.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsChangeTabsOrientation", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsChangeTabsOrientation.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsChangeTabsOrientation_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsChangeTabsOrientation$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsChangeTabsOrientation$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsChangeTabsOrientation_ChangePropertyJS, "ChangeProperty", "TabsChangeTabsOrientation", {
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("TabsOrientation", OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsChangeTabsOrientation$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsChangeTabsOrientation$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsChangeTabsOrientation$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsChangeTabsOrientation.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsChangeVerticalTabsPosition", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsChangeVerticalTabsPosition.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsChangeVerticalTabsPosition_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsChangeVerticalTabsPosition$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsChangeVerticalTabsPosition$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsChangeVerticalTabsPosition_ChangePropertyJS, "ChangeProperty", "TabsChangeVerticalTabsPosition", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("TabsVerticalPosition", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsChangeVerticalTabsPosition$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsChangeVerticalTabsPosition$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsChangeVerticalTabsPosition$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsChangeVerticalTabsPosition.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsContentItemChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsContentItemChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsContentItemChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsContentItemChangeProperty$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsContentItemChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsContentItemChangeProperty_ChangePropertyJS, "ChangeProperty", "TabsContentItemChangeProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsContentItemChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsContentItemChangeProperty$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsContentItemChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsContentItemChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsContentItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsContentItemCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsContentItemCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsContentItemCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsContentItemCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsContentItemCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsContentItemCreate_CreateJS, "Create", "TabsContentItemCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsContentItemCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsContentItemCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsContentItemCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsContentItemCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsContentItemAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$TabsContentItemDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsContentItemDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsContentItemDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsContentItemDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsContentItemDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsContentItemDestroy_DestroyJS, "Destroy", "TabsContentItemDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsContentItemDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsContentItemDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsContentItemDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsContentItemDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsContentItemAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsContentItemInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsContentItemInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsContentItemInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsContentItemInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsContentItemInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsContentItemInitialize_InitializeJS, "Initialize", "TabsContentItemInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsContentItemInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsContentItemInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsContentItemInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsContentItemInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsContentItemAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsContentItemRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsContentItemRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsContentItemRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsContentItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsContentItemRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsContentItemRegisterCallback_RegisterCallbackJS, "RegisterCallback", "TabsContentItemRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsContentItemRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsContentItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsContentItemRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsContentItemRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsContentItemAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$TabsCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsCreate_CreateJS, "Create", "TabsCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$TabsDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsDestroy_DestroyJS, "Destroy", "TabsDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsHeaderItemChangeProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsHeaderItemChangeProperty.ChangePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsHeaderItemChangeProperty_ChangePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsHeaderItemChangeProperty$Action = function (uniqueIdIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsHeaderItemChangeProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsHeaderItemChangeProperty_ChangePropertyJS, "ChangeProperty", "TabsHeaderItemChangeProperty", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to("ExtendedClass", OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsHeaderItemChangeProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsHeaderItemChangeProperty$Action = function (uniqueIdIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsHeaderItemChangeProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsHeaderItemChangeProperty.ChangePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsHeaderItemAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TabsHeaderItemCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsHeaderItemCreate.CreateJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsHeaderItemCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsHeaderItemCreate$Action = function (uniqueIdIn, internalConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsHeaderItemCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsHeaderItemCreate_CreateJS, "Create", "TabsHeaderItemCreate", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsHeaderItemCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsHeaderItemCreate$Action = function (uniqueIdIn, internalConfigsIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsHeaderItemCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsHeaderItemCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsHeaderItemAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$TabsHeaderItemDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsHeaderItemDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsHeaderItemDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsHeaderItemDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsHeaderItemDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsHeaderItemDestroy_DestroyJS, "Destroy", "TabsHeaderItemDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsHeaderItemDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsHeaderItemDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsHeaderItemDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsHeaderItemDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsHeaderItemAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsHeaderItemInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsHeaderItemInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsHeaderItemInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsHeaderItemInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsHeaderItemInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsHeaderItemInitialize_InitializeJS, "Initialize", "TabsHeaderItemInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsHeaderItemInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsHeaderItemInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsHeaderItemInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsHeaderItemInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsHeaderItemAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsHeaderItemRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsHeaderItemRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsHeaderItemRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsHeaderItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsHeaderItemRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsHeaderItemRegisterCallback_RegisterCallbackJS, "RegisterCallback", "TabsHeaderItemRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsHeaderItemRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsHeaderItemRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsHeaderItemRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsHeaderItemRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsHeaderItemAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$TabsHeaderItemUpdateOnRender", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsHeaderItemUpdateOnRender.UpdateOnRenderJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsHeaderItemUpdateOnRender_UpdateOnRenderJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsHeaderItemUpdateOnRender$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsHeaderItemUpdateOnRender$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will be triggered by the onRender event.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsHeaderItemUpdateOnRender_UpdateOnRenderJS, "UpdateOnRender", "TabsHeaderItemUpdateOnRender", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsHeaderItemUpdateOnRender$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsHeaderItemUpdateOnRender$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsHeaderItemUpdateOnRender$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsHeaderItemUpdateOnRender.UpdateOnRenderJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsHeaderItemAPI.UpdateOnRender($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsInitialize_InitializeJS, "Initialize", "TabsInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TabsRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TabsRegisterCallback_RegisterCallbackJS, "RegisterCallback", "TabsRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TabsRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TabsAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$TabsToggleSwipe", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TabsToggleSwipe.TabsToggleSwipeJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TabsToggleSwipe_TabsToggleSwipeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tabsToggleSwipe$Action = function (widgetIdIn, enableSwipeIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsToggleSwipe$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.enableSwipeInLocal = enableSwipeIn;
    var tabsToggleSwipeJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsToggleSwipe$outVars"))());
    tabsToggleSwipeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TabsToggleSwipe_TabsToggleSwipeJS, "TabsToggleSwipe", "TabsToggleSwipe", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EnableSwipe: OS.DataConversion.JSNodeParamConverter.to(vars.value.enableSwipeInLocal, OS.Types.Boolean),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TabsToggleSwipe$tabsToggleSwipeJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(tabsToggleSwipeJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsToggleSwipe$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EnableSwipe",
    attrName: "enableSwipeInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsToggleSwipe$tabsToggleSwipeJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TabsToggleSwipe$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.tabsToggleSwipe$Action = function (widgetIdIn, enableSwipeIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    enableSwipeIn = (enableSwipeIn === undefined) ? false : enableSwipeIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tabsToggleSwipe$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(enableSwipeIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TabsToggleSwipe.TabsToggleSwipeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TabsAPI.TabsToggleSwipe($parameters.UniqueId, $parameters.EnableSwipe);
    };
    });
    
    define("OutSystemsUI.controller$TextEllipsis", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.textEllipsis$Action = function (textIn, numberOfCharsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TextEllipsis$vars"))());
    vars.value.textInLocal = textIn;
    vars.value.numberOfCharsInLocal = numberOfCharsIn;
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TextEllipsis$outVars"))());
    // Set Text with Ellipsis
    // Out = If + If
    outVars.value.outOut = ((((OS.BuiltinFunctions.length(vars.value.textInLocal) > vars.value.numberOfCharsInLocal)) ? (OS.BuiltinFunctions.substr(vars.value.textInLocal, 0, vars.value.numberOfCharsInLocal)) : (vars.value.textInLocal)) + (((OS.BuiltinFunctions.length(vars.value.textInLocal) > vars.value.numberOfCharsInLocal)) ? ("...") : ("")));
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TextEllipsis$vars", [{
    name: "Text",
    attrName: "textInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "NumberOfChars",
    attrName: "numberOfCharsInLocal",
    mandatory: true,
    dataType: OS.Types.Integer,
    defaultValue: function () {
    return 0;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TextEllipsis$outVars", [{
    name: "Out",
    attrName: "outOut",
    mandatory: false,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.textEllipsis$Action = function (textIn, numberOfCharsIn) {
    textIn = (textIn === undefined) ? "" : textIn;
    numberOfCharsIn = (numberOfCharsIn === undefined) ? 0 : numberOfCharsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.textEllipsis$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(textIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(numberOfCharsIn, OS.Types.Integer)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Out: OS.DataConversion.JSNodeParamConverter.to(actionResults.outOut, OS.Types.Text)
    };
    });
    };
    });
    
    define("OutSystemsUI.controller$TimePickerChangeBooleanProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerChangeBooleanProp.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerChangeBooleanProp_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerChangeBooleanProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerChangeBooleanProp_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "TimePickerChangeBooleanProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerChangeBooleanProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerChangeBooleanProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerChangeBooleanProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerChangeBooleanProp.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TimePickerChangeTextProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerChangeTextProp.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerChangeTextProp_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerChangeTextProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerChangeTextProp_ChangeTextPropertyJS, "ChangeTextProperty", "TimePickerChangeTextProp", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerChangeTextProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerChangeTextProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerChangeTextProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerChangeTextProp.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TimePickerChangeTimeProp", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerChangeTimeProp.ChangeTimePropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerChangeTimeProp_ChangeTimePropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerChangeTimeProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerChangeTimeProp$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerChangeTimeProp_ChangeTimePropertyJS, "ChangeTimeProperty", "TimePickerChangeTimeProp", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Time),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerChangeTimeProp$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Time,
    defaultValue: function () {
    return OS.DataTypes.DateTime.defaultValue;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerChangeTimeProp$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? OS.DataTypes.DateTime.defaultValue : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerChangeTimeProp$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Time)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerChangeTimeProp.ChangeTimePropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TimePickerClear", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerClear.ClearTimePickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerClear_ClearTimePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerClear$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerClear$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var clearTimePickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerClear$outVars"))());
    // Trigger the API method that will clear the timepicker.
    clearTimePickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerClear_ClearTimePickerJS, "ClearTimePicker", "TimePickerClear", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerClear$clearTimePickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(clearTimePickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerClear$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerClear$clearTimePickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerClear$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerClear$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerClear$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerClear.ClearTimePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.Clear($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerClose.CloseTimepickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerClose_CloseTimepickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var closeTimepickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerClose$outVars"))());
    // Trigger the API method that will close the timepicker.
    closeTimepickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerClose_CloseTimepickerJS, "CloseTimepicker", "TimePickerClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerClose$closeTimepickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(closeTimepickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerClose$closeTimepickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerClose.CloseTimepickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerCreate.CreateTimePickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerCreate_CreateTimePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerCreate$Action = function (uniqueIdIn, internalConfigsIn, providerIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerCreate$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.internalConfigsInLocal = internalConfigsIn;
    vars.value.providerInLocal = providerIn;
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerCreate_CreateTimePickerJS, "CreateTimePicker", "TimePickerCreate", {
    Provider: OS.DataConversion.JSNodeParamConverter.to(vars.value.providerInLocal, OS.Types.Text),
    Configs: OS.DataConversion.JSNodeParamConverter.to(vars.value.internalConfigsInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerCreate$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "InternalConfigs",
    attrName: "internalConfigsInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Provider",
    attrName: "providerInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerCreate$Action = function (uniqueIdIn, internalConfigsIn, providerIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    internalConfigsIn = (internalConfigsIn === undefined) ? "" : internalConfigsIn;
    providerIn = (providerIn === undefined) ? "" : providerIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerCreate$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(internalConfigsIn, OS.Types.Text), providerIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerCreate.CreateTimePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.Create($parameters.UniqueId, $parameters.Configs, $parameters.Provider);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerDestroy.DestroyTimePickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerDestroy_DestroyTimePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerDestroy_DestroyTimePickerJS, "DestroyTimePicker", "TimePickerDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerDestroy.DestroyTimePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerInitialize.InitializeTimePickerJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerInitialize_InitializeTimePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerInitialize_InitializeTimePickerJS, "InitializeTimePicker", "TimePickerInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerInitialize.InitializeTimePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerOpen.OpenTimePickerJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerOpen_OpenTimePickerJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var openTimePickerJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerOpen$outVars"))());
    // Trigger the API method that will open the timepicker.
    openTimePickerJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerOpen_OpenTimePickerJS, "OpenTimePicker", "TimePickerOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerOpen$openTimePickerJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(openTimePickerJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerOpen$openTimePickerJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerOpen.OpenTimePickerJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerRegisterCallback_RegisterCallbackJS, "RegisterCallback", "TimePickerRegisterCallback", {
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), eventNameIn, OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TimePickerAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerSetEditableInput", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerSetEditableInput.SetEditableInputJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerSetEditableInput_SetEditableInputJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerSetEditableInput$Action = function (widgetIdIn, isEditableInputIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerSetEditableInput$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isEditableInputInLocal = isEditableInputIn;
    var setEditableInputJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerSetEditableInput$outVars"))());
    // Trigger the API method that will enable the end-user to write on the TimePicker input.
    //
    setEditableInputJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerSetEditableInput_SetEditableInputJS, "SetEditableInput", "TimePickerSetEditableInput", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    IsEditableInput: OS.DataConversion.JSNodeParamConverter.to(vars.value.isEditableInputInLocal, OS.Types.Boolean),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerSetEditableInput$setEditableInputJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(setEditableInputJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerSetEditableInput$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsEditableInput",
    attrName: "isEditableInputInLocal",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return true;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerSetEditableInput$setEditableInputJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerSetEditableInput$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerSetEditableInput$Action = function (widgetIdIn, isEditableInputIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isEditableInputIn = (isEditableInputIn === undefined) ? true : isEditableInputIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerSetEditableInput$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isEditableInputIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerSetEditableInput.SetEditableInputJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.SetEditableInput($parameters.UniqueId, $parameters.IsEditableInput);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerToggleNativeBehavior", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerToggleNativeBehavior.ToggleNativeBehaviorJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerToggleNativeBehavior_ToggleNativeBehaviorJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerToggleNativeBehavior$Action = function (widgetIdIn, isNativeIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerToggleNativeBehavior$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.isNativeInLocal = isNativeIn;
    var toggleNativeBehaviorJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerToggleNativeBehavior$outVars"))());
    // Trigger the API method that will toggle native on datepicker.
    toggleNativeBehaviorJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerToggleNativeBehavior_ToggleNativeBehaviorJS, "ToggleNativeBehavior", "TimePickerToggleNativeBehavior", {
    IsNative: OS.DataConversion.JSNodeParamConverter.to(vars.value.isNativeInLocal, OS.Types.Boolean),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerToggleNativeBehavior$toggleNativeBehaviorJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(toggleNativeBehaviorJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerToggleNativeBehavior$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "IsNative",
    attrName: "isNativeInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerToggleNativeBehavior$toggleNativeBehaviorJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerToggleNativeBehavior$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerToggleNativeBehavior$Action = function (widgetIdIn, isNativeIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    isNativeIn = (isNativeIn === undefined) ? false : isNativeIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerToggleNativeBehavior$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(isNativeIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerToggleNativeBehavior.ToggleNativeBehaviorJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.ToggleNativeBehavior($parameters.UniqueId, $parameters.IsNative);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerUpdatePrompt", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerUpdatePrompt.UpdatePromptMessageJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerUpdatePrompt_UpdatePromptMessageJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerUpdatePrompt$Action = function (widgetIdIn, promptIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerUpdatePrompt$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.promptInLocal = promptIn;
    var updatePromptMessageJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerUpdatePrompt$outVars"))());
    // Trigger the API method that will open the datepicker.
    updatePromptMessageJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerUpdatePrompt_UpdatePromptMessageJS, "UpdatePromptMessage", "TimePickerUpdatePrompt", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    Prompt: OS.DataConversion.JSNodeParamConverter.to(vars.value.promptInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerUpdatePrompt$updatePromptMessageJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updatePromptMessageJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerUpdatePrompt$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Prompt",
    attrName: "promptInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerUpdatePrompt$updatePromptMessageJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerUpdatePrompt$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerUpdatePrompt$Action = function (widgetIdIn, promptIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    promptIn = (promptIn === undefined) ? "" : promptIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerUpdatePrompt$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(promptIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerUpdatePrompt.UpdatePromptMessageJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.UpdatePrompt($parameters.WidgetId, $parameters.Prompt);
    };
    });
    
    define("OutSystemsUI.controller$TimePickerUpdateTime", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TimePickerUpdateTime.UpdateInitialTimeJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TimePickerUpdateTime_UpdateInitialTimeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.timePickerUpdateTime$Action = function (widgetIdIn, newTimeIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerUpdateTime$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.newTimeInLocal = newTimeIn;
    var updateInitialTimeJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerUpdateTime$outVars"))());
    // Trigger the API method that will toggle native on datepicker.
    updateInitialTimeJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TimePickerUpdateTime_UpdateInitialTimeJS, "UpdateInitialTime", "TimePickerUpdateTime", {
    Time: OS.DataConversion.JSNodeParamConverter.to(vars.value.newTimeInLocal, OS.Types.Time),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TimePickerUpdateTime$updateInitialTimeJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(updateInitialTimeJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerUpdateTime$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "NewTime",
    attrName: "newTimeInLocal",
    mandatory: true,
    dataType: OS.Types.Time,
    defaultValue: function () {
    return OS.DataTypes.DateTime.defaultValue;
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerUpdateTime$updateInitialTimeJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TimePickerUpdateTime$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.timePickerUpdateTime$Action = function (widgetIdIn, newTimeIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    newTimeIn = (newTimeIn === undefined) ? OS.DataTypes.DateTime.defaultValue : newTimeIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.timePickerUpdateTime$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(newTimeIn, OS.Types.Time)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TimePickerUpdateTime.UpdateInitialTimeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TimePickerAPI.UpdateInitialTime($parameters.UniqueId, $parameters.Time);
    
    };
    });
    
    define("OutSystemsUI.controller$ToggleSideMenu", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ToggleSideMenu.JsToggleSideMenuJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ToggleSideMenu_JsToggleSideMenuJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.toggleSideMenu$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var jsToggleSideMenuJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ToggleSideMenu$outVars"))());
    jsToggleSideMenuJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ToggleSideMenu_JsToggleSideMenuJS, "JsToggleSideMenu", "ToggleSideMenu", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ToggleSideMenu$jsToggleSideMenuJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(jsToggleSideMenuJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ToggleSideMenu$jsToggleSideMenuJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ToggleSideMenu$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.toggleSideMenu$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.toggleSideMenu$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ToggleSideMenu.JsToggleSideMenuJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Menu.ToggleSideMenu();
    };
    });
    
    define("OutSystemsUI.controller$ToggleTextSpacing", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ToggleTextSpacing.TextSpacingStylesJS", "OutSystemsUI.controller$CheckOutSystemsUIScript", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.controller$ToggleTextSpacing_Legacy", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ToggleTextSpacing_TextSpacingStylesJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.toggleTextSpacing$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var checkOutSystemsUIScriptVar = new OS.DataTypes.VariableHolder();
    var toggleTextSpacing_LegacyVar = new OS.DataTypes.VariableHolder();
    var textSpacingStylesJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ToggleTextSpacing$outVars"))());
    // Execute Action: CheckOutSystemsUIScript
    checkOutSystemsUIScriptVar.value = OutSystemsUIController.default.checkOutSystemsUIScript$Action(callContext);
    
    // Has Script?
    if((checkOutSystemsUIScriptVar.value.isLoadedOut)) {
    textSpacingStylesJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_ToggleTextSpacing_TextSpacingStylesJS, "TextSpacingStyles", "ToggleTextSpacing", {
    Response: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.ToggleTextSpacing$textSpacingStylesJSResult"))();
    jsNodeResult.responseOut = OS.DataConversion.JSNodeParamConverter.from($parameters.Response, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeReturnMessage
    jSONDeserializeReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(textSpacingStylesJSResult.value.responseOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Error Message
    // Success = JSONDeserializeReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeReturnMessageVar.value.dataOut.messageAttr;
    } else {
    // Execute Action: ToggleTextSpacing_Legacy
    toggleTextSpacing_LegacyVar.value = OutSystemsUIController.default.toggleTextSpacing_Legacy$Action(callContext);
    
    // Set Error Message
    // Success = ToggleTextSpacing_Legacy.Success
    outVars.value.successOut = toggleTextSpacing_LegacyVar.value.successOut;
    // ErrorMessage = ToggleTextSpacing_Legacy.ErrorMessage
    outVars.value.errorMessageOut = toggleTextSpacing_LegacyVar.value.errorMessageOut;
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ToggleTextSpacing$textSpacingStylesJSResult", [{
    name: "Response",
    attrName: "responseOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ToggleTextSpacing$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.toggleTextSpacing$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.toggleTextSpacing$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ToggleTextSpacing.TextSpacingStylesJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.Response = OutSystems.OSUI.Utils.Accessibility.ToggleTextSpacing();
    };
    });
    
    define("OutSystemsUI.controller$ToggleTextSpacing_Legacy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$ToggleTextSpacing_Legacy.TextSpacingStylesJS", "OutSystemsUI.controller$NoOutSystemsUIScriptMessage", "OutSystemsUI.model$ErrorMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_ToggleTextSpacing_Legacy_TextSpacingStylesJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.toggleTextSpacing_Legacy$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    var allExceptionsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.ErrorHandlerOutputType());
    var noOutSystemsUIScriptMessageVar = new OS.DataTypes.VariableHolder();
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.ToggleTextSpacing_Legacy$outVars"))());
    try {// Execute Action: NoOutSystemsUIScriptMessage
    noOutSystemsUIScriptMessageVar.value = OutSystemsUIController.default.noOutSystemsUIScriptMessage$Action("ToggleTextSpacing", callContext);
    
    controller.safeExecuteJSNode(OutSystemsUI_controller_ToggleTextSpacing_Legacy_TextSpacingStylesJS, "TextSpacingStyles", "ToggleTextSpacing_Legacy", null, function ($parameters) {
    }, {}, {});
    // Set Error Message - Success
    // Success = True
    outVars.value.successOut = true;
    // ErrorMessage.Message = "Success"
    outVars.value.errorMessageOut.messageAttr = "Success";
    // ErrorMessage.Code = 200
    outVars.value.errorMessageOut.codeAttr = "200";
    } catch (ex) {
    (function () {
    OS.Logger.trace("ToggleTextSpacing_Legacy.ToggleTextSpacing_Legacy", OS.Exceptions.getMessage(ex), ex.name);
    // Handle Error: AllExceptions
    if(!(OS.Exceptions.isSystem(ex))) {
    allExceptionsVar.value.exceptionMessageAttr = OS.Exceptions.getMessage(ex);
    // Set Error Message - NOK
    // Success = False
    outVars.value.successOut = false;
    // ErrorMessage.Message = AllExceptions.ExceptionMessage
    outVars.value.errorMessageOut.messageAttr = allExceptionsVar.value.exceptionMessageAttr;
    // ErrorMessage.Code = "OSUI-LEG-000009"
    outVars.value.errorMessageOut.codeAttr = "OSUI-LEG-000009";
    return outVars.value;
    
    }
    
    throw ex;
    })();
    }
    
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.ToggleTextSpacing_Legacy$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.toggleTextSpacing_Legacy$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.toggleTextSpacing_Legacy$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$ToggleTextSpacing_Legacy.TextSpacingStylesJS", [], function () {
    return function ($actions, $roles, $public) {
    var spacingStyles = document.querySelector('.acessibility-style-tag');
    
    if (!spacingStyles) {
        spacingStyles = document.createElement('style');
        spacingStyles.classList.add('acessibility-style-tag');
        spacingStyles.textContent = " * { line-height: 1.5 !important; letter-spacing: 0.12em !important; word-spacing: 0.16em !important; } p { margin-bottom: 2em !important; } ";
        document.head.appendChild(spacingStyles);
    } else if(spacingStyles) {
        spacingStyles.remove();
    }
    };
    });
    
    define("OutSystemsUI.controller$TooltipChangeBooleanProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipChangeBooleanProperty.ChangeBooleanPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipChangeBooleanProperty_ChangeBooleanPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipChangeBooleanProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipChangeBooleanProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipChangeBooleanProperty_ChangeBooleanPropertyJS, "ChangeBooleanProperty", "TooltipChangeBooleanProperty", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text),
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Boolean)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipChangeBooleanProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipChangeBooleanProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? false : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipChangeBooleanProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Boolean)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TooltipChangeBooleanProperty.ChangeBooleanPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TooltipAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TooltipChangeTextProperty", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipChangeTextProperty.ChangeTextPropertyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipChangeTextProperty_ChangeTextPropertyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipChangeTextProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipChangeTextProperty$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.propertyNameInLocal = propertyNameIn;
    vars.value.propertyValueInLocal = propertyValueIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipChangeTextProperty_ChangeTextPropertyJS, "ChangeTextProperty", "TooltipChangeTextProperty", {
    PropertyValue: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyValueInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text),
    PropertyName: OS.DataConversion.JSNodeParamConverter.to(vars.value.propertyNameInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipChangeTextProperty$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyName",
    attrName: "propertyNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "PropertyValue",
    attrName: "propertyValueInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipChangeTextProperty$Action = function (uniqueIdIn, propertyNameIn, propertyValueIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    propertyNameIn = (propertyNameIn === undefined) ? "" : propertyNameIn;
    propertyValueIn = (propertyValueIn === undefined) ? "" : propertyValueIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipChangeTextProperty$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(propertyValueIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TooltipChangeTextProperty.ChangeTextPropertyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TooltipAPI.ChangeProperty(
        $parameters.UniqueId, 
        $parameters.PropertyName, 
        $parameters.PropertyValue
    );
    };
    });
    
    define("OutSystemsUI.controller$TooltipClose", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipClose.HideTooltipJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipClose_HideTooltipJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipClose$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipClose$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var hideTooltipJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipClose$outVars"))());
    hideTooltipJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipClose_HideTooltipJS, "HideTooltip", "TooltipClose", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipClose$hideTooltipJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(hideTooltipJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipClose$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipClose$hideTooltipJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipClose$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipClose$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipClose$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TooltipClose.HideTooltipJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TooltipAPI.Close($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$TooltipCreate", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipCreate.CreateJS", "OutSystemsUI.model$Tooltip_InternalConfigRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipCreate_CreateJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipCreate$Action = function (internal_ConfigsIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipCreate$vars"))());
    vars.value.internal_ConfigsInLocal = internal_ConfigsIn.clone();
    var serialize_configsVar = new OS.DataTypes.VariableHolder(new OS.DataTypes.JSONSerializeOutputType());
    // JSON Serialize: Serialize_configs
    serialize_configsVar.value.jSONOut = OS.JSONUtils.serializeToJSON(vars.value.internal_ConfigsInLocal, true, false);
    // Trigger the API method that will create the new pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipCreate_CreateJS, "Create", "TooltipCreate", {
    Configs: OS.DataConversion.JSNodeParamConverter.to(serialize_configsVar.value.jSONOut, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.internal_ConfigsInLocal.uniqueIdAttr, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipCreate$vars", [{
    name: "Internal_Configs",
    attrName: "internal_ConfigsInLocal",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.Tooltip_InternalConfigRec();
    },
    complexType: OutSystemsUIModel.Tooltip_InternalConfigRec
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipCreate$Action = function (internal_ConfigsIn) {
    internal_ConfigsIn = (internal_ConfigsIn === undefined) ? new OutSystemsUIModel.Tooltip_InternalConfigRec() : internal_ConfigsIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipCreate$Action.bind(controller, internal_ConfigsIn), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TooltipCreate.CreateJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TooltipAPI.Create($parameters.UniqueId, $parameters.Configs);
    };
    });
    
    define("OutSystemsUI.controller$TooltipDestroy", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipDestroy.DestroyJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipDestroy_DestroyJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipDestroy$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipDestroy$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipDestroy_DestroyJS, "Destroy", "TooltipDestroy", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipDestroy$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipDestroy$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipDestroy$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TooltipDestroy.DestroyJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TooltipAPI.Dispose($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TooltipInitialize", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipInitialize.InitializeJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipInitialize_InitializeJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipInitialize$Action = function (uniqueIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipInitialize$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    // Trigger the API method that will initialize the pattern instance.
    controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipInitialize_InitializeJS, "Initialize", "TooltipInitialize", {
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipInitialize$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipInitialize$Action = function (uniqueIdIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipInitialize$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TooltipInitialize.InitializeJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TooltipAPI.Initialize($parameters.UniqueId);
    };
    });
    
    define("OutSystemsUI.controller$TooltipOpen", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipOpen.ShowTooltipJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipOpen_ShowTooltipJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipOpen$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipOpen$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    var showTooltipJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeErrorMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipOpen$outVars"))());
    showTooltipJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipOpen_ShowTooltipJS, "ShowTooltip", "TooltipOpen", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipOpen$showTooltipJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeErrorMessage
    jSONDeserializeErrorMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(showTooltipJSResult.value.responseJSONOut, OutSystemsUIModel.ReturnMessageRec, false);
    // Set Result Information
    // Success = JSONDeserializeErrorMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeErrorMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeErrorMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeErrorMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeErrorMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeErrorMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipOpen$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipOpen$showTooltipJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipOpen$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipOpen$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipOpen$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$TooltipOpen.ShowTooltipJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.TooltipAPI.Open($parameters.WidgetId);
    };
    });
    
    define("OutSystemsUI.controller$TooltipRegisterCallback", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$TooltipRegisterCallback.RegisterCallbackJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_TooltipRegisterCallback_RegisterCallbackJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.tooltipRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.TooltipRegisterCallback$vars"))());
    vars.value.uniqueIdInLocal = uniqueIdIn;
    vars.value.eventNameInLocal = eventNameIn;
    vars.value.callbackInLocal = callbackIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_TooltipRegisterCallback_RegisterCallbackJS, "RegisterCallback", "TooltipRegisterCallback", {
    Callback: OS.DataConversion.JSNodeParamConverter.to(vars.value.callbackInLocal, OS.Types.Object),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.eventNameInLocal, OS.Types.Text),
    UniqueId: OS.DataConversion.JSNodeParamConverter.to(vars.value.uniqueIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.TooltipRegisterCallback$vars", [{
    name: "UniqueId",
    attrName: "uniqueIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "EventName",
    attrName: "eventNameInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "Callback",
    attrName: "callbackInLocal",
    mandatory: true,
    dataType: OS.Types.Object,
    defaultValue: function () {
    return null;
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.tooltipRegisterCallback$Action = function (uniqueIdIn, eventNameIn, callbackIn) {
    uniqueIdIn = (uniqueIdIn === undefined) ? "" : uniqueIdIn;
    eventNameIn = (eventNameIn === undefined) ? "" : eventNameIn;
    callbackIn = (callbackIn === undefined) ? null : callbackIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.tooltipRegisterCallback$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(uniqueIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(eventNameIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(callbackIn, OS.Types.Object)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$TooltipRegisterCallback.RegisterCallbackJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    OutSystems.OSUI.Patterns.TooltipAPI.RegisterCallback($parameters.UniqueId, $parameters.EventName, $parameters.Callback);
    };
    });
    
    define("OutSystemsUI.controller$UnsetFlatpickrEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$UnsetFlatpickrEvent.UnsetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_UnsetFlatpickrEvent_UnsetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.unsetFlatpickrEvent$Action = function (widgetIdIn, flatpickrEventIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetFlatpickrEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.flatpickrEventIdInLocal = flatpickrEventIdIn;
    var unsetProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetFlatpickrEvent$outVars"))());
    unsetProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_UnsetFlatpickrEvent_UnsetProviderEventJS, "UnsetProviderEvent", "UnsetFlatpickrEvent", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EventId: OS.DataConversion.JSNodeParamConverter.to(vars.value.flatpickrEventIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetFlatpickrEvent$unsetProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(unsetProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetFlatpickrEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "FlatpickrEventId",
    attrName: "flatpickrEventIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetFlatpickrEvent$unsetProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetFlatpickrEvent$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.unsetFlatpickrEvent$Action = function (widgetIdIn, flatpickrEventIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    flatpickrEventIdIn = (flatpickrEventIdIn === undefined) ? "" : flatpickrEventIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.unsetFlatpickrEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(flatpickrEventIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$UnsetFlatpickrEvent.UnsetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var apiMethod = OutSystems.OSUI.Utils.GetPickerExtensibilityAPI($parameters.WidgetId, "UnsetProviderEvent");
    
    $parameters.ResponseJSON = apiMethod($parameters.WidgetId, $parameters.EventId);
    
    };
    });
    
    define("OutSystemsUI.controller$UnsetNoUISliderEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$UnsetNoUISliderEvent.UnsetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_UnsetNoUISliderEvent_UnsetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.unsetNoUISliderEvent$Action = function (widgetIdIn, noUISliderEventIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetNoUISliderEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.noUISliderEventIdInLocal = noUISliderEventIdIn;
    var unsetProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetNoUISliderEvent$outVars"))());
    unsetProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_UnsetNoUISliderEvent_UnsetProviderEventJS, "UnsetProviderEvent", "UnsetNoUISliderEvent", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.noUISliderEventIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetNoUISliderEvent$unsetProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(unsetProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetNoUISliderEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "NoUISliderEventId",
    attrName: "noUISliderEventIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetNoUISliderEvent$unsetProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetNoUISliderEvent$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.unsetNoUISliderEvent$Action = function (widgetIdIn, noUISliderEventIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    noUISliderEventIdIn = (noUISliderEventIdIn === undefined) ? "" : noUISliderEventIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.unsetNoUISliderEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(noUISliderEventIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$UnsetNoUISliderEvent.UnsetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.RangeSliderAPI.UnsetProviderEvent($parameters.WidgetId, $parameters.EventName);
    };
    });
    
    define("OutSystemsUI.controller$UnsetSplideEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$UnsetSplideEvent.UnsetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_UnsetSplideEvent_UnsetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.unsetSplideEvent$Action = function (widgetIdIn, splideEventIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetSplideEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.splideEventIdInLocal = splideEventIdIn;
    var unsetProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetSplideEvent$outVars"))());
    unsetProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_UnsetSplideEvent_UnsetProviderEventJS, "UnsetProviderEvent", "UnsetSplideEvent", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.splideEventIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetSplideEvent$unsetProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(unsetProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetSplideEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "SplideEventId",
    attrName: "splideEventIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetSplideEvent$unsetProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetSplideEvent$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.unsetSplideEvent$Action = function (widgetIdIn, splideEventIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    splideEventIdIn = (splideEventIdIn === undefined) ? "" : splideEventIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.unsetSplideEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(splideEventIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$UnsetSplideEvent.UnsetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.CarouselAPI.UnsetProviderEvent($parameters.WidgetId, $parameters.EventName);
    };
    });
    
    define("OutSystemsUI.controller$UnsetVirtualSelectEvent", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$UnsetVirtualSelectEvent.UnsetProviderEventJS", "OutSystemsUI.model$ErrorMessageRec", "OutSystemsUI.model$ProviderEventReturnMessageRec"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_UnsetVirtualSelectEvent_UnsetProviderEventJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.unsetVirtualSelectEvent$Action = function (widgetIdIn, virtualSelectEventIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetVirtualSelectEvent$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    vars.value.virtualSelectEventIdInLocal = virtualSelectEventIdIn;
    var unsetProviderEventJSResult = new OS.DataTypes.VariableHolder();
    var jSONDeserializeProviderEventReturnMessageVar = new OS.DataTypes.VariableHolder(new (OS.Controller.BaseController.getJSONDeserializeOutputType(OutSystemsUIModel.ProviderEventReturnMessageRec))());
    var outVars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetVirtualSelectEvent$outVars"))());
    unsetProviderEventJSResult.value = controller.safeExecuteJSNode(OutSystemsUI_controller_UnsetVirtualSelectEvent_UnsetProviderEventJS, "UnsetProviderEvent", "UnsetVirtualSelectEvent", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text),
    EventName: OS.DataConversion.JSNodeParamConverter.to(vars.value.virtualSelectEventIdInLocal, OS.Types.Text),
    ResponseJSON: OS.DataConversion.JSNodeParamConverter.to("", OS.Types.Text)
    }, function ($parameters) {
    var jsNodeResult = new (controller.constructor.getVariableGroupType("OutSystemsUI.UnsetVirtualSelectEvent$unsetProviderEventJSResult"))();
    jsNodeResult.responseJSONOut = OS.DataConversion.JSNodeParamConverter.from($parameters.ResponseJSON, OS.Types.Text);
    return jsNodeResult;
    }, {}, {});
    // JSON Deserialize: JSONDeserializeProviderEventReturnMessage
    jSONDeserializeProviderEventReturnMessageVar.value.dataOut = OS.JSONUtils.deserializeFromJSON(unsetProviderEventJSResult.value.responseJSONOut, OutSystemsUIModel.ProviderEventReturnMessageRec, false);
    // Success = JSONDeserializeProviderEventReturnMessage.Data.IsSuccess
    outVars.value.successOut = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.isSuccessAttr;
    // ErrorMessage.Code = JSONDeserializeProviderEventReturnMessage.Data.Code
    outVars.value.errorMessageOut.codeAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.codeAttr;
    // ErrorMessage.Message = JSONDeserializeProviderEventReturnMessage.Data.Message
    outVars.value.errorMessageOut.messageAttr = jSONDeserializeProviderEventReturnMessageVar.value.dataOut.messageAttr;
    return outVars.value;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetVirtualSelectEvent$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }, {
    name: "VirtualSelectEventId",
    attrName: "virtualSelectEventIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetVirtualSelectEvent$unsetProviderEventJSResult", [{
    name: "ResponseJSON",
    attrName: "responseJSONOut",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.UnsetVirtualSelectEvent$outVars", [{
    name: "Success",
    attrName: "successOut",
    mandatory: false,
    dataType: OS.Types.Boolean,
    defaultValue: function () {
    return false;
    }
    }, {
    name: "ErrorMessage",
    attrName: "errorMessageOut",
    mandatory: false,
    dataType: OS.Types.Record,
    defaultValue: function () {
    return new OutSystemsUIModel.ErrorMessageRec();
    },
    complexType: OutSystemsUIModel.ErrorMessageRec
    }]);
    OutSystemsUIController.default.clientActionProxies.unsetVirtualSelectEvent$Action = function (widgetIdIn, virtualSelectEventIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    virtualSelectEventIdIn = (virtualSelectEventIdIn === undefined) ? "" : virtualSelectEventIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.unsetVirtualSelectEvent$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text), OS.DataConversion.JSNodeParamConverter.from(virtualSelectEventIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {
    Success: OS.DataConversion.JSNodeParamConverter.to(actionResults.successOut, OS.Types.Boolean),
    ErrorMessage: actionResults.errorMessageOut
    };
    });
    };
    });
    define("OutSystemsUI.controller$UnsetVirtualSelectEvent.UnsetProviderEventJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    $parameters.ResponseJSON = OutSystems.OSUI.Patterns.DropdownAPI.UnsetProviderEvent($parameters.WidgetId, $parameters.EventName);
    };
    });
    
    define("OutSystemsUI.controller$VideoPause", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$VideoPause.PauseVideoJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_VideoPause_PauseVideoJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.videoPause$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.VideoPause$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_VideoPause_PauseVideoJS, "PauseVideo", "VideoPause", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.VideoPause$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.videoPause$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.videoPause$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$VideoPause.PauseVideoJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var videoWidget = document.getElementById($parameters.WidgetId);
    var videoTag = videoWidget.querySelector('video');
    videoTag.pause();
    };
    });
    
    define("OutSystemsUI.controller$VideoPlay", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$VideoPlay.PlayVideoJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_VideoPlay_PlayVideoJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.videoPlay$Action = function (widgetIdIn, callContext) {
    callContext = controller.callContext(callContext);
    var vars = new OS.DataTypes.VariableHolder(new (controller.constructor.getVariableGroupType("OutSystemsUI.VideoPlay$vars"))());
    vars.value.widgetIdInLocal = widgetIdIn;
    controller.safeExecuteJSNode(OutSystemsUI_controller_VideoPlay_PlayVideoJS, "PlayVideo", "VideoPlay", {
    WidgetId: OS.DataConversion.JSNodeParamConverter.to(vars.value.widgetIdInLocal, OS.Types.Text)
    }, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.constructor.registerVariableGroupType("OutSystemsUI.VideoPlay$vars", [{
    name: "WidgetId",
    attrName: "widgetIdInLocal",
    mandatory: true,
    dataType: OS.Types.Text,
    defaultValue: function () {
    return "";
    }
    }]);
    OutSystemsUIController.default.clientActionProxies.videoPlay$Action = function (widgetIdIn) {
    widgetIdIn = (widgetIdIn === undefined) ? "" : widgetIdIn;
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.videoPlay$Action.bind(controller, OS.DataConversion.JSNodeParamConverter.from(widgetIdIn, OS.Types.Text)), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$VideoPlay.PlayVideoJS", [], function () {
    return function ($parameters, $actions, $roles, $public) {
    var videoWidget = document.getElementById($parameters.WidgetId);
    var videoTag = videoWidget.querySelector('video');
    videoTag.play();
    };
    });
    
    define("OutSystemsUI.controller$WCAGMetaTag", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller", "OutSystemsUI.controller$WCAGMetaTag.ViewportJS"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUIController, OutSystemsUI_controller_WCAGMetaTag_ViewportJS) {
    var OS = OutSystems.Internal;
    OutSystemsUIController.default.wCAGMetaTag$Action = function (callContext) {
    callContext = controller.callContext(callContext);
    controller.safeExecuteJSNode(OutSystemsUI_controller_WCAGMetaTag_ViewportJS, "Viewport", "WCAGMetaTag", null, function ($parameters) {
    }, {}, {});
    return ;
    };
    var controller = OutSystemsUIController.default;
    OutSystemsUIController.default.clientActionProxies.wCAGMetaTag$Action = function () {
    return controller.executeActionInsideJSNode(OutSystemsUIController.default.wCAGMetaTag$Action.bind(controller), OS.Controller.BaseViewController.activeScreen ? OS.Controller.BaseViewController.activeScreen.callContext() : undefined, function (actionResults) {
    return {};
    });
    };
    });
    define("OutSystemsUI.controller$WCAGMetaTag.ViewportJS", [], function () {
    return function ($actions, $roles, $public) {
    OutSystems.OSUI.Utils.Accessibility.WCAGMetaTag();
    };
    });
    
    define("OutSystemsUI.controller", ["exports", "OutSystems/ClientRuntime/Main", "OutSystemsUI.model", "OutSystemsUI.controller$translationsResources"], function (exports, OutSystems, OutSystemsUIModel, OutSystemsUI_Controller_translationsResources) {
    var OS = OutSystems.Internal;
    var OutSystemsUIController = exports;
    var Controller = (function (_super) {
    __extends(Controller, _super);
    function Controller() {
    _super.apply(this, arguments);
    }
    Controller.prototype.clientActionProxies = {};
    Controller.prototype.roles = {};
    Controller.prototype.defaultTimeout = 10;
    Controller.prototype.getDefaultTimeout = function () {
    return OutSystemsUIController.default.defaultTimeout;
    };
    return Controller;
    })(OS.Controller.BaseModuleController);
    OutSystemsUIController.default = new Controller(OutSystemsUI_Controller_translationsResources, "OutSystemsUI");
    });
    define("OutSystemsUI.controller$translationsResources", ["exports", "OutSystemsUI.controller$translationsResources.de-DE", "OutSystemsUI.controller$translationsResources.fr-CA", "OutSystemsUI.controller$translationsResources.pt", "OutSystemsUI.controller$translationsResources.ja-JP"], function (exports, OutSystemsUI_controller_translationsResources_deDE, OutSystemsUI_controller_translationsResources_frCA, OutSystemsUI_controller_translationsResources_pt, OutSystemsUI_controller_translationsResources_jaJP) {
    return {
    "de-DE": {
    "translations": OutSystemsUI_controller_translationsResources_deDE,
    "isRTL": false
    },
    "fr-CA": {
    "translations": OutSystemsUI_controller_translationsResources_frCA,
    "isRTL": false
    },
    "pt": {
    "translations": OutSystemsUI_controller_translationsResources_pt,
    "isRTL": false
    },
    "ja-JP": {
    "translations": OutSystemsUI_controller_translationsResources_jaJP,
    "isRTL": false
    }
    };
    });
    define("OutSystemsUI.controller$translationsResources.de-DE", [], function () {
    return {
    "lg7NoSsYfEuhIOQNq772Tw#Value.1874273954.1": "Verstanden!",
    "EKgo2wktLUWoYHof84369Q#Value.58078159.1": "SPACE / ENTER, um ein Datum auszuwählen.",
    "hxu4s7ASlUCI3vkxgsoR+A#Value.941141342.1": "BILD RUNTER, um zum nächsten Monat zu gelangen.",
    "2pdORbIMeUmJLoWBa4tFQQ#Value.-513930751.1": "BILD HOCH, um zum vorherigen Monat zu gelangen.",
    "9s+39UgfEUOBkGEECmMZsw#Value.887781619.1": "ESCAPE, um den Kalender zu schließen.",
    "yqo5pCbrYUa4Qeqn0J_qOg#Value.-1565462224.1": "ENTF, um das Datum zurückzusetzen.",
    "I6J5cRrTyk6bSZ6JvMUtBg#Value.-1048883153.1": "HOCH / RUNTER zum Verschieben von Woche zu Woche.",
    "aUoleWSZBEGHb_sk4X7m8A#Value.-1916325413.1": "LINKS / RECHTS zu bewegen Tag zu Tag.",
    "7KBMokDeIEC_mM_EfFiiKA#Value.82125743.1": "Folgende Tastenkombinationen sind verfügbar",
    "lRJU8QwPl0iwqv3N9eqD+Q#Value.1784051735.1": "Vormonat",
    "d7ISJdppoUa87s3wJLedig#Value.-766743789.1": "Nächster Monat",
    "eVkbzc3vuEypSjfR3Hr9bA#Value.1511082002.1": "Drücken Sie Tab, um den Kalender aufzurufen",
    "hw5vDiQKrESpaaxSlyRHCA#Value.857568417.1": "Geschlossen. Drücken Sie die Eingabetaste, um den Kalender zu öffnen",
    "1b5_VD14vEWCUSQsUQ8m8g#Value.-464608999.1": "Öffnen. Drücken Sie die Eingabetaste, um den Kalender zu schließen",
    "StrMC+dU8UKyWJfLxq6nJA#Value.-18794124.1": "Gehe zu Heute",
    "Bra9RrfzZk+b3rOW0R7aWA#Value.-113680546.1": "Kalender",
    "bOB6QpW3y0qaPPNGZE3U9A#Value.-911153517.1": "Ausgewähltes Datum: ",
    "XTzYOcd0uEuBcu+inuc+jg#Value.-2092303549.1": "Kalendertage",
    "k2YfRkJbhkWi6MaJmqxhJg#Value.1665633300.1": "Tastenkombinationen",
    "H6apzIN1TUKPQopWFy0zBw#Value.3704893.1": "Jahr",
    "iKX__y0GCEK4HvMWgzSWjA#Value.104080000.1": "Monat",
    "q2HVeR5fq06ujvR8mwXC1g#Value.1862666772.1": "Navigation",
    "Ou2_Lg3vvEe3aQ7GWyGPBQ#Value.979281226.1": "Ende der Zeitspanne.",
    "6yUVQvdC90Gm4KUFQBj81w#Value.1774776785.1": "Start-Bereich.",
    "nmdHfe62kkWmZZi8twrJvg#Value.-1662297402.1": "Der Tag ist in der Zeitspanne.",
    "s6Mc6dzsq0O31GbSo7QbpQ#Value.-1258432986.1": "Hat Ereignis.",
    "pXZo0bRIl0KKarFWqwJMoA#Value.997213361.1": "Der Tag wurde gewählt.",
    "iqF5Pqcm+EuQgVmDvcRfXQ#Value.1584999357.1": "Ist Heute. ",
    "0JFpmf26qEmLPKk06zPUDg#Value.374566222.1": "Deaktiviert.",
    "wupNrsljn0+ZgKsDAgws7w#Value.82886.1": "Sa",
    "7Dxp7GHv9kO9AEdEXQqPGA#Value.70909.1": "Fr",
    "C5ZwndaAOUOl74fkEmefDw#Value.84065.1": "Do",
    "n_faF_hqU0qU+TQPqypwbg#Value.86838.1": "Mi",
    "TxFtPzJ8eEmwSbWV_8uB3w#Value.84452.1": "Di",
    "pWtYDFh+oEGF3oMu1ST3SA#Value.77548.1": "Mo",
    "Q0atH4XnxESfNPKXcNCMhg#Value.83500.1": "So",
    "fxhdUHdd30WEIUqlUd3Dgg#Value.-2049557543.1": "Samstag",
    "PTUebe2ghUGIcIlmoiHGTA#Value.2112549247.1": "Freitag",
    "rZxYcEOLE0SMy_WUK1USbg#Value.1636699642.1": "Donnerstag",
    "2cEIAtVIlES4bU387yYKFA#Value.-897468618.1": "Mittwoch",
    "CdvV1OKrjUSoC4jJteUE6A#Value.687309357.1": "Dienstag",
    "WV8_eD4RTE61GB2a0BkwuQ#Value.-1984635600.1": "Montag",
    "PP+e0FO51k2OuDR1+EhorQ#Value.-1807319568.1": "Sonntag",
    "mSVpIhn5x0WuqHFplsMTFw#Value.626483269.1": "Dezember",
    "duL0nCW7+0uMBTLcjoL7Xg#Value.1703773522.1": "November",
    "9LIV9yDE20eRBuqb7_MUNQ#Value.43165376.1": "Oktober",
    "nX8TB7S5xkW2vLpNGzji6A#Value.-25881423.1": "September",
    "ZIkkytkF00C62bRH6ZRMcA#Value.1972131363.1": "August",
    "OG7OPs09EEmIHvBtd09u5Q#Value.2320440.1": "Juli",
    "q6eCYPoiPE6Z8gtzavUUWg#Value.2320482.1": "Juni",
    "Ew9YPH2yzEGI5SqyvW_2sQ#Value.77125.1": "Mai",
    "jNVk7nRwUkKdBhDRLgvUag#Value.63478374.1": "April",
    "mbDBy4VjB0SzzkLzOXUdFg#Value.74113571.1": "März",
    "4BHq85s+VE+IylptE9ZukQ#Value.-199248958.1": "Februar",
    "Elw2vXw960izxzIMvM1qpA#Value.-162006966.1": "Januar",
    "7JkNQfmve0ybQuEBCcmHfw#Value.2433920.1": "Mittags",
    "tI9n5r_Dx0iO64Cd0TsZQg#Value.-1576218896.1": "Mitternacht",
    "c93RG+ceD0WdMhhBlgm7sA#Value.80981793.1": "Heute",
    "FRQkwo9Yp0iVKYmvglli4w#Value.-766743789.1": "Nächster Monat",
    "1fCvKiR860iF8y93wqzElg#Value.1784051735.1": "Vormonat"
    };
    });
    define("OutSystemsUI.controller$translationsResources.fr-CA", [], function () {
    return {
    "lg7NoSsYfEuhIOQNq772Tw#Value.1874273954.1": "Bien reçu!",
    "EKgo2wktLUWoYHof84369Q#Value.58078159.1": "ESPACE / ENTRÉE pour sélectionner une date.",
    "hxu4s7ASlUCI3vkxgsoR+A#Value.941141342.1": "PAGE BASSE pour passer au mois suivant.",
    "2pdORbIMeUmJLoWBa4tFQQ#Value.-513930751.1": "PAGE HAUTE pour passer au mois précédent.",
    "9s+39UgfEUOBkGEECmMZsw#Value.887781619.1": "ÉCHAPPER pour fermer le calendrier.",
    "yqo5pCbrYUa4Qeqn0J_qOg#Value.-1565462224.1": "SUPPRIMER pour réinitialiser la date.",
    "I6J5cRrTyk6bSZ6JvMUtBg#Value.-1048883153.1": "HAUT / BAS pour passer d\'une semaine à l\'autre.",
    "aUoleWSZBEGHb_sk4X7m8A#Value.-1916325413.1": "GAUCHE / DROITE pour se déplacer d\'un jour à l\'autre.",
    "7KBMokDeIEC_mM_EfFiiKA#Value.82125743.1": "Les raccourcis clavier suivants sont disponibles",
    "lRJU8QwPl0iwqv3N9eqD+Q#Value.1784051735.1": "Mois précédent",
    "d7ISJdppoUa87s3wJLedig#Value.-766743789.1": "Prochain mois",
    "eVkbzc3vuEypSjfR3Hr9bA#Value.1511082002.1": "Appuyez sur Tab pour entrer dans le calendrier",
    "hw5vDiQKrESpaaxSlyRHCA#Value.857568417.1": "Fermé. Appuyez sur Entrée pour ouvrir le calendrier",
    "1b5_VD14vEWCUSQsUQ8m8g#Value.-464608999.1": "Ouvrir. Appuyez sur Entrée pour fermer le calendrier",
    "StrMC+dU8UKyWJfLxq6nJA#Value.-18794124.1": "Allez à aujourd\'hui",
    "Bra9RrfzZk+b3rOW0R7aWA#Value.-113680546.1": "Calendrier",
    "bOB6QpW3y0qaPPNGZE3U9A#Value.-911153517.1": "Date sélectionnée: ",
    "XTzYOcd0uEuBcu+inuc+jg#Value.-2092303549.1": "Dates de calendrier",
    "k2YfRkJbhkWi6MaJmqxhJg#Value.1665633300.1": "Raccourcis clavier",
    "H6apzIN1TUKPQopWFy0zBw#Value.3704893.1": "année",
    "iKX__y0GCEK4HvMWgzSWjA#Value.104080000.1": "mois",
    "q2HVeR5fq06ujvR8mwXC1g#Value.1862666772.1": "navigation",
    "Ou2_Lg3vvEe3aQ7GWyGPBQ#Value.979281226.1": "Fin d\'intervalle. ",
    "6yUVQvdC90Gm4KUFQBj81w#Value.1774776785.1": "Début de l\'intervalle. ",
    "nmdHfe62kkWmZZi8twrJvg#Value.-1662297402.1": "La journée est dans l\'intervalle. ",
    "s6Mc6dzsq0O31GbSo7QbpQ#Value.-1258432986.1": "A un événement. ",
    "pXZo0bRIl0KKarFWqwJMoA#Value.997213361.1": "Journée sélectionnée. ",
    "iqF5Pqcm+EuQgVmDvcRfXQ#Value.1584999357.1": "Est aujourd\'hui. ",
    "0JFpmf26qEmLPKk06zPUDg#Value.374566222.1": "Désactivé. ",
    "wupNrsljn0+ZgKsDAgws7w#Value.82886.1": "Sam",
    "7Dxp7GHv9kO9AEdEXQqPGA#Value.70909.1": "Ven",
    "C5ZwndaAOUOl74fkEmefDw#Value.84065.1": "Jeu",
    "n_faF_hqU0qU+TQPqypwbg#Value.86838.1": "Mer",
    "TxFtPzJ8eEmwSbWV_8uB3w#Value.84452.1": "Mar",
    "pWtYDFh+oEGF3oMu1ST3SA#Value.77548.1": "Lun",
    "Q0atH4XnxESfNPKXcNCMhg#Value.83500.1": "Dim",
    "fxhdUHdd30WEIUqlUd3Dgg#Value.-2049557543.1": "Samedi",
    "PTUebe2ghUGIcIlmoiHGTA#Value.2112549247.1": "Vendredi",
    "rZxYcEOLE0SMy_WUK1USbg#Value.1636699642.1": "Jeudi",
    "2cEIAtVIlES4bU387yYKFA#Value.-897468618.1": "Mercredi",
    "CdvV1OKrjUSoC4jJteUE6A#Value.687309357.1": "Mardi",
    "WV8_eD4RTE61GB2a0BkwuQ#Value.-1984635600.1": "Lundi",
    "PP+e0FO51k2OuDR1+EhorQ#Value.-1807319568.1": "Dimanche",
    "mSVpIhn5x0WuqHFplsMTFw#Value.626483269.1": "Décembre",
    "duL0nCW7+0uMBTLcjoL7Xg#Value.1703773522.1": "Novembre",
    "9LIV9yDE20eRBuqb7_MUNQ#Value.43165376.1": "Octobre",
    "nX8TB7S5xkW2vLpNGzji6A#Value.-25881423.1": "Septembre",
    "ZIkkytkF00C62bRH6ZRMcA#Value.1972131363.1": "Août",
    "OG7OPs09EEmIHvBtd09u5Q#Value.2320440.1": "Juillet",
    "q6eCYPoiPE6Z8gtzavUUWg#Value.2320482.1": "Juin",
    "Ew9YPH2yzEGI5SqyvW_2sQ#Value.77125.1": "Mai",
    "jNVk7nRwUkKdBhDRLgvUag#Value.63478374.1": "Avril",
    "mbDBy4VjB0SzzkLzOXUdFg#Value.74113571.1": "Mars",
    "4BHq85s+VE+IylptE9ZukQ#Value.-199248958.1": "Février",
    "Elw2vXw960izxzIMvM1qpA#Value.-162006966.1": "Janvier",
    "7JkNQfmve0ybQuEBCcmHfw#Value.2433920.1": "Midi",
    "tI9n5r_Dx0iO64Cd0TsZQg#Value.-1576218896.1": "Minuit",
    "c93RG+ceD0WdMhhBlgm7sA#Value.80981793.1": "Aujourd\'hui",
    "FRQkwo9Yp0iVKYmvglli4w#Value.-766743789.1": "Prochain mois",
    "1fCvKiR860iF8y93wqzElg#Value.1784051735.1": "Mois précédent"
    };
    });
    define("OutSystemsUI.controller$translationsResources.pt", [], function () {
    return {
    "lg7NoSsYfEuhIOQNq772Tw#Value.1874273954.1": "Aceitar",
    "EKgo2wktLUWoYHof84369Q#Value.58078159.1": "ESPAÇO / ENTER para seleccionar a data",
    "hxu4s7ASlUCI3vkxgsoR+A#Value.941141342.1": "PAGE DOWN para mover para o mês seguinte",
    "2pdORbIMeUmJLoWBa4tFQQ#Value.-513930751.1": "PAGE UP para mover para o mês anterior",
    "9s+39UgfEUOBkGEECmMZsw#Value.887781619.1": "ESCAPE para fechar o calendário",
    "yqo5pCbrYUa4Qeqn0J_qOg#Value.-1565462224.1": "DELETE para volar a data inicial",
    "I6J5cRrTyk6bSZ6JvMUtBg#Value.-1048883153.1": "CIMA / BAIXO para mover entre semanas",
    "aUoleWSZBEGHb_sk4X7m8A#Value.-1916325413.1": "ESQUERDA / DIREITA para mover entre os dias",
    "7KBMokDeIEC_mM_EfFiiKA#Value.82125743.1": "Os atalhos de teclado que estão disponiveis são os seguintes",
    "lRJU8QwPl0iwqv3N9eqD+Q#Value.1784051735.1": "Mês anterior",
    "d7ISJdppoUa87s3wJLedig#Value.-766743789.1": "Mês seguinte",
    "eVkbzc3vuEypSjfR3Hr9bA#Value.1511082002.1": "Pressione a tecla Tab para entrar no Calendário",
    "hw5vDiQKrESpaaxSlyRHCA#Value.857568417.1": "Fechado. Pressione a tecla Enter para abrir o Calendário",
    "1b5_VD14vEWCUSQsUQ8m8g#Value.-464608999.1": "Aberto. Pressione a tecla Enter para fechar o Calendário",
    "StrMC+dU8UKyWJfLxq6nJA#Value.-18794124.1": "Ir para o dia actual",
    "Bra9RrfzZk+b3rOW0R7aWA#Value.-113680546.1": "Calendário",
    "bOB6QpW3y0qaPPNGZE3U9A#Value.-911153517.1": "Data seleccionada: ",
    "XTzYOcd0uEuBcu+inuc+jg#Value.-2092303549.1": "Datas do calendário ",
    "k2YfRkJbhkWi6MaJmqxhJg#Value.1665633300.1": "Atalhos do teclado",
    "H6apzIN1TUKPQopWFy0zBw#Value.3704893.1": "ano",
    "iKX__y0GCEK4HvMWgzSWjA#Value.104080000.1": "mês",
    "q2HVeR5fq06ujvR8mwXC1g#Value.1862666772.1": "navegação",
    "Ou2_Lg3vvEe3aQ7GWyGPBQ#Value.979281226.1": "Fim de ciclo. ",
    "6yUVQvdC90Gm4KUFQBj81w#Value.1774776785.1": "Inicio de ciclo. ",
    "nmdHfe62kkWmZZi8twrJvg#Value.-1662297402.1": "Dia está no ciclo",
    "s6Mc6dzsq0O31GbSo7QbpQ#Value.-1258432986.1": "Tem evento. ",
    "pXZo0bRIl0KKarFWqwJMoA#Value.997213361.1": "Data seleccionada. ",
    "iqF5Pqcm+EuQgVmDvcRfXQ#Value.1584999357.1": "Hoje. ",
    "0JFpmf26qEmLPKk06zPUDg#Value.374566222.1": "Desactivado. ",
    "wupNrsljn0+ZgKsDAgws7w#Value.82886.1": "Sab",
    "7Dxp7GHv9kO9AEdEXQqPGA#Value.70909.1": "Sex",
    "C5ZwndaAOUOl74fkEmefDw#Value.84065.1": "Qui",
    "n_faF_hqU0qU+TQPqypwbg#Value.86838.1": "Qua",
    "TxFtPzJ8eEmwSbWV_8uB3w#Value.84452.1": "Ter",
    "pWtYDFh+oEGF3oMu1ST3SA#Value.77548.1": "Seg",
    "Q0atH4XnxESfNPKXcNCMhg#Value.83500.1": "Dom",
    "fxhdUHdd30WEIUqlUd3Dgg#Value.-2049557543.1": "Sábado",
    "PTUebe2ghUGIcIlmoiHGTA#Value.2112549247.1": "Sexta",
    "rZxYcEOLE0SMy_WUK1USbg#Value.1636699642.1": "Quinta",
    "2cEIAtVIlES4bU387yYKFA#Value.-897468618.1": "Quarta",
    "CdvV1OKrjUSoC4jJteUE6A#Value.687309357.1": "Terça",
    "WV8_eD4RTE61GB2a0BkwuQ#Value.-1984635600.1": "Segunda",
    "PP+e0FO51k2OuDR1+EhorQ#Value.-1807319568.1": "Domingo",
    "mSVpIhn5x0WuqHFplsMTFw#Value.626483269.1": "Dezembro",
    "duL0nCW7+0uMBTLcjoL7Xg#Value.1703773522.1": "Novembro",
    "9LIV9yDE20eRBuqb7_MUNQ#Value.43165376.1": "Outubro",
    "nX8TB7S5xkW2vLpNGzji6A#Value.-25881423.1": "Setembro",
    "ZIkkytkF00C62bRH6ZRMcA#Value.1972131363.1": "Agosto",
    "OG7OPs09EEmIHvBtd09u5Q#Value.2320440.1": "Julho",
    "q6eCYPoiPE6Z8gtzavUUWg#Value.2320482.1": "Junho",
    "Ew9YPH2yzEGI5SqyvW_2sQ#Value.77125.1": "Maio",
    "jNVk7nRwUkKdBhDRLgvUag#Value.63478374.1": "Abril",
    "mbDBy4VjB0SzzkLzOXUdFg#Value.74113571.1": "Março",
    "4BHq85s+VE+IylptE9ZukQ#Value.-199248958.1": "Fevereiro",
    "Elw2vXw960izxzIMvM1qpA#Value.-162006966.1": "Janeiro",
    "7JkNQfmve0ybQuEBCcmHfw#Value.2433920.1": "meio-dia",
    "tI9n5r_Dx0iO64Cd0TsZQg#Value.-1576218896.1": "meia-noite",
    "c93RG+ceD0WdMhhBlgm7sA#Value.80981793.1": "Hoje",
    "FRQkwo9Yp0iVKYmvglli4w#Value.-766743789.1": "Mês anterior",
    "1fCvKiR860iF8y93wqzElg#Value.1784051735.1": "Mês seguinte"
    };
    });
    define("OutSystemsUI.controller$translationsResources.ja-JP", [], function () {
    return {
    "wupNrsljn0+ZgKsDAgws7w#Value.82886.1": "土",
    "7Dxp7GHv9kO9AEdEXQqPGA#Value.70909.1": "金",
    "C5ZwndaAOUOl74fkEmefDw#Value.84065.1": "木",
    "n_faF_hqU0qU+TQPqypwbg#Value.86838.1": "水",
    "TxFtPzJ8eEmwSbWV_8uB3w#Value.84452.1": "火",
    "pWtYDFh+oEGF3oMu1ST3SA#Value.77548.1": "月",
    "Q0atH4XnxESfNPKXcNCMhg#Value.83500.1": "日",
    "fxhdUHdd30WEIUqlUd3Dgg#Value.-2049557543.1": "土曜日",
    "PTUebe2ghUGIcIlmoiHGTA#Value.2112549247.1": "金曜日",
    "rZxYcEOLE0SMy_WUK1USbg#Value.1636699642.1": "木曜日",
    "2cEIAtVIlES4bU387yYKFA#Value.-897468618.1": "水曜日",
    "CdvV1OKrjUSoC4jJteUE6A#Value.687309357.1": "火曜日",
    "WV8_eD4RTE61GB2a0BkwuQ#Value.-1984635600.1": "月曜日",
    "PP+e0FO51k2OuDR1+EhorQ#Value.-1807319568.1": "日曜日",
    "mSVpIhn5x0WuqHFplsMTFw#Value.626483269.1": "12月",
    "duL0nCW7+0uMBTLcjoL7Xg#Value.1703773522.1": "11月",
    "9LIV9yDE20eRBuqb7_MUNQ#Value.43165376.1": "10月",
    "nX8TB7S5xkW2vLpNGzji6A#Value.-25881423.1": "9月",
    "ZIkkytkF00C62bRH6ZRMcA#Value.1972131363.1": "8月",
    "OG7OPs09EEmIHvBtd09u5Q#Value.2320440.1": "7月",
    "q6eCYPoiPE6Z8gtzavUUWg#Value.2320482.1": "6月",
    "Ew9YPH2yzEGI5SqyvW_2sQ#Value.77125.1": "5月",
    "jNVk7nRwUkKdBhDRLgvUag#Value.63478374.1": "4月",
    "mbDBy4VjB0SzzkLzOXUdFg#Value.74113571.1": "3月",
    "4BHq85s+VE+IylptE9ZukQ#Value.-199248958.1": "2月",
    "Elw2vXw960izxzIMvM1qpA#Value.-162006966.1": "1月"
    };
    });
    